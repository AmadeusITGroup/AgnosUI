{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":143},true,[3,6,9,12,55,98,117],{"title":4,"path":5,"submenu":-1},"Types","api/react/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/react/headless/config",{"title":10,"path":11,"submenu":-1},"Slot","api/react/headless/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51],{"path":16,"slug":17,"label":18},"api/react/headless/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/react/headless/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/react/headless/components/modal","components/modal","Modal",{"path":28,"slug":29,"label":30},"api/react/headless/components/pagination","components/pagination","Pagination",{"path":32,"slug":33,"label":34},"api/react/headless/components/progressbar","components/progressbar","Progressbar",{"path":36,"slug":37,"label":38},"api/react/headless/components/rating","components/rating","Rating",{"path":40,"slug":41,"label":42},"api/react/headless/components/select","components/select","Select",{"path":44,"slug":45,"label":46},"api/react/headless/components/slider","components/slider","Slider",{"path":48,"slug":49,"label":50},"api/react/headless/components/toast","components/toast","Toast",{"path":52,"slug":53,"label":54},"api/react/headless/components/tree","components/tree","Tree",{"title":56,"path":-1,"submenu":57},"Services",[58,62,66,70,74,78,82,86,90,94],{"path":59,"slug":60,"label":61},"api/react/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":63,"slug":64,"label":65},"api/react/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":67,"slug":68,"label":69},"api/react/headless/services/focustrack","services/focustrack","focustrack",{"path":71,"slug":72,"label":73},"api/react/headless/services/hash","services/hash","hash",{"path":75,"slug":76,"label":77},"api/react/headless/services/intersection","services/intersection","intersection",{"path":79,"slug":80,"label":81},"api/react/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":83,"slug":84,"label":85},"api/react/headless/services/navManager","services/navManager","navManager",{"path":87,"slug":88,"label":89},"api/react/headless/services/portal","services/portal","portal",{"path":91,"slug":92,"label":93},"api/react/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":95,"slug":96,"label":97},"api/react/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":99,"path":-1,"submenu":100},"Transitions",[101,105,109,113],{"path":102,"slug":103,"label":104},"api/react/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":106,"slug":107,"label":108},"api/react/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":110,"slug":111,"label":112},"api/react/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":114,"slug":115,"label":116},"api/react/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":118,"path":-1,"submenu":119},"Utils",[120,124,128,131,135,139],{"path":121,"slug":122,"label":123},"api/react/headless/utils/directive","utils/directive","directive",{"path":125,"slug":126,"label":127},"api/react/headless/utils/func","utils/func","func",{"path":129,"slug":130,"label":89},"api/react/headless/utils/portal","utils/portal",{"path":132,"slug":133,"label":134},"api/react/headless/utils/stores","utils/stores","stores",{"path":136,"slug":137,"label":138},"api/react/headless/utils/widget","utils/widget","widget",{"path":140,"slug":141,"label":142},"api/react/headless/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":27,"import":28},"components/rating",[3,6,9,12,15,18,21,24],{"source":4,"name":5},"## function_createRating\n> **createRating**(`config`?): [`RatingWidget`](#ratingwidget)\n\n\nCreate a RatingWidget with given config props\n\n### Parameters\n\n#### config?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`RatingProps`](#ratingprops)\\>\n\nan optional alert config\n\n### Returns\n\n[`RatingWidget`](#ratingwidget)\n\na RatingWidget\n","createRating",{"source":7,"name":8},"## function_getRatingDefaultConfig\n> **getRatingDefaultConfig**(): [`RatingProps`](#ratingprops)\n\n\nReturns a shallow copy of the default rating config.\n\n### Returns\n\n[`RatingProps`](#ratingprops)\n\na copy of the default config\n","getRatingDefaultConfig",{"source":10,"name":11},"## interface_RatingApi\n\nInterface representing the API that can be performed on a rating component.\n\n### Methods\n\n#### leave\n\n> **leave**(): `void`\n\n\nLeave the rating, resetting the visible rating to the rating value and triggering the onLeave callback\n\n##### Returns\n\n`void`\n\n***\n\n#### setHoveredRating\n\n> **setHoveredRating**(`index`): `void`\n\n\nSets the hovered rating value.\n\n##### Parameters\n\n###### index\n\n`number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n\n***\n\n#### setRating\n\n> **setRating**(`index`): `void`\n\n\nSets the rating value.\n\n##### Parameters\n\n###### index\n\n`number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n","RatingApi",{"source":13,"name":14},"## interface_RatingDirectives\n\nInterface representing directives for a rating component.\n\n### Properties\n\n#### containerDirective\n\n> **containerDirective**: [`Directive`](../types#directive)\n\n\nA directive to be applied to the main container\nThis will handle the keydown, mouseleave, tabindex and aria attributes\n\n***\n\n#### starDirective\n\n> **starDirective**: [`Directive`](../types#directive)\\\u003C\\{ `index`: `number`; \\}\\>\n\n\nA directive to be applied on each star element\n","RatingDirectives",{"source":16,"name":17},"## interface_RatingProps\n\nInterface representing the properties for the Rating widget.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: (`rating`, `maxRating`) => `string`\n\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Parameters\n\n###### rating\n\n`number`\n\nCurrent rating value.\n\n###### maxRating\n\n`number`\n\nmaxRating value.\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(rating: number, maxRating: number) => `${rating} out of ${maxRating}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### onHover\n\n> **onHover**: (`rating`) => `void`\n\n\nAn event emitted when the user is hovering over a given rating.\n\nEvent payload is equal to the rating being hovered over.\n\n##### Parameters\n\n###### rating\n\n`number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onLeave\n\n> **onLeave**: (`rating`) => `void`\n\n\nAn event emitted when the user stops hovering over a given rating.\n\nEvent payload is equal to the rating of the last item being hovered over.\n\n##### Parameters\n\n###### rating\n\n`number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onRatingChange\n\n> **onRatingChange**: (`rating`) => `void`\n\n\nAn event emitted when the rating is changed.\n\nEvent payload is equal to the newly selected rating.\n\n##### Parameters\n\n###### rating\n\n`number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### rating\n\n> **rating**: `number`\n\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n","RatingProps",{"source":19,"name":20},"## interface_RatingState\n\nRepresents the state of a rating component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `string`\n\n\nthe aria value of the rating\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\n\nis the rating interactive i.e. listening to hover, click and keyboard events\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### rating\n\n> **rating**: `number`\n\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### stars\n\n> **stars**: [`StarContext`](#starcontext)[]\n\n\nthe list of stars\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### visibleRating\n\n> **visibleRating**: `number`\n\n\nthe visible value of the rating (it changes when hovering over the rating even though the real value did not change)\n","RatingState",{"source":22,"name":23},"## type alias_RatingWidget\n> **RatingWidget**: [`Widget`](../types#widget)\\\u003C[`RatingProps`](#ratingprops), [`RatingState`](#ratingstate), [`RatingApi`](#ratingapi), [`RatingDirectives`](#ratingdirectives)\\>\n\n\nRepresents a Rating widget.\n","RatingWidget",{"source":25,"name":26},"## interface_StarContext\n\nRepresents the context for a star in a rating component.\n\n### Properties\n\n#### fill\n\n> **fill**: `number`\n\n\nindicates how much the current star is filled, from 0 to 100\n\n***\n\n#### index\n\n> **index**: `number`\n\n\nthe position of the star in the rating\n","StarContext","API rating","@agnos-ui/react-headless/components/rating"],"uses":{"params":["framework","type","slug"]}}]}
