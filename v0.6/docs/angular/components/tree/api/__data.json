{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,86,129],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Collapse","beta","docs/angular/daisyUI/collapse/","daisyUI/collapse/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"title":87,"submenu":88},"Bootstrap Components",[89,92,96,99,102,105,108,111,114,119,122,125],{"label":7,"status":8,"path":90,"subpath":-1,"slug":91},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":93,"subpath":94,"slug":95},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":97,"subpath":94,"slug":98},"docs/angular/components/alert/","components/alert/",{"label":58,"status":59,"path":100,"subpath":94,"slug":101},"docs/angular/components/collapse/","components/collapse/",{"label":63,"status":49,"path":103,"subpath":94,"slug":104},"docs/angular/components/modal/","components/modal/",{"label":67,"status":49,"path":106,"subpath":94,"slug":107},"docs/angular/components/pagination/","components/pagination/",{"label":71,"status":49,"path":109,"subpath":94,"slug":110},"docs/angular/components/progressbar/","components/progressbar/",{"label":75,"status":49,"path":112,"subpath":94,"slug":113},"docs/angular/components/rating/","components/rating/",{"label":115,"status":116,"path":117,"subpath":94,"slug":118},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":79,"status":49,"path":120,"subpath":94,"slug":121},"docs/angular/components/slider/","components/slider/",{"label":83,"status":49,"path":123,"subpath":94,"slug":124},"docs/angular/components/toast/","components/toast/",{"label":126,"status":59,"path":127,"subpath":94,"slug":128},"Tree","docs/angular/components/tree/","components/tree/",{"title":130,"submenu":131},"Services",[132,135,139,143,147,151],{"label":7,"status":8,"path":133,"subpath":-1,"slug":134},"docs/angular/services/introduction","services/introduction",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":144,"status":8,"path":145,"subpath":-1,"slug":146},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":148,"status":8,"path":149,"subpath":-1,"slug":150},"Transition","docs/angular/services/transition","services/transition",{"label":152,"status":8,"path":153,"subpath":-1,"slug":154},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":18,"next":21},"Tree","beta","v0.6.0","standalone",[6,10,14],{"title":7,"key":8,"path":9},"Examples","examples","/components/tree/examples",{"title":11,"key":12,"path":13},"Api","api","/components/tree/api",{"title":15,"key":16,"path":17},"Styling","style","/components/tree/style",{"title":19,"slug":20,"subpath":8},"Toast","components/toast/",{"title":22,"slug":23,"subpath":-1},"Services: Introduction","services/introduction"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":63,"import":64},"tree",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60],{"source":4,"name":5},"## function_createTree\n> **createTree**(`props`?): [`TreeWidget`](#treewidget)\n\nCreate a Tree with given config props\n\n### Parameters\n\nâ€¢ **props?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/tree/../../types#propsconfig)\\\u003C[`TreeProps`](#treeprops)\\>\n\n### Returns\n\n[`TreeWidget`](#treewidget)\n\na TreeWidget\n","createTree",{"source":7,"name":8},"## function_getTreeDefaultConfig\n> **getTreeDefaultConfig**(): [`TreeProps`](#treeprops)\n\nRetrieve a shallow copy of the default Tree config\n\n### Returns\n\n[`TreeProps`](#treeprops)\n\nthe default Tree config\n","getTreeDefaultConfig",{"source":10,"name":11},"## interface_NormalizedTreeItem\nNormalized TreeItem object\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nAccessibility label for the node\n\n***\n\n#### children\n\n> **children**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\nAn array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\nString title of the node\n\n***\n\n#### level\n\n> **level**: `number`\n\nLevel in the hierarchy, starts with 0 for a root node\n","NormalizedTreeItem",{"source":13,"name":14},"## interface_TreeApi\nInterface representing the API for a Tree component.\n","TreeApi",{"source":16,"name":17},"## class_TreeComponent\nTreeComponent is an Angular component that extends the BaseWidgetDirective\nto provide a customizable tree widget. This component allows for various\nconfigurations and customizations through its inputs and outputs.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaLabelToggleFn\n\n> **ariaLabelToggleFn**: `undefined` \\| (`label`) => `string`\n\nReturn the value for the 'aria-label' attribute of the toggle\n\n##### Param\n\ntree item label\n\n##### Default Value\n\n```ts\n(label: string) => `Toggle ${label}`\n```\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### expandToggle\n\n> **expandToggle**: `EventEmitter`\\\u003C[`TreeItem`](#treeitem)\\>\n\nAn event emitted when the user toggles the expand of the TreeItem.\n\nEvent payload is equal to the TreeItem clicked.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### item\n\n> **item**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item content\n\n***\n\n#### navSelector\n\n> **navSelector**: `undefined` \\| (`node`) => `NodeListOf`\\\u003C[`HTMLButtonElement`](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)\\>\n\nRetrieves expand items of the TreeItem\n\n##### Param\n\nHTML element that is representing the expand item\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('button')\n```\n\n***\n\n#### nodes\n\n> **nodes**: `undefined` \\| [`TreeItem`](#treeitem)[]\n\nArray of the tree nodes to display\n\n##### Default Value\n\n`[]`\n\n***\n\n#### root\n\n> **root**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\nSlot to change the default display of the tree\n\n***\n\n#### toggle\n\n> **toggle**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item toggle\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../../../../api/angular/bootstrap/components/tree/../../types#angularstate)\\\u003C`W`\\>\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../../../../api/angular/bootstrap/components/tree/../../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","TreeComponent",{"source":19,"name":20},"## type alias_TreeContext\n> **TreeContext**: [`WidgetSlotContext`](../../../../api/angular/bootstrap/components/tree/../../types#widgetslotcontext)\\\u003C[`TreeWidget`](#treewidget)\\>\n\nRepresents the context for a Tree widget.\nThis interface is an alias for `WidgetSlotContext\u003CTreeWidget>`.\n","TreeContext",{"source":22,"name":23},"## constant_treeDefaultItemToggle\n> `const` **treeDefaultItemToggle**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nA constant representing the default slot for tree item toggle.\n","treeDefaultItemToggle",{"source":25,"name":26},"## constant_treeDefaultSlotItem\n> `const` **treeDefaultSlotItem**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nA constant representing the default slot for tree item.\n","treeDefaultSlotItem",{"source":28,"name":29},"## constant_treeDefaultSlotItemContent\n> `const` **treeDefaultSlotItemContent**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nA constant representing the default slot for tree item.\n","treeDefaultSlotItemContent",{"source":31,"name":32},"## constant_treeDefaultSlotStructure\n> `const` **treeDefaultSlotStructure**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\nA constant representing the default slot for tree structure.\n","treeDefaultSlotStructure",{"source":34,"name":35},"## interface_TreeDirectives\nInterface representing various directives used in the Tree component.\n\n### Properties\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/tree/../../types#directive)\\\u003C`object`\\>\n\nDirective to handle attributes for the tree item\n\n##### Type declaration\n\n###### item\n\n> **item**: [`NormalizedTreeItem`](#normalizedtreeitem)\n\n***\n\n#### itemToggleDirective\n\n> **itemToggleDirective**: [`Directive`](../../../../api/angular/bootstrap/components/tree/../../types#directive)\\\u003C`object`\\>\n\nDirective to handle toggle for the tree item\n\n##### Type declaration\n\n###### item\n\n> **item**: [`NormalizedTreeItem`](#normalizedtreeitem)\n\n***\n\n#### navigationDirective\n\n> **navigationDirective**: [`Directive`](../../../../api/angular/bootstrap/components/tree/../../types#directive)\n\nDirective to attach navManager for the tree\n","TreeDirectives",{"source":37,"name":38},"## interface_TreeItem\nRepresents a tree item component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\nOptional accessibility label for the node\n\n***\n\n#### children?\n\n> `optional` **children**: [`TreeItem`](#treeitem)[]\n\nOptional array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\nString title of the node\n","TreeItem",{"source":40,"name":41},"## class_TreeItemContentDirective\nDirective to provide a template reference for tree item content.\n\nThis directive uses a template reference to render the [TreeSlotItemContext](#treeslotitemcontext).\n","TreeItemContentDirective",{"source":43,"name":44},"## class_TreeItemDirective\nDirective to provide a template reference for tree item.\n\nThis directive uses a template reference to render the [TreeSlotItemContext](#treeslotitemcontext).\n","TreeItemDirective",{"source":46,"name":47},"## class_TreeItemToggleDirective\nDirective to provide a template reference for tree item toggle.\n\nThis directive uses a template reference to render the [TreeSlotItemContext](#treeslotitemcontext).\n","TreeItemToggleDirective",{"source":49,"name":50},"## interface_TreeProps\nRepresents the properties for the Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaLabelToggleFn\n\n> **ariaLabelToggleFn**: (`label`) => `string`\n\nReturn the value for the 'aria-label' attribute of the toggle\n\n##### Parameters\n\nâ€¢ **label**: `string`\n\ntree item label\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(label: string) => `Toggle ${label}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### item\n\n> **item**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item\n\n***\n\n#### itemContent\n\n> **itemContent**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item content\n\n***\n\n#### itemToggle\n\n> **itemToggle**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item toggle\n\n***\n\n#### nodes\n\n> **nodes**: [`TreeItem`](#treeitem)[]\n\nArray of the tree nodes to display\n\n##### Default Value\n\n`[]`\n\n***\n\n#### onExpandToggle\n\n> **onExpandToggle**: (`node`) => `void`\n\nAn event emitted when the user toggles the expand of the TreeItem.\n\nEvent payload is equal to the TreeItem clicked.\n\n##### Parameters\n\nâ€¢ **node**: [`NormalizedTreeItem`](#normalizedtreeitem)\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\nSlot to change the default display of the tree\n\n### Methods\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLButtonElement`](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)\\>\n\nRetrieves expand items of the TreeItem\n\n##### Parameters\n\nâ€¢ **node**: [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTML element that is representing the expand item\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLButtonElement`](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('button')\n```\n","TreeProps",{"source":52,"name":53},"## type alias_TreeSlotItemContext\n> **TreeSlotItemContext**: [`TreeContext`](#treecontext) & `object`\n\nRepresents the context for a tree item, extending the base `TreeContext`\nwith an additional `item` property.\n\n### Type declaration\n\n#### item\n\n> **item**: [`NormalizedTreeItem`](#normalizedtreeitem)\n","TreeSlotItemContext",{"source":55,"name":56},"## interface_TreeState\nRepresents the state of a Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### expandedMap\n\n> **expandedMap**: `object`\n\nGetter of expanded state for each tree node\n\n##### get\n\n###### Parameters\n\nâ€¢ **item**: [`NormalizedTreeItem`](#normalizedtreeitem)\n\n###### Returns\n\n`undefined` \\| `boolean`\n\n***\n\n#### item\n\n> **item**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item\n\n***\n\n#### itemContent\n\n> **itemContent**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item content\n\n***\n\n#### itemToggle\n\n> **itemToggle**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\nSlot to change the default tree item toggle\n\n***\n\n#### normalizedNodes\n\n> **normalizedNodes**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\nArray of normalized tree nodes\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/tree/../../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\nSlot to change the default display of the tree\n","TreeState",{"source":58,"name":59},"## class_TreeStructureDirective\nDirective to provide a template reference for tree structure.\n\nThis directive uses a template reference to render the [TreeContext](#treecontext).\n","TreeStructureDirective",{"source":61,"name":62},"## type alias_TreeWidget\n> **TreeWidget**: [`Widget`](../../../../api/angular/bootstrap/components/tree/../../types#widget)\\\u003C[`TreeProps`](#treeprops), [`TreeState`](#treestate), [`TreeApi`](#treeapi), [`TreeDirectives`](#treedirectives)\\>\n\nRepresents a Tree widget component.\n","TreeWidget","Tree","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
