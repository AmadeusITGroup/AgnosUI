{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,86,129],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/react/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/react/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/react/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/react/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/react/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/react/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/react/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/react/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/react/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/react/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/react/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Collapse","beta","docs/react/daisyUI/collapse/","daisyUI/collapse/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Modal","docs/react/daisyUI/modal/","daisyUI/modal/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Pagination","docs/react/daisyUI/pagination/","daisyUI/pagination/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Progressbar","docs/react/daisyUI/progressbar/","daisyUI/progressbar/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Rating","docs/react/daisyUI/rating/","daisyUI/rating/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Slider","docs/react/daisyUI/slider/","daisyUI/slider/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Toast","docs/react/daisyUI/toast/","daisyUI/toast/",{"title":87,"submenu":88},"Bootstrap Components",[89,92,96,99,102,105,108,111,114,119,122,125],{"label":7,"status":8,"path":90,"subpath":-1,"slug":91},"docs/react/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":93,"subpath":94,"slug":95},"docs/react/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":97,"subpath":94,"slug":98},"docs/react/components/alert/","components/alert/",{"label":58,"status":59,"path":100,"subpath":94,"slug":101},"docs/react/components/collapse/","components/collapse/",{"label":63,"status":49,"path":103,"subpath":94,"slug":104},"docs/react/components/modal/","components/modal/",{"label":67,"status":49,"path":106,"subpath":94,"slug":107},"docs/react/components/pagination/","components/pagination/",{"label":71,"status":49,"path":109,"subpath":94,"slug":110},"docs/react/components/progressbar/","components/progressbar/",{"label":75,"status":49,"path":112,"subpath":94,"slug":113},"docs/react/components/rating/","components/rating/",{"label":115,"status":116,"path":117,"subpath":94,"slug":118},"Select","inprogress","docs/react/components/select/","components/select/",{"label":79,"status":49,"path":120,"subpath":94,"slug":121},"docs/react/components/slider/","components/slider/",{"label":83,"status":49,"path":123,"subpath":94,"slug":124},"docs/react/components/toast/","components/toast/",{"label":126,"status":59,"path":127,"subpath":94,"slug":128},"Tree","docs/react/components/tree/","components/tree/",{"title":130,"submenu":131},"Services",[132,135,139,143,147,151],{"label":7,"status":8,"path":133,"subpath":-1,"slug":134},"docs/react/services/introduction","services/introduction",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Focustrack","docs/react/services/focustrack","services/focustrack",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Floating UI","docs/react/services/floating-ui","services/floating-ui",{"label":144,"status":8,"path":145,"subpath":-1,"slug":146},"Resize Observer","docs/react/services/resize-observer","services/resize-observer",{"label":148,"status":8,"path":149,"subpath":-1,"slug":150},"Transition","docs/react/services/transition","services/transition",{"label":152,"status":8,"path":153,"subpath":-1,"slug":154},"Match Media","docs/react/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":13,"next":16},"Accordion","stable","v0.4.0",[5,9],{"title":6,"key":7,"path":8},"Examples","headless","/daisyUI/accordion/headless",{"title":10,"key":11,"path":12},"Api","api","/daisyUI/accordion/api",{"title":14,"slug":15,"subpath":-1},"Headless Components: Introduction","headless-components/introduction",{"title":17,"slug":18,"subpath":7},"Alert","daisyUI/alert/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":45,"import":46},"accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42],{"source":4,"name":5},"## interface_AccordionApi\nInterface representing the API for an accordion component.\n\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreates a new accordionItem.\n\n##### Parameters\n\n• **itemConfig?**: [`PropsConfig`](../../../../api/react/headless/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":7,"name":8},"## interface_AccordionDirectives\nInterface representing the directives used in the Accordion component.\n\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":10,"name":11},"## interface_AccordionItemApi\nInterface representing the API for an accordion item.\n\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":13,"name":14},"## interface_AccordionItemDirectives\nInterface representing the directives used in an accordion item.\n\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../../../../api/react/headless/components/accordion/../../types#directive)\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":16,"name":17},"## interface_AccordionItemProps\nProperties for an AccordionItem component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../../../../api/react/headless/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":19,"name":20},"## interface_AccordionItemState\nRepresents the state of an accordion item.\n\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":22,"name":23},"## type alias_AccordionItemWidget\n> **AccordionItemWidget**: [`Widget`](../../../../api/react/headless/components/accordion/../../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n\nRepresents a widget for an accordion item.\n","AccordionItemWidget",{"source":25,"name":26},"## interface_AccordionProps\nProperties for the Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../../../../api/react/headless/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\nasync () => {}\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":28,"name":29},"## interface_AccordionState\nRepresents the state of an Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":31,"name":32},"## type alias_AccordionWidget\n> **AccordionWidget**: [`Widget`](../../../../api/react/headless/components/accordion/../../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), [`AccordionDirectives`](#accordiondirectives)\\>\n\nRepresents an Accordion widget with specific properties, state, API, and directives.\n","AccordionWidget",{"source":34,"name":35},"## function_createAccordion\n> **createAccordion**(`props`?): [`AccordionWidget`](#accordionwidget)\n\nCreates a new Accordion widget instance.\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../../../../api/react/headless/components/accordion/../../types#propsconfig)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\n### Returns\n\n[`AccordionWidget`](#accordionwidget)\n\na new accordion widget instance\n","createAccordion",{"source":37,"name":38},"## function_createAccordionItem\n> **createAccordionItem**(`config`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreates a new AccordionItem widget instance.\n\n### Parameters\n\n• **config?**: [`PropsConfig`](../../../../api/react/headless/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\nconfig of the accordion item, either as a store or as an object containing values or stores.\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\na new accordion item widget instance\n","createAccordionItem",{"source":40,"name":41},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`, `accordionItemProps`, `accordionConfig`, `accordionValidator`): [`WidgetFactory`](../../../../api/react/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n• **itemFactory**: [`WidgetFactory`](../../../../api/react/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\> = `createAccordionItem`\n\nthe item factory\n\n• **accordionItemProps**: `string`[] = `coreAccordionItemProps`\n\nthe list of item props\n\n• **accordionConfig**: [`AccordionProps`](#accordionprops) = `defaultAccordionConfig`\n\nthe default accordion config\n\n• **accordionValidator**: [`ConfigValidator`](../../../../api/react/headless/components/accordion/../../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\> = `configAccordionValidator`\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../../../../api/react/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":43,"name":44},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig","Accordion","@agnos-ui/react-headless/components/accordion"],"uses":{"params":["framework","component"]}}]}
