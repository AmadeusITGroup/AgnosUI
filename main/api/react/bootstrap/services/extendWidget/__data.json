{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":163},true,[3,6,9,12,67,114,137],{"title":4,"path":5,"submenu":-1},"Types","api/react/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/react/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/react/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55,59,63],{"path":16,"slug":17,"label":18},"api/react/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/react/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/react/bootstrap/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/react/bootstrap/components/collapse","components/collapse","Collapse",{"path":32,"slug":33,"label":34},"api/react/bootstrap/components/drawer","components/drawer","Drawer",{"path":36,"slug":37,"label":38},"api/react/bootstrap/components/modal","components/modal","Modal",{"path":40,"slug":41,"label":42},"api/react/bootstrap/components/pagination","components/pagination","Pagination",{"path":44,"slug":45,"label":46},"api/react/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":48,"slug":49,"label":50},"api/react/bootstrap/components/rating","components/rating","Rating",{"path":52,"slug":53,"label":54},"api/react/bootstrap/components/select","components/select","Select",{"path":56,"slug":57,"label":58},"api/react/bootstrap/components/slider","components/slider","Slider",{"path":60,"slug":61,"label":62},"api/react/bootstrap/components/toast","components/toast","Toast",{"path":64,"slug":65,"label":66},"api/react/bootstrap/components/tree","components/tree","Tree",{"title":68,"path":-1,"submenu":69},"Services",[70,74,78,82,86,90,94,98,102,106,110],{"path":71,"slug":72,"label":73},"api/react/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":75,"slug":76,"label":77},"api/react/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":79,"slug":80,"label":81},"api/react/bootstrap/services/focusElement","services/focusElement","focusElement",{"path":83,"slug":84,"label":85},"api/react/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":87,"slug":88,"label":89},"api/react/bootstrap/services/hash","services/hash","hash",{"path":91,"slug":92,"label":93},"api/react/bootstrap/services/intersection","services/intersection","intersection",{"path":95,"slug":96,"label":97},"api/react/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":99,"slug":100,"label":101},"api/react/bootstrap/services/navManager","services/navManager","navManager",{"path":103,"slug":104,"label":105},"api/react/bootstrap/services/portal","services/portal","portal",{"path":107,"slug":108,"label":109},"api/react/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":111,"slug":112,"label":113},"api/react/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":115,"path":-1,"submenu":116},"Transitions",[117,121,125,129,133],{"path":118,"slug":119,"label":120},"api/react/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":122,"slug":123,"label":124},"api/react/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":126,"slug":127,"label":128},"api/react/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":130,"slug":131,"label":132},"api/react/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":134,"slug":135,"label":136},"api/react/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":138,"path":-1,"submenu":139},"Utils",[140,144,148,151,155,159],{"path":141,"slug":142,"label":143},"api/react/bootstrap/utils/directive","utils/directive","directive",{"path":145,"slug":146,"label":147},"api/react/bootstrap/utils/func","utils/func","func",{"path":149,"slug":150,"label":105},"api/react/bootstrap/utils/portal","utils/portal",{"path":152,"slug":153,"label":154},"api/react/bootstrap/utils/stores","utils/stores","stores",{"path":156,"slug":157,"label":158},"api/react/bootstrap/utils/widget","utils/widget","widget",{"path":160,"slug":161,"label":162},"api/react/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":18,"import":19},"services/extendWidget",[3,6,9,12,15],{"source":4,"name":5},"## type alias_ExtendWidgetAdaptSlotContentProps\n> **ExtendWidgetAdaptSlotContentProps**\\\u003C`Props`, `ExtraProps`, `ExtraDirectives`\\> = `Props` *extends* [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003Cinfer U\\> ? [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C[`ExtendWidgetProps`](#extendwidgetprops)\\\u003C`U`, `ExtraProps`, `ExtraDirectives`\\>\\> & [`Omit`](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)\\\u003C`Props`, keyof [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C`any`\\>\\> : `Props`\n\n\nType to adapt the slot content properties of a widget by extending its props, extra props, and extra directives.\n\n### Type Parameters\n\n#### Props\n\n`Props` *extends* [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `any`\\>\n\nThe original properties of the widget slot context.\n\n#### ExtraProps\n\n`ExtraProps` *extends* `object`\n\nAdditional properties to extend the widget slot context.\n\n#### ExtraDirectives\n\n`ExtraDirectives` *extends* `object`\n\nAdditional directives to extend the widget slot context.\n\n### Remarks\n\nThis type conditionally checks if `Props` extends `WidgetSlotContext` and, if so, extends the widget slot context\nwith additional properties and directives while omitting the original widget slot context properties.\n","ExtendWidgetAdaptSlotContentProps",{"source":7,"name":8},"## type alias_ExtendWidgetAdaptSlotWidgetProps\n> **ExtendWidgetAdaptSlotWidgetProps**\\\u003C`Props`, `ExtraProps`, `ExtraDirectives`\\> = `ExtraProps` & `{ [K in keyof Props]: IsSlotContent\u003CProps[K]> extends SlotContent\u003Cinfer U> ? SlotContent\u003CExtendWidgetAdaptSlotContentProps\u003CU, ExtraProps, ExtraDirectives>> : Props[K] }`\n\n\nType definition for extending widget properties with additional properties and directives.\n\nThis type takes three generic parameters:\n- `Props`: The original properties of the widget.\n- `ExtraProps`: Additional properties to be merged with the original properties.\n- `ExtraDirectives`: Additional directives to be merged with the original properties.\n\nThe resulting type combines `ExtraProps` with the original `Props`. For each property in `Props`,\nif the property is of type `SlotContent`, it will be extended with the additional properties and directives.\n\n### Type Parameters\n\n#### Props\n\n`Props`\n\nThe original properties of the widget.\n\n#### ExtraProps\n\n`ExtraProps` *extends* `object`\n\nAdditional properties to be merged with the original properties.\n\n#### ExtraDirectives\n\n`ExtraDirectives` *extends* `object`\n\nAdditional directives to be merged with the original properties.\n","ExtendWidgetAdaptSlotWidgetProps",{"source":10,"name":11},"## type alias_ExtendWidgetInterfaces\n> **ExtendWidgetInterfaces**\\\u003C`Interfaces`, `ExtraInterfaces`\\> = `Interfaces` & `ExtraInterfaces`\n\n\nCombines two interface types into a single type.\n\n### Type Parameters\n\n#### Interfaces\n\n`Interfaces`\n\nThe base interface type.\n\n#### ExtraInterfaces\n\n`ExtraInterfaces`\n\nThe additional interface type to extend the base interface.\n","ExtendWidgetInterfaces",{"source":13,"name":14},"## function_extendWidgetProps\n> **extendWidgetProps**\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>(`factory`, `extraPropsDefaults`, `extraPropsConfig?`, `overrideDefaults?`): [`WidgetFactory`](../types#widgetfactory)\\\u003C[`ExtendWidgetProps`](#extendwidgetprops)\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>\\>\n\n\nMethod to extend the original widget with extra props with validator\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](../types#widget)\\\u003C`object`, `object`, `object`, `object`\\>\n\nThe type of the widget.\n\n#### ExtraProps\n\n`ExtraProps` *extends* `object`\n\nThe type of the additional properties.\n\n#### ExtraDirectives\n\n`ExtraDirectives` *extends* `object` = `object`\n\nThe type of the additional directives (default is an empty object).\n\n### Parameters\n\n#### factory\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C`W`\\>\n\noriginal widget factory\n\n#### extraPropsDefaults\n\n`ExtraProps`\n\nobject containing default value for each extra prop\n\n#### extraPropsConfig?\n\n[`ConfigValidator`](../types#configvalidator)\\\u003C`ExtraProps`\\>\n\nobject verifying the type of each extra prop\n\n#### overrideDefaults?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetState`](../types#widgetstate)\\\u003C`W`\\>\\>\n\nobject overriding some default props of the widget to extend\n\n### Returns\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C[`ExtendWidgetProps`](#extendwidgetprops)\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>\\>\n\nwidget factory with the extra props\n","extendWidgetProps",{"source":16,"name":17},"## type alias_ExtendWidgetProps\n> **ExtendWidgetProps**\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\> = [`Widget`](../types#widget)\\\u003C[`ExtendWidgetAdaptSlotWidgetProps`](#extendwidgetadaptslotwidgetprops)\\\u003C[`WidgetProps`](../types#widgetprops)\\\u003C`W`\\>, `ExtraProps`, `ExtraDirectives`\\>, [`ExtendWidgetAdaptSlotWidgetProps`](#extendwidgetadaptslotwidgetprops)\\\u003C[`WidgetState`](../types#widgetstate)\\\u003C`W`\\>, `ExtraProps`, `ExtraDirectives`\\>, `W`\\[`\"api\"`\\], [`ExtendWidgetInterfaces`](#extendwidgetinterfaces)\\\u003C`W`\\[`\"directives\"`\\], `ExtraDirectives`\\>\\>\n\n\nType extending the original Widget props and state with ExtraProps\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](../types#widget)\n\nThe base widget type to be extended.\n\n#### ExtraProps\n\n`ExtraProps` *extends* `object`\n\nAdditional properties to be added to the widget.\n\n#### ExtraDirectives\n\n`ExtraDirectives` *extends* `object` = `object`\n\nAdditional directives to be added to the widget. Defaults to an empty object.\n","ExtendWidgetProps","API extendWidget","@agnos-ui/react-bootstrap/services/extendWidget"],"uses":{"params":["framework","type","slug"]}}]}
