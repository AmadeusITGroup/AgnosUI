{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":139},true,[3,6,9,12,51,94,117],{"title":4,"path":5,"submenu":-1},"Types","api/react/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/react/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/react/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47],{"path":16,"slug":17,"label":18},"api/react/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/react/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/react/bootstrap/components/modal","components/modal","Modal",{"path":28,"slug":29,"label":30},"api/react/bootstrap/components/pagination","components/pagination","Pagination",{"path":32,"slug":33,"label":34},"api/react/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":36,"slug":37,"label":38},"api/react/bootstrap/components/rating","components/rating","Rating",{"path":40,"slug":41,"label":42},"api/react/bootstrap/components/select","components/select","Select",{"path":44,"slug":45,"label":46},"api/react/bootstrap/components/slider","components/slider","Slider",{"path":48,"slug":49,"label":50},"api/react/bootstrap/components/toast","components/toast","Toast",{"title":52,"path":-1,"submenu":53},"Services",[54,58,62,66,70,74,78,82,86,90],{"path":55,"slug":56,"label":57},"api/react/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":59,"slug":60,"label":61},"api/react/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":63,"slug":64,"label":65},"api/react/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":67,"slug":68,"label":69},"api/react/bootstrap/services/hash","services/hash","hash",{"path":71,"slug":72,"label":73},"api/react/bootstrap/services/intersection","services/intersection","intersection",{"path":75,"slug":76,"label":77},"api/react/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":79,"slug":80,"label":81},"api/react/bootstrap/services/navManager","services/navManager","navManager",{"path":83,"slug":84,"label":85},"api/react/bootstrap/services/portal","services/portal","portal",{"path":87,"slug":88,"label":89},"api/react/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":91,"slug":92,"label":93},"api/react/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":95,"path":-1,"submenu":96},"Transitions",[97,101,105,109,113],{"path":98,"slug":99,"label":100},"api/react/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":102,"slug":103,"label":104},"api/react/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":106,"slug":107,"label":108},"api/react/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":110,"slug":111,"label":112},"api/react/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":114,"slug":115,"label":116},"api/react/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":118,"path":-1,"submenu":119},"Utils",[120,124,127,131,135],{"path":121,"slug":122,"label":123},"api/react/bootstrap/utils/directive","utils/directive","directive",{"path":125,"slug":126,"label":85},"api/react/bootstrap/utils/portal","utils/portal",{"path":128,"slug":129,"label":130},"api/react/bootstrap/utils/stores","utils/stores","stores",{"path":132,"slug":133,"label":134},"api/react/bootstrap/utils/widget","utils/widget","widget",{"path":136,"slug":137,"label":138},"api/react/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":57,"import":58},"components/accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54],{"source":4,"name":5},"## function_Accordion\n> **Accordion**(`props`): `ReactNode`\n\n### Parameters\n\n• **props**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`AccordionProps`](#accordionprops)\\> & `object` & `RefAttributes`\\\u003C[`AccordionApi`](#accordionapi)\\>\n\n### Returns\n\n`ReactNode`\n","Accordion",{"source":7,"name":8},"## interface_AccordionApi\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreates a new accordionItem.\n\n##### Parameters\n\n• **itemConfig?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":10,"name":11},"## interface_AccordionDirectives\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../types#directive)\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":13,"name":14},"## function_AccordionItem\n> **AccordionItem**(`props`): `ReactNode`\n\n### Parameters\n\n• **props**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\> & `RefAttributes`\\\u003C[`AccordionItemApi`](#accordionitemapi)\\>\n\n### Returns\n\n`ReactNode`\n","AccordionItem",{"source":16,"name":17},"## interface_AccordionItemActions\n### Methods\n\n#### click\n\n> **click**(): `void`\n\nAction to be called when the user clicks on the accordion-item button. If the accordion-item is disabled nothing will happen.\n\n##### Returns\n\n`void`\n","AccordionItemActions",{"source":19,"name":20},"## interface_AccordionItemApi\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":22,"name":23},"## type alias_AccordionItemContext\n> **AccordionItemContext**: [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n","AccordionItemContext",{"source":25,"name":26},"## interface_AccordionItemDirectives\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../types#directive)\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../types#directive)\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../types#directive)\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../types#directive)\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../types#directive)\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../types#directive)\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../types#directive)\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":28,"name":29},"## interface_AccordionItemProps\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":31,"name":32},"## interface_AccordionItemState\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":34,"name":35},"## type alias_AccordionItemWidget\n> **AccordionItemWidget**: [`Widget`](../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemActions`](#accordionitemactions), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n","AccordionItemWidget",{"source":37,"name":38},"## interface_AccordionProps\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":40,"name":41},"## interface_AccordionState\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":43,"name":44},"## type alias_AccordionWidget\n> **AccordionWidget**: [`Widget`](../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), `object`, [`AccordionDirectives`](#accordiondirectives)\\>\n","AccordionWidget",{"source":46,"name":47},"## function_createAccordion\n> **createAccordion**(`props`?): [`AccordionWidget`](#accordionwidget)\n\nCreate an AccordionWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\n### Returns\n\n[`AccordionWidget`](#accordionwidget)\n\nan AccordionWidget\n","createAccordion",{"source":49,"name":50},"## function_createAccordionItem\n> **createAccordionItem**(`props`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreate an AccordionItemWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\nan AccordionItemWidget\n","createAccordionItem",{"source":52,"name":53},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`?, `accordionItemProps`?, `accordionConfig`?, `accordionValidator`?): [`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n• **itemFactory?**: [`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nthe item factory\n\n• **accordionItemProps?**: `string`[]\n\nthe list of item props\n\n• **accordionConfig?**: [`AccordionProps`](#accordionprops)\n\nthe default accordion config\n\n• **accordionValidator?**: [`ConfigValidator`](../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":55,"name":56},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig","API accordion","@agnos-ui/react-bootstrap/components/accordion"],"uses":{"params":["framework","type","slug"]}}]}
