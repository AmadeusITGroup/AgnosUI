{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":155},true,[3,6,9,12,63,106,129],{"title":4,"path":5,"submenu":-1},"Types","api/react/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/react/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/react/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55,59],{"path":16,"slug":17,"label":18},"api/react/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/react/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/react/bootstrap/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/react/bootstrap/components/collapse","components/collapse","Collapse",{"path":32,"slug":33,"label":34},"api/react/bootstrap/components/modal","components/modal","Modal",{"path":36,"slug":37,"label":38},"api/react/bootstrap/components/pagination","components/pagination","Pagination",{"path":40,"slug":41,"label":42},"api/react/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":44,"slug":45,"label":46},"api/react/bootstrap/components/rating","components/rating","Rating",{"path":48,"slug":49,"label":50},"api/react/bootstrap/components/select","components/select","Select",{"path":52,"slug":53,"label":54},"api/react/bootstrap/components/slider","components/slider","Slider",{"path":56,"slug":57,"label":58},"api/react/bootstrap/components/toast","components/toast","Toast",{"path":60,"slug":61,"label":62},"api/react/bootstrap/components/tree","components/tree","Tree",{"title":64,"path":-1,"submenu":65},"Services",[66,70,74,78,82,86,90,94,98,102],{"path":67,"slug":68,"label":69},"api/react/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":71,"slug":72,"label":73},"api/react/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":75,"slug":76,"label":77},"api/react/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":79,"slug":80,"label":81},"api/react/bootstrap/services/hash","services/hash","hash",{"path":83,"slug":84,"label":85},"api/react/bootstrap/services/intersection","services/intersection","intersection",{"path":87,"slug":88,"label":89},"api/react/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":91,"slug":92,"label":93},"api/react/bootstrap/services/navManager","services/navManager","navManager",{"path":95,"slug":96,"label":97},"api/react/bootstrap/services/portal","services/portal","portal",{"path":99,"slug":100,"label":101},"api/react/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":103,"slug":104,"label":105},"api/react/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":107,"path":-1,"submenu":108},"Transitions",[109,113,117,121,125],{"path":110,"slug":111,"label":112},"api/react/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":114,"slug":115,"label":116},"api/react/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":118,"slug":119,"label":120},"api/react/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":122,"slug":123,"label":124},"api/react/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":126,"slug":127,"label":128},"api/react/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":130,"path":-1,"submenu":131},"Utils",[132,136,140,143,147,151],{"path":133,"slug":134,"label":135},"api/react/bootstrap/utils/directive","utils/directive","directive",{"path":137,"slug":138,"label":139},"api/react/bootstrap/utils/func","utils/func","func",{"path":141,"slug":142,"label":97},"api/react/bootstrap/utils/portal","utils/portal",{"path":144,"slug":145,"label":146},"api/react/bootstrap/utils/stores","utils/stores","stores",{"path":148,"slug":149,"label":150},"api/react/bootstrap/utils/widget","utils/widget","widget",{"path":152,"slug":153,"label":154},"api/react/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":36,"import":37},"components/select",[3,6,9,12,15,18,21,24,27,30,33],{"source":4,"name":5},"## constant_createSelect\n> `const` **createSelect**: \\\u003C`Item`\\>(`config?`) => [`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\n\nCreates a new select widget instance.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\n### Parameters\n\n#### config?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>\\>\n\nconfig of the modal, either as a store or as an object containing values or stores.\n\n### Returns\n\n[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\na new select widget instance\n","createSelect",{"source":7,"name":8},"## constant_getSelectDefaultConfig\n> `const` **getSelectDefaultConfig**: () => [`SelectProps`](#selectprops)\\\u003C`any`\\>\n\n\nRetrieve a shallow copy of the default Select config\n\n### Returns\n\n[`SelectProps`](#selectprops)\\\u003C`any`\\>\n\nthe default Select config\n","getSelectDefaultConfig",{"source":10,"name":11},"## interface_ItemContext\n\nItem representation built from the items provided in parameters\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the Select Items\n\n### Properties\n\n#### id\n\n> **id**: `string`\n\n\nUnique id to identify the item\n\n***\n\n#### item\n\n> **item**: `T`\n\n\nOriginal item given in the parameters\n\n***\n\n#### selected\n\n> **selected**: `boolean`\n\n\nSpecify if the item is checked\n","ItemContext",{"source":13,"name":14},"## function_Select\n> **Select**\\\u003C`Item`\\>(`props`): `Element`\n\n\nA generic Select component that provides a customizable dropdown selection interface.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the items in the selection.\n\n### Parameters\n\n#### props\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>\\> & `object`\n\nThe properties for the Select component.\n\n### Returns\n\n`Element`\n\nThe rendered Select component.\n\n### Remarks\n\nThis component uses a widget context to manage its state and directives. It supports\ncustom badge labels and item labels through the widget configuration.\n","Select",{"source":16,"name":17},"## interface_SelectApi\n\nInterface representing the API for a Select component.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the Select Items\n\n### Methods\n\n#### clear\n\n> **clear**(): `void`\n\n\nClear all the selected items\n\n##### Returns\n\n`void`\n\n***\n\n#### clearText\n\n> **clearText**(): `void`\n\n\nClear the filter text\n\n##### Returns\n\n`void`\n\n***\n\n#### close\n\n> **close**(): `void`\n\n\nclose the select\n\n##### Returns\n\n`void`\n\n***\n\n#### highlight\n\n> **highlight**(`item`): `void`\n\n\nHighlight the given item, if there is a corresponding match among the visible list\n\n##### Parameters\n\n###### item\n\n`Item`\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightFirst\n\n> **highlightFirst**(): `void`\n\n\nHighlight the first item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightLast\n\n> **highlightLast**(): `void`\n\n\nHighlight the last item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightNext\n\n> **highlightNext**(): `void`\n\n\nHighlight the next item among the visible list.\nLoop to the first item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightPrevious\n\n> **highlightPrevious**(): `void`\n\n\nHighlight the previous item among the visible list\nLoop to the last item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\n\nopen the select\n\n##### Returns\n\n`void`\n\n***\n\n#### select\n\n> **select**(`item`): `void`\n\n\nSelect the provided item.\nThe selected list is used to\n\n##### Parameters\n\n###### item\n\n`Item`\n\nthe item to select\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(`isOpen?`): `void`\n\n\nToggle the dropdown menu\n\n##### Parameters\n\n###### isOpen?\n\n`boolean`\n\nIf specified, set the menu in the defined state.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggleItem\n\n> **toggleItem**(`item`, `selected?`): `void`\n\n\nToggle the selection of an item\n\n##### Parameters\n\n###### item\n\n`Item`\n\nthe item to toggle\n\n###### selected?\n\n`boolean`\n\nan optional boolean to enforce the selected/unselected state instead of toggling\n\n##### Returns\n\n`void`\n\n***\n\n#### unselect\n\n> **unselect**(`item`): `void`\n\n\nUnselect the provided item.\n\n##### Parameters\n\n###### item\n\n`Item`\n\nthe item to unselect\n\n##### Returns\n\n`void`\n","SelectApi",{"source":19,"name":20},"## interface_SelectContext\n\nInterface for the slot context of the pagination widget\n\n### Extended by\n\n- [`SelectItemContext`](#selectitemcontext)\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the items in the Select component.\n\n### Properties\n\n#### api\n\n> **api**: [`SelectApi`](#selectapi)\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SelectDirectives`](#selectdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`SelectState`](#selectstate)\\\u003C`Item`\\>\n\n\nthe state of the widget\n","SelectContext",{"source":22,"name":23},"## interface_SelectDirectives\n\nInterface representing the directives used in the Select component.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the Select Items\n\n### Properties\n\n#### badgeAttributesDirective\n\n> **badgeAttributesDirective**: [`Directive`](../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\n\nA directive that applies all the necessary attributes to the container badges\n\n***\n\n#### badgeCloseButtonDirective\n\n> **badgeCloseButtonDirective**: [`Directive`](../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\n\nA directive to be applied to a button that closes a badge\n\n***\n\n#### floatingDirective\n\n> **floatingDirective**: [`Directive`](../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n\nDirective that enables dynamic positioning of menu element\n\n***\n\n#### hasFocusDirective\n\n> **hasFocusDirective**: [`Directive`](../types#directive)\n\n\nDirective to be used in the input group and the menu containers\n\n***\n\n#### inputContainerDirective\n\n> **inputContainerDirective**: [`Directive`](../types#directive)\n\n\nA directive to be applied to the element that contains the badges and the input\n\n***\n\n#### inputDirective\n\n> **inputDirective**: [`Directive`](../types#directive)\n\n\nA directive to be applied to the input\n\n***\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\n\nA directive that applies all the necessary attributes to the dropdown item\n\n***\n\n#### menuAttributesDirective\n\n> **menuAttributesDirective**: [`Directive`](../types#directive)\n\n\nA directive that applies all the necessary attributes to the dropdown menu\n\n***\n\n#### referenceDirective\n\n> **referenceDirective**: [`Directive`](../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n\nA directive to be applied to the input group element serves as the base for menu positioning\n","SelectDirectives",{"source":25,"name":26},"## interface_SelectItemContext\n\nRepresents the context for a select item, extending the base `SelectContext` with additional\ncontextual data specific to an item.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the item within the select context.\n\n### Properties\n\n#### api\n\n> **api**: [`SelectApi`](#selectapi)\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SelectDirectives`](#selectdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### itemContext\n\n> **itemContext**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\n\nContextual data related to an item\n\n***\n\n#### state\n\n> **state**: [`SelectState`](#selectstate)\\\u003C`Item`\\>\n\n\nthe state of the widget\n","SelectItemContext",{"source":28,"name":29},"## interface_SelectProps\n\nRepresents the properties for the Select component.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the items in the select component.\n\n### Properties\n\n#### allowedPlacements\n\n> **allowedPlacements**: `Placement`[]\n\n\nList of allowed placements for the dropdown.\nThis refers to the [allowedPlacements from floating UI](https://floating-ui.com/docs/autoPlacement#allowedplacements), given the different [Placement possibilities](https://floating-ui.com/docs/computePosition#placement).\n\n##### Default Value\n\n```ts\n['bottom-start', 'top-start', 'bottom-end', 'top-end']\n```\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### items\n\n> **items**: `Item`[]\n\n\nList of available items for the dropdown\n\n##### Default Value\n\n`[]`\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n### Methods\n\n#### itemIdFn\n\n> **itemIdFn**(`item`): `string`\n\n\nCustom function to get the id of an item\nBy default, the item is returned\n\n##### Parameters\n\n###### item\n\n`Item`\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(item: any) => '' + item\n```\n\n***\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\n\nRetrieves navigable elements within an HTML element containing badges and the input.\n\n##### Parameters\n\n###### node\n\n[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTMLElement that contains the badges and the input\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('.au-select-badge,input')\n```\n\n***\n\n#### onFilterTextChange\n\n> **onFilterTextChange**(`text`): `void`\n\n\nCallback called when the text filter change\n\n##### Parameters\n\n###### text\n\n`string`\n\nFiltered text\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onOpenChange\n\n> **onOpenChange**(`isOpen`): `void`\n\n\nCallback called dropdown open state change\n\n##### Parameters\n\n###### isOpen\n\n`boolean`\n\nupdated open state\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onSelectedChange\n\n> **onSelectedChange**(`selected`): `void`\n\n\nCallback called when the selection change\n\n##### Parameters\n\n###### selected\n\n`Item`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","SelectProps",{"source":31,"name":32},"## interface_SelectState\n\nRepresents the state of a Select component.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the items in the select component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### highlighted\n\n> **highlighted**: `undefined` \\| [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\n\nHighlighted item context.\nIt is designed to define the highlighted item in the dropdown menu\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### placement\n\n> **placement**: `undefined` \\| `Placement`\n\n\nCurrent placement of the dropdown\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n***\n\n#### selectedContexts\n\n> **selectedContexts**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\n\nList of selected items to be display\n\n***\n\n#### visibleItems\n\n> **visibleItems**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\n\nList of item contexts, to be displayed in the menu\n","SelectState",{"source":34,"name":35},"## type alias_SelectWidget\n> **SelectWidget**\\\u003C`Item`\\> = [`Widget`](../types#widget)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>, [`SelectState`](#selectstate)\\\u003C`Item`\\>, [`SelectApi`](#selectapi)\\\u003C`Item`\\>, [`SelectDirectives`](#selectdirectives)\\\u003C`Item`\\>\\>\n\n\nRepresents a Select widget component.\n\n### Type Parameters\n\n#### Item\n\n`Item`\n\nThe type of the items that the select widget will handle.\n","SelectWidget","API select","@agnos-ui/react-bootstrap/components/select"],"uses":{"params":["framework","type","slug"]}}]}
