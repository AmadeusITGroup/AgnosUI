{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":163},true,[3,6,9,12,67,114,137],{"title":4,"path":5,"submenu":-1},"Types","api/react/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/react/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/react/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55,59,63],{"path":16,"slug":17,"label":18},"api/react/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/react/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/react/bootstrap/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/react/bootstrap/components/collapse","components/collapse","Collapse",{"path":32,"slug":33,"label":34},"api/react/bootstrap/components/drawer","components/drawer","Drawer",{"path":36,"slug":37,"label":38},"api/react/bootstrap/components/modal","components/modal","Modal",{"path":40,"slug":41,"label":42},"api/react/bootstrap/components/pagination","components/pagination","Pagination",{"path":44,"slug":45,"label":46},"api/react/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":48,"slug":49,"label":50},"api/react/bootstrap/components/rating","components/rating","Rating",{"path":52,"slug":53,"label":54},"api/react/bootstrap/components/select","components/select","Select",{"path":56,"slug":57,"label":58},"api/react/bootstrap/components/slider","components/slider","Slider",{"path":60,"slug":61,"label":62},"api/react/bootstrap/components/toast","components/toast","Toast",{"path":64,"slug":65,"label":66},"api/react/bootstrap/components/tree","components/tree","Tree",{"title":68,"path":-1,"submenu":69},"Services",[70,74,78,82,86,90,94,98,102,106,110],{"path":71,"slug":72,"label":73},"api/react/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":75,"slug":76,"label":77},"api/react/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":79,"slug":80,"label":81},"api/react/bootstrap/services/focusElement","services/focusElement","focusElement",{"path":83,"slug":84,"label":85},"api/react/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":87,"slug":88,"label":89},"api/react/bootstrap/services/hash","services/hash","hash",{"path":91,"slug":92,"label":93},"api/react/bootstrap/services/intersection","services/intersection","intersection",{"path":95,"slug":96,"label":97},"api/react/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":99,"slug":100,"label":101},"api/react/bootstrap/services/navManager","services/navManager","navManager",{"path":103,"slug":104,"label":105},"api/react/bootstrap/services/portal","services/portal","portal",{"path":107,"slug":108,"label":109},"api/react/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":111,"slug":112,"label":113},"api/react/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":115,"path":-1,"submenu":116},"Transitions",[117,121,125,129,133],{"path":118,"slug":119,"label":120},"api/react/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":122,"slug":123,"label":124},"api/react/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":126,"slug":127,"label":128},"api/react/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":130,"slug":131,"label":132},"api/react/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":134,"slug":135,"label":136},"api/react/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":138,"path":-1,"submenu":139},"Utils",[140,144,148,151,155,159],{"path":141,"slug":142,"label":143},"api/react/bootstrap/utils/directive","utils/directive","directive",{"path":145,"slug":146,"label":147},"api/react/bootstrap/utils/func","utils/func","func",{"path":149,"slug":150,"label":105},"api/react/bootstrap/utils/portal","utils/portal",{"path":152,"slug":153,"label":154},"api/react/bootstrap/utils/stores","utils/stores","stores",{"path":156,"slug":157,"label":158},"api/react/bootstrap/utils/widget","utils/widget","widget",{"path":160,"slug":161,"label":162},"api/react/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":39,"import":40},"utils/writables",[3,6,9,12,15,18,21,24,27,30,33,36],{"source":4,"name":5},"## function_createTypeEnum\n> **createTypeEnum**\\\u003C`T`\\>(`enumList`): [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`T`\\>\n\n\nBuild an enum normalizer\n\n### Type Parameters\n\n#### T\n\n`T`\n\nthe enum type\n\n### Parameters\n\n#### enumList\n\n`T`[]\n\nlist of enum values to check\n\n### Returns\n\n[`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`T`\\>\n\nthe enum normalizer\n","createTypeEnum",{"source":7,"name":8},"## function_testToNormalizeValue\n> **testToNormalizeValue**\\\u003C`T`\\>(`filter`): (`value`) => *typeof* [`INVALID_VALUE`](../types#invalid_value) \\| `T`\n\n\nCheck if a value respects a provided type guard.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type that the filter function validates.\n\n### Parameters\n\n#### filter\n\n(`value`) => `value is T`\n\nA function that takes a value and returns a boolean indicating\n                whether the value is of type T.\n\n### Returns\n\nA function that takes a value and returns the value if it passes the filter,\n         otherwise returns `INVALID_VALUE`.\n\n> (`value`): *typeof* [`INVALID_VALUE`](../types#invalid_value) \\| `T`\n\n#### Parameters\n\n##### value\n\n`any`\n\n#### Returns\n\n*typeof* [`INVALID_VALUE`](../types#invalid_value) \\| `T`\n","testToNormalizeValue",{"source":10,"name":11},"## constant_typeArray\n> `const` **typeArray**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`any`[]\\>\n\n\nA writable object with default options for handling arrays.\n","typeArray",{"source":13,"name":14},"## constant_typeBoolean\n> `const` **typeBoolean**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`boolean`\\>\n\n\nA writable object with default options for boolean values.\n\nThis object provides a normalized way to handle boolean values\nusing the `WritableWithDefaultOptions` interface. The `normalizeValue`\nfunction ensures that the value is properly validated and normalized\nas a boolean.\n","typeBoolean",{"source":16,"name":17},"## constant_typeBooleanOrNull\n> `const` **typeBooleanOrNull**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`boolean` \\| `null`\\>\n\n\nA writable with default options that normalizes its value to a boolean or null.\n\nThis writable uses a normalization function that allows null values and ensures\nthe value is a boolean.\n","typeBooleanOrNull",{"source":19,"name":20},"## constant_typeFunction\n> `const` **typeFunction**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C(...`args`) => `any`\\>\n\n\nA writable object that holds a function type with default options.\n","typeFunction",{"source":22,"name":23},"## constant_typeHTMLElementOrNull\n> `const` **typeHTMLElementOrNull**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement) \\| `null`\\>\n\n\nA writable object with default options for handling values of type `HTMLElement` or `null`.\n\nThis object provides:\n- `normalizeValue`: A function to normalize the value, ensuring it is either an `HTMLElement` or `null`.\n- `equal`: A function to compare two values for equality using `Object.is`.\n","typeHTMLElementOrNull",{"source":25,"name":26},"## constant_typeNumber\n> `const` **typeNumber**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`number`\\>\n\n\nA writable object with default options for handling numbers.\n","typeNumber",{"source":28,"name":29},"## function_typeNumberInRangeFactory\n> **typeNumberInRangeFactory**(`min`, `max`, `options`): [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`number`\\>\n\n\nFactory function for creating a type constraint for numbers within a specified range.\n\n### Parameters\n\n#### min\n\n`number`\n\nThe minimum value.\n\n#### max\n\n`number`\n\nThe maximum value.\n\n#### options\n\n[`TypeNumberInRangeOptions`](#typenumberinrangeoptions) = `{}`\n\nAdditional options to customize the behavior.\n\n### Returns\n\n[`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`number`\\>\n\nA type guard function that returns the clamp value or INVALID_VALUE depending on the provided options.\n","typeNumberInRangeFactory",{"source":31,"name":32},"## interface_TypeNumberInRangeOptions\n\nOptions for specifying the behavior of number range validation.\n\n### Properties\n\n#### strict?\n\n> `optional` **strict**: `boolean`\n\n\nIf `true`, the range checking will be strict, excluding the minimum and maximum values. Default is `false`.\n\n***\n\n#### useClamp?\n\n> `optional` **useClamp**: `boolean`\n\n\nIf `true`, values outside the range will be clamped to the minimum or maximum. Default is `true`.\n","TypeNumberInRangeOptions",{"source":34,"name":35},"## constant_typeString\n> `const` **typeString**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`string`\\>\n\n\nA writable object with default options for string values.\n\nThis object provides a normalized value for strings using the `testToNormalizeValue` function\nwith the `isString` validator.\n","typeString",{"source":37,"name":38},"## constant_typeStringOrNull\n> `const` **typeStringOrNull**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`string` \\| `null`\\>\n\n\nA writable with default options that normalizes its value to a string or null.\n\nThis object provides a normalized value for strings using the `testToNormalizeValue` function\nwith the `isString` validator.\n","typeStringOrNull","API writables","@agnos-ui/react-bootstrap/utils/writables"],"uses":{"params":["framework","type","slug"]}}]}
