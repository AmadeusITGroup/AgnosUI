{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":139},true,[3,6,9,12,51,94,117],{"title":4,"path":5,"submenu":-1},"Types","api/react/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/react/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/react/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47],{"path":16,"slug":17,"label":18},"api/react/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/react/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/react/bootstrap/components/modal","components/modal","Modal",{"path":28,"slug":29,"label":30},"api/react/bootstrap/components/pagination","components/pagination","Pagination",{"path":32,"slug":33,"label":34},"api/react/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":36,"slug":37,"label":38},"api/react/bootstrap/components/rating","components/rating","Rating",{"path":40,"slug":41,"label":42},"api/react/bootstrap/components/select","components/select","Select",{"path":44,"slug":45,"label":46},"api/react/bootstrap/components/slider","components/slider","Slider",{"path":48,"slug":49,"label":50},"api/react/bootstrap/components/toast","components/toast","Toast",{"title":52,"path":-1,"submenu":53},"Services",[54,58,62,66,70,74,78,82,86,90],{"path":55,"slug":56,"label":57},"api/react/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":59,"slug":60,"label":61},"api/react/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":63,"slug":64,"label":65},"api/react/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":67,"slug":68,"label":69},"api/react/bootstrap/services/hash","services/hash","hash",{"path":71,"slug":72,"label":73},"api/react/bootstrap/services/intersection","services/intersection","intersection",{"path":75,"slug":76,"label":77},"api/react/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":79,"slug":80,"label":81},"api/react/bootstrap/services/navManager","services/navManager","navManager",{"path":83,"slug":84,"label":85},"api/react/bootstrap/services/portal","services/portal","portal",{"path":87,"slug":88,"label":89},"api/react/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":91,"slug":92,"label":93},"api/react/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":95,"path":-1,"submenu":96},"Transitions",[97,101,105,109,113],{"path":98,"slug":99,"label":100},"api/react/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":102,"slug":103,"label":104},"api/react/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":106,"slug":107,"label":108},"api/react/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":110,"slug":111,"label":112},"api/react/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":114,"slug":115,"label":116},"api/react/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":118,"path":-1,"submenu":119},"Utils",[120,124,127,131,135],{"path":121,"slug":122,"label":123},"api/react/bootstrap/utils/directive","utils/directive","directive",{"path":125,"slug":126,"label":85},"api/react/bootstrap/utils/portal","utils/portal",{"path":128,"slug":129,"label":130},"api/react/bootstrap/utils/stores","utils/stores","stores",{"path":132,"slug":133,"label":134},"api/react/bootstrap/utils/widget","utils/widget","widget",{"path":136,"slug":137,"label":138},"api/react/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":75,"import":76},"types",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72],{"source":4,"name":5},"## type alias_AttributeValue\n> **AttributeValue**: `string` \\| `number` \\| `boolean` \\| `undefined`\n","AttributeValue",{"source":7,"name":8},"## type alias_ConfigValidator\n> **ConfigValidator**\\\u003C`T`\\>: `{ [K in keyof T]?: WritableWithDefaultOptions\u003CT[K]> }`\n\n### Type Parameters\n\n• **T** *extends* `object`\n","ConfigValidator",{"source":10,"name":11},"## type alias_ContextWidget\n> **ContextWidget**\\\u003C`W`\\>: [`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C`W`, `\"actions\"` \\| `\"api\"` \\| `\"directives\"` \\| `\"state$\"` \\| `\"stores\"`\\>\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](#widget)\n","ContextWidget",{"source":13,"name":14},"## type alias_Directive\n> **Directive**\\\u003C`T`, `U`\\>: (`node`, `args`) => `void` \\| `object`\n\n### Type Parameters\n\n• **T** = `void`\n\n• **U** *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\n### Parameters\n\n• **node**: `U`\n\n• **args**: `T`\n\n### Returns\n\n`void` \\| `object`\n","Directive",{"source":16,"name":17},"## type alias_DirectiveAndParam\n> **DirectiveAndParam**\\\u003C`T`, `U`\\>: [[`Directive`](#directive)\\\u003C`T`, `U`\\>, `T`]\n\n### Type Parameters\n\n• **T**\n\n• **U** *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n","DirectiveAndParam",{"source":19,"name":20},"## type alias_DirectivesAndOptParam\n> **DirectivesAndOptParam**\\\u003C`T`, `U`\\>: \\{ \\[K in keyof T\\]: Directive\\\u003Cvoid, U\\> \\| DirectiveAndParam\\\u003CT\\[K\\], U\\> \\}\n\n### Type Parameters\n\n• **T** *extends* `any`[]\n\n• **U** *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n","DirectivesAndOptParam",{"source":22,"name":23},"## type alias_Extends\n> **Extends**\\\u003C`T`, `U`\\>: `T` *extends* `U` ? `1` : `0`\n\n### Type Parameters\n\n• **T**\n\n• **U**\n","Extends",{"source":25,"name":26},"## constant_INVALID_VALUE\n> `const` **INVALID\\_VALUE**: *typeof* [`INVALID_VALUE`](#invalid_value)\n","INVALID_VALUE",{"source":28,"name":29},"## type alias_IsSlotContent\n> **IsSlotContent**\\\u003C`T`\\>: [`Extends`](#extends)\\\u003C`T`, `SlotContent`\\\u003C`any`\\>\\> \\| [`Extends`](#extends)\\\u003C`SlotContent`\\\u003C`any`\\>, `T`\\> *extends* `1` ? `T` : `0`\n\n### Type Parameters\n\n• **T**\n","IsSlotContent",{"source":31,"name":32},"## type alias_NormalizeValue\n> **NormalizeValue**\\\u003C`T`\\>: (`value`) => `T` \\| *typeof* [`INVALID_VALUE`](#invalid_value)\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n• **value**: `T`\n\n### Returns\n\n`T` \\| *typeof* [`INVALID_VALUE`](#invalid_value)\n","NormalizeValue",{"source":34,"name":35},"## interface_PropsConfig\n### Type Parameters\n\n• **U** *extends* `object`\n\n### Properties\n\n#### config?\n\n> `optional` **config**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`U`\\>\\> \\| [`ValuesOrReadableSignals`](#valuesorreadablesignals)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`U`\\>\\>\n\nEither a store of objects containing, for each property, the default value,\nor an object containing, for each property, either a store containing the default value or the default value itself.\n\n***\n\n#### props?\n\n> `optional` **props**: [`ValuesOrWritableSignals`](#valuesorwritablesignals)\\\u003C`U`\\>\n\nObject containing, for each property, either its initial value, or a store that will contain the value at any time.\nWhen the value of a property is undefined or invalid, the value from the config is used.\n","PropsConfig",{"source":37,"name":38},"## type alias_SlotContent\n> **SlotContent**\\\u003C`Props`\\>: `CoreSlotContent`\\\u003C`Props`\\> \\| (`props`) => `React.ReactNode` \\| `React.ComponentType`\\\u003C`Props`\\> \\| `React.ReactNode`\n\n### Type Parameters\n\n• **Props** *extends* `object` = `object`\n","SlotContent",{"source":40,"name":41},"## interface_SSRHTMLElement\nSubset of HTMLElement that is available in a server side rendering context.\n\n### Properties\n\n#### classList\n\n> **classList**: [`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C[`DOMTokenList`](https://developer.mozilla.org/docs/Web/API/DOMTokenList), `\"remove\"` \\| `\"add\"` \\| `\"toggle\"`\\>\n\nObject allowing to manipulate the classes of the element.\n\n***\n\n#### style\n\n> **style**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C[`StyleKey`](#stylekey), [`StyleValue`](#stylevalue)\\>\\>\n\nObject allowing to manipulate the style of the element.\n\n### Methods\n\n#### removeAttribute\n\n> **removeAttribute**(`qualifiedName`): `void`\n\nRemoves element's first attribute whose qualified name is qualifiedName.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttribute)\n\n##### Parameters\n\n• **qualifiedName**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### setAttribute\n\n> **setAttribute**(`qualifiedName`, `value`): `void`\n\nSets the value of element's first attribute whose qualified name is qualifiedName to value.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttribute)\n\n##### Parameters\n\n• **qualifiedName**: `string`\n\n• **value**: `string`\n\n##### Returns\n\n`void`\n","SSRHTMLElement",{"source":43,"name":44},"## type alias_StyleKey\n> **StyleKey**: [`Exclude`](https://www.typescriptlang.org/docs/handbook/utility-types.html#excludeuniontype-excludedmembers)\\\u003Ckeyof [`CSSStyleDeclaration`](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration), `\"length\"` \\| `\"item\"` \\| `\"parentRule\"` \\| `\"getPropertyValue\"` \\| `\"getPropertyPriority\"` \\| `\"setProperty\"` \\| `\"removeProperty\"` \\| *typeof* `Symbol.iterator` \\| `number` \\| `\"cssText\"`\\>\n","StyleKey",{"source":46,"name":47},"## type alias_StyleValue\n> **StyleValue**: `string` \\| `undefined` \\| `null`\n","StyleValue",{"source":49,"name":50},"## function_toSlotContextWidget\n> **toSlotContextWidget**\\\u003C`W`\\>(`w`): [`ContextWidget`](#contextwidget)\\\u003C`W`\\>\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](#widget)\\\u003C`object`, `object`, `object`, `object`, `object`\\>\n\n### Parameters\n\n• **w**: `W`\n\nthe widget\n\n### Returns\n\n[`ContextWidget`](#contextwidget)\\\u003C`W`\\>\n\nthe slot context\n","toSlotContextWidget",{"source":52,"name":53},"## type alias_ValuesOrReadableSignals\n> **ValuesOrReadableSignals**\\\u003C`T`\\>: \\{ \\[K in keyof T\\]?: ReadableSignal\\\u003CT\\[K\\] \\| undefined\\> \\| T\\[K\\] \\}\n\n### Type Parameters\n\n• **T** *extends* `object`\n","ValuesOrReadableSignals",{"source":55,"name":56},"## type alias_ValuesOrWritableSignals\n> **ValuesOrWritableSignals**\\\u003C`T`\\>: \\{ \\[K in keyof T\\]?: WritableSignal\\\u003CT\\[K\\] \\| undefined\\> \\| T\\[K\\] \\}\n\n### Type Parameters\n\n• **T** *extends* `object`\n","ValuesOrWritableSignals",{"source":58,"name":59},"## interface_Widget\n### Type Parameters\n\n• **Props** *extends* `object` = `object`\n\n• **State** *extends* `object` = `object`\n\n• **Api** *extends* `object` = `object`\n\n• **Actions** *extends* `object` = `object`\n\n• **Directives** *extends* `object` = `object`\n\n### Properties\n\n#### actions\n\n> **actions**: `Actions`\n\nall the handlers that should be connected to user interactions i.e. click, keyboard and touch interactions.\ntypically, the handlers are event listeners that call api functions to affect the widget state\n\n***\n\n#### api\n\n> **api**: `Api`\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: `Directives`\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state$\n\n> **state$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`State`\\>\n\nthe reactive state of the widget, combining all the values served by the stores\n\n***\n\n#### stores\n\n> **stores**: \\{ \\[K in string \\| number \\| symbol as \\`$\\{K & string\\}$\\`\\]: ReadableSignal\\\u003CState\\[K\\]\\> \\}\n\nthe different stores of the widget, all reactive\n\n### Methods\n\n#### patch\n\n> **patch**(`parameters`): `void`\n\nModify the parameter values, and recalculate the stores accordingly\n\n##### Parameters\n\n• **parameters**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Props`\\>\n\n##### Returns\n\n`void`\n","Widget",{"source":61,"name":62},"## type alias_WidgetFactory\n> **WidgetFactory**\\\u003C`W`\\>: (`props`?) => `W`\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](#widget)\n\n### Parameters\n\n• **props?**: [`PropsConfig`](#propsconfig)\\\u003C[`WidgetProps`](#widgetprops)\\\u003C`W`\\>\\>\n\n### Returns\n\n`W`\n","WidgetFactory",{"source":64,"name":65},"## type alias_WidgetProps\n> **WidgetProps**\\\u003C`T`\\>: `T` *extends* `object` ? `U` : `never`\n\n### Type Parameters\n\n• **T** *extends* `object`\n","WidgetProps",{"source":67,"name":68},"## interface_WidgetSlotContext\n### Type Parameters\n\n• **W** *extends* [`Widget`](#widget)\n\n### Properties\n\n#### state\n\n> **state**: [`WidgetState`](#widgetstate)\\\u003C`W`\\>\n\nthe state of the widget\n\n***\n\n#### widget\n\n> **widget**: [`ContextWidget`](#contextwidget)\\\u003C`W`\\>\n\nthe widget\n","WidgetSlotContext",{"source":70,"name":71},"## type alias_WidgetState\n> **WidgetState**\\\u003C`T`\\>: `T` *extends* `object` ? `U` : `never`\n\n### Type Parameters\n\n• **T** *extends* `object`\n","WidgetState",{"source":73,"name":74},"## interface_WritableWithDefaultOptions\n### Type Parameters\n\n• **T**\n\n### Properties\n\n#### equal()?\n\n> `optional` **equal**: (`a`, `b`) => `boolean`\n\nthe equal function, allowing to compare two values. used to check if a previous and current values are equals.\n\n##### Parameters\n\n• **a**: `T`\n\n• **b**: `T`\n\n##### Returns\n\n`boolean`\n\n***\n\n#### normalizeValue?\n\n> `optional` **normalizeValue**: [`NormalizeValue`](#normalizevalue)\\\u003C`T`\\>\n\nthe normalize value function. should return the invalidValue symbol when the provided value is invalid\n","WritableWithDefaultOptions","API types","@agnos-ui/react-bootstrap/types"],"uses":{"params":["framework","type","slug"]}}]}
