{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":121},true,[3,6,9,48,91,106],{"title":4,"path":5,"submenu":-1},"Types","api/typescript/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/typescript/headless/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44],{"path":13,"slug":14,"label":15},"api/typescript/headless/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/typescript/headless/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/typescript/headless/components/modal","components/modal","Modal",{"path":25,"slug":26,"label":27},"api/typescript/headless/components/pagination","components/pagination","Pagination",{"path":29,"slug":30,"label":31},"api/typescript/headless/components/progressbar","components/progressbar","Progressbar",{"path":33,"slug":34,"label":35},"api/typescript/headless/components/rating","components/rating","Rating",{"path":37,"slug":38,"label":39},"api/typescript/headless/components/select","components/select","Select",{"path":41,"slug":42,"label":43},"api/typescript/headless/components/slider","components/slider","Slider",{"path":45,"slug":46,"label":47},"api/typescript/headless/components/toast","components/toast","Toast",{"title":49,"path":-1,"submenu":50},"Services",[51,55,59,63,67,71,75,79,83,87],{"path":52,"slug":53,"label":54},"api/typescript/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":56,"slug":57,"label":58},"api/typescript/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":60,"slug":61,"label":62},"api/typescript/headless/services/focustrack","services/focustrack","focustrack",{"path":64,"slug":65,"label":66},"api/typescript/headless/services/hash","services/hash","hash",{"path":68,"slug":69,"label":70},"api/typescript/headless/services/intersection","services/intersection","intersection",{"path":72,"slug":73,"label":74},"api/typescript/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":76,"slug":77,"label":78},"api/typescript/headless/services/navManager","services/navManager","navManager",{"path":80,"slug":81,"label":82},"api/typescript/headless/services/portal","services/portal","portal",{"path":84,"slug":85,"label":86},"api/typescript/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":88,"slug":89,"label":90},"api/typescript/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":92,"path":-1,"submenu":93},"Transitions",[94,98,102],{"path":95,"slug":96,"label":97},"api/typescript/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":99,"slug":100,"label":101},"api/typescript/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":103,"slug":104,"label":105},"api/typescript/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":107,"path":-1,"submenu":108},"Utils",[109,113,117],{"path":110,"slug":111,"label":112},"api/typescript/headless/utils/directive","utils/directive","directive",{"path":114,"slug":115,"label":116},"api/typescript/headless/utils/stores","utils/stores","stores",{"path":118,"slug":119,"label":120},"api/typescript/headless/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":24,"import":25,"pageMeta":26},"components/toast",[3,6,9,12,15,18,21],{"source":4,"name":5},"## function_createToast\n> **createToast**(`config`?): [`ToastWidget`](#toastwidget)\n\nCreate a ToastWidget with given config props\n\n### Parameters\n\n• **config?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`ToastProps`](#toastprops)\\>\n\nan optional toast config\n\n### Returns\n\n[`ToastWidget`](#toastwidget)\n\na ToastWidget\n","createToast",{"source":7,"name":8},"## function_getToastDefaultConfig\n> **getToastDefaultConfig**(): [`ToastProps`](#toastprops)\n\nRetrieve a shallow copy of the default toast config\n\n### Returns\n\n[`ToastProps`](#toastprops)\n\nthe default toast config\n","getToastDefaultConfig",{"source":10,"name":11},"## interface_ToastApi\n### Methods\n\n#### close\n\n> **close**(): `void`\n\nTriggers alert closing programmatically (same as clicking on the close button (×)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","ToastApi",{"source":13,"name":14},"## interface_ToastDirectives\n### Properties\n\n#### autoHideDirective\n\n> **autoHideDirective**: [`Directive`](../types#directive)\n\nDirective that handles the autohide of the toast component\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../types#directive)\n\nDirective that adds all the necessary attributes to the body\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: [`Directive`](../types#directive)\n\nDirective that adds all the necessary attributes to the close button depending on the presence of the header\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","ToastDirectives",{"source":16,"name":17},"## interface_ToastProps\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n```ts\nasync () => {}\n```\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastProps",{"source":19,"name":20},"## interface_ToastState\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastState",{"source":22,"name":23},"## type alias_ToastWidget\n> **ToastWidget**: [`Widget`](../types#widget)\\\u003C[`ToastProps`](#toastprops), [`ToastState`](#toaststate), [`ToastApi`](#toastapi), `object`, [`ToastDirectives`](#toastdirectives)\\>\n","ToastWidget","API toast","@agnos-ui/core/components/toast",{"description":27},"API Documentation for components toast"],"uses":{"params":["framework","type","slug"]}}]}
