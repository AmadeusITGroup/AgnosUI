{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":75},true,[3,6,9,64],{"title":4,"path":5,"submenu":-1},"Types","api/typescript/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/typescript/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52,56,60],{"path":13,"slug":14,"label":15},"api/typescript/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/typescript/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/typescript/bootstrap/components/carousel","components/carousel","Carousel",{"path":25,"slug":26,"label":27},"api/typescript/bootstrap/components/collapse","components/collapse","Collapse",{"path":29,"slug":30,"label":31},"api/typescript/bootstrap/components/drawer","components/drawer","Drawer",{"path":33,"slug":34,"label":35},"api/typescript/bootstrap/components/modal","components/modal","Modal",{"path":37,"slug":38,"label":39},"api/typescript/bootstrap/components/pagination","components/pagination","Pagination",{"path":41,"slug":42,"label":43},"api/typescript/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":45,"slug":46,"label":47},"api/typescript/bootstrap/components/rating","components/rating","Rating",{"path":49,"slug":50,"label":51},"api/typescript/bootstrap/components/select","components/select","Select",{"path":53,"slug":54,"label":55},"api/typescript/bootstrap/components/slider","components/slider","Slider",{"path":57,"slug":58,"label":59},"api/typescript/bootstrap/components/toast","components/toast","Toast",{"path":61,"slug":62,"label":63},"api/typescript/bootstrap/components/tree","components/tree","Tree",{"title":65,"path":-1,"submenu":66},"Transitions",[67,71],{"path":68,"slug":69,"label":70},"api/typescript/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":72,"slug":73,"label":74},"api/typescript/bootstrap/services/transitions/fade","services/transitions/fade","fade","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":27,"import":28},"components/alert",[3,6,9,12,15,18,21,24],{"source":4,"name":5},"## interface_AlertApi\n\nRepresents the API for an alert component.\n\n### Methods\n\n#### close\n\n> **close**(): `void`\n\n\nTriggers alert closing programmatically (same as clicking on the close button (×)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","AlertApi",{"source":7,"name":8},"## interface_AlertContext\n\nRepresents the context for an Alert component.\n\n### Properties\n\n#### api\n\n> **api**: [`AlertApi`](#alertapi)\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`AlertDirectives`](#alertdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AlertState`](#alertstate)\n\n\nthe state of the widget\n","AlertContext",{"source":10,"name":11},"## interface_AlertDirectives\n\nRepresents the directives for an alert component.\n\n### Properties\n\n#### transitionDirective\n\n> **transitionDirective**: `Directive`\n\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","AlertDirectives",{"source":13,"name":14},"## interface_AlertProps\n\nRepresents the properties for the Alert component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`AlertContext`](#alertcontext)\\>\n\n\nTemplate for the alert content\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`AlertContext`](#alertcontext)\\>\n\n\nGlobal template for the alert component\n\n***\n\n#### transition\n\n> **transition**: `TransitionFn`\n\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### type\n\n> **type**: [`BSContextualClass`](../types#bscontextualclass)\n\n\nType of the alert, following bootstrap types.\n\n##### Default Value\n\n`'primary'`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","AlertProps",{"source":16,"name":17},"## interface_AlertState\n\nRepresents the state of an alert component.\n\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`AlertContext`](#alertcontext)\\>\n\n\nTemplate for the alert content\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`AlertContext`](#alertcontext)\\>\n\n\nGlobal template for the alert component\n\n***\n\n#### type\n\n> **type**: [`BSContextualClass`](../types#bscontextualclass)\n\n\nType of the alert, following bootstrap types.\n\n##### Default Value\n\n`'primary'`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","AlertState",{"source":19,"name":20},"## type alias_AlertWidget\n> **AlertWidget** = `Widget`\\\u003C[`AlertProps`](#alertprops), [`AlertState`](#alertstate), [`AlertApi`](#alertapi), [`AlertDirectives`](#alertdirectives)\\>\n\n\nRepresents an alert widget component.\n","AlertWidget",{"source":22,"name":23},"## constant_createAlert\n> `const` **createAlert**: `WidgetFactory`\\\u003C[`AlertWidget`](#alertwidget)\\>\n\n\nCreate an AlertWidget with given config props\n\n### Param\n\nan optional alert config\n\n### Returns\n\nan AlertWidget\n","createAlert",{"source":25,"name":26},"## function_getAlertDefaultConfig\n> **getAlertDefaultConfig**(): [`AlertProps`](#alertprops)\n\n\nRetrieve a shallow copy of the default Alert config\n\n### Returns\n\n[`AlertProps`](#alertprops)\n\nthe default Alert config\n","getAlertDefaultConfig","API alert","@agnos-ui/core-bootstrap/components/alert"],"uses":{"params":["framework","type","slug"]}}]}
