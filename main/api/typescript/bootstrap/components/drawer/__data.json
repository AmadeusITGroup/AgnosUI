{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":75},true,[3,6,9,64],{"title":4,"path":5,"submenu":-1},"Types","api/typescript/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/typescript/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52,56,60],{"path":13,"slug":14,"label":15},"api/typescript/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/typescript/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/typescript/bootstrap/components/carousel","components/carousel","Carousel",{"path":25,"slug":26,"label":27},"api/typescript/bootstrap/components/collapse","components/collapse","Collapse",{"path":29,"slug":30,"label":31},"api/typescript/bootstrap/components/drawer","components/drawer","Drawer",{"path":33,"slug":34,"label":35},"api/typescript/bootstrap/components/modal","components/modal","Modal",{"path":37,"slug":38,"label":39},"api/typescript/bootstrap/components/pagination","components/pagination","Pagination",{"path":41,"slug":42,"label":43},"api/typescript/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":45,"slug":46,"label":47},"api/typescript/bootstrap/components/rating","components/rating","Rating",{"path":49,"slug":50,"label":51},"api/typescript/bootstrap/components/select","components/select","Select",{"path":53,"slug":54,"label":55},"api/typescript/bootstrap/components/slider","components/slider","Slider",{"path":57,"slug":58,"label":59},"api/typescript/bootstrap/components/toast","components/toast","Toast",{"path":61,"slug":62,"label":63},"api/typescript/bootstrap/components/tree","components/tree","Tree",{"title":65,"path":-1,"submenu":66},"Transitions",[67,71],{"path":68,"slug":69,"label":70},"api/typescript/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":72,"slug":73,"label":74},"api/typescript/bootstrap/services/transitions/fade","services/transitions/fade","fade","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":30,"import":31},"components/drawer",[3,6,9,12,15,18,21,24,27],{"source":4,"name":5},"## constant_createDrawer\n> `const` **createDrawer**: `WidgetFactory`\\\u003C[`DrawerWidget`](#drawerwidget)\\>\n\n\nCreate a Drawer with given config props\n\n### Param\n\nan optional Drawer config\n\n### Returns\n\na DrawerWidget\n","createDrawer",{"source":7,"name":8},"## interface_DrawerApi\n\nInterface representing the API for a Drawer component.\n\n### Properties\n\n#### close\n\n> **close**: () => `void`\n\n\nTrigger the closing of the drawer.\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**: () => `void`\n\n\nTrigger the opening of the drawer.\n\n##### Returns\n\n`void`\n","DrawerApi",{"source":10,"name":11},"## type alias_DrawerContext\n> **DrawerContext** = `WidgetSlotContext`\\\u003C[`DrawerWidget`](#drawerwidget)\\>\n\n\nRepresents the context for a Drawer widget.\nThis interface is an alias for `WidgetSlotContext\u003CDrawerWidget>`.\n","DrawerContext",{"source":13,"name":14},"## interface_DrawerDirectives\n\nRepresents the directives for the Drawer component.\n\n### Properties\n\n#### backdropDirective\n\n> **backdropDirective**: `Directive`\n\n\nDirective to put on the backdrop DOM element.\n\n***\n\n#### backdropPortalDirective\n\n> **backdropPortalDirective**: `Directive`\n\n\nPortal directive to put on the backdrop DOM element.\n\n***\n\n#### containerDirective\n\n> **containerDirective**: `Directive`\n\n\nDirective to put on the container DOM element in order for the drawer to size correctly.\n\n***\n\n#### drawerDirective\n\n> **drawerDirective**: `Directive`\n\n\nDirective to put on the drawer DOM element.\n\n***\n\n#### drawerPortalDirective\n\n> **drawerPortalDirective**: `Directive`\n\n\nPortal directive to put on the drawer DOM element.\n\n***\n\n#### splitterDirective\n\n> **splitterDirective**: `Directive`\n\n\nDirective to put on the splitter DOM element.\n","DrawerDirectives",{"source":16,"name":17},"## type alias_DrawerPositions\n> **DrawerPositions** = `\"inline-start\"` \\| `\"inline-end\"` \\| `\"block-start\"` \\| `\"block-end\"`\n\n\nPossible values for the drawer positions\n","DrawerPositions",{"source":19,"name":20},"## interface_DrawerProps\n\nRepresents the properties for the Drawer component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true` opening and closing will be animated.\n\n***\n\n#### ariaDescribedBy\n\n> **ariaDescribedBy**: `string`\n\n\naria-describedby attribute to use for the drawer element.\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\n\naria-labelledby attribute to use for the drawer element.\n\n***\n\n#### backdrop\n\n> **backdrop**: `boolean`\n\n\nIf `true` displays the backdrop element and disables the body scrolling, otherwise the body of the document is navigable\n\n***\n\n#### backdropClass\n\n> **backdropClass**: `string`\n\n\nClasses to add on the backdrop DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### backdropTransition\n\n> **backdropTransition**: `TransitionFn`\n\n\nThe transition to use for the backdrop behind the drawer (if present).\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### bodyScroll\n\n> **bodyScroll**: `boolean`\n\n\nIf `true` allows body scrolling when the drawer is open.\n\n***\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`DrawerContext`](#drawercontext)\\>\n\n\nTemplate for the drawer body\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### container\n\n> **container**: `null` \\| [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\n\nWhich element should contain the drawer and backdrop DOM elements.\nIf it is not null, the drawer and backdrop DOM elements are moved to the specified container.\nOtherwise, they stay where the widget is located.\n\n##### Default Value\n\n```ts\ntypeof window !== 'undefined' ? document.body : null\n```\n\n***\n\n#### header\n\n> **header**: `SlotContent`\\\u003C[`DrawerContext`](#drawercontext)\\>\n\n\nTemplate for the drawer header\n\n***\n\n#### height\n\n> **height**: `number`\n\n\nThe height of the drawer in pixels.\n\n***\n\n#### onHeightChange\n\n> **onHeightChange**: (`width`) => `void`\n\n\nAn event emitted when the height is changed.\n\nEvent payload is equal to the newly selected height.\n\n##### Parameters\n\n###### width\n\n`number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nEvent to be triggered when the transition is completed and the drawer is not visible.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nEvent to be triggered when the transition is completed and the drawer is visible.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nEvent to be triggered when the visible property changes.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\nnew value of the visible propery\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onWidthChange\n\n> **onWidthChange**: (`width`) => `void`\n\n\nAn event emitted when the width is changed.\n\nEvent payload is equal to the newly selected width.\n\n##### Parameters\n\n###### width\n\n`number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### resizable\n\n> **resizable**: `boolean`\n\n\nIf `true`, the drawer can be resized by the user.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`DrawerContext`](#drawercontext)\\>\n\n\nGlobal template for the drawer component\n\n***\n\n#### transition\n\n> **transition**: `TransitionFn`\n\n\nThe transition function will be executed when the drawer is displayed or hidden.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### verticalTransition\n\n> **verticalTransition**: `TransitionFn`\n\n\nThe transition function for vertically positioned drawer (top, bottom) that will be executed when the drawer is displayed or hidden.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true`, the drawer is shown; otherwise, it is hidden.\n\n##### Default Value\n\n`false`\n\n***\n\n#### width\n\n> **width**: `number`\n\n\nThe width of the drawer in pixels.\n","DrawerProps",{"source":22,"name":23},"## interface_DrawerState\n\nRepresents the state of a Drawer component.\n\n### Properties\n\n#### backdropClass\n\n> **backdropClass**: `string`\n\n\nClasses to add on the backdrop DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### backdropHidden\n\n> **backdropHidden**: `boolean`\n\n\nWhether the backdrop is fully hidden. This can be true either because [backdrop](#drawerprops-backdrop) is false or\nbecause [visible](#visible) is false and there is no current transition.\n\n***\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`DrawerContext`](#drawercontext)\\>\n\n\nTemplate for the drawer body\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### container\n\n> **container**: `null` \\| [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\n\nWhich element should contain the drawer and backdrop DOM elements.\nIf it is not null, the drawer and backdrop DOM elements are moved to the specified container.\nOtherwise, they stay where the widget is located.\n\n##### Default Value\n\n```ts\ntypeof window !== 'undefined' ? document.body : null\n```\n\n***\n\n#### header\n\n> **header**: `SlotContent`\\\u003C[`DrawerContext`](#drawercontext)\\>\n\n\nTemplate for the drawer header\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\n\nFlag to show whether the drawer is fully hidden.\n\n***\n\n#### resizable\n\n> **resizable**: `boolean`\n\n\nIf `true`, the drawer can be resized by the user.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`DrawerContext`](#drawercontext)\\>\n\n\nGlobal template for the drawer component\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true`, the drawer is shown; otherwise, it is hidden.\n\n##### Default Value\n\n`false`\n","DrawerState",{"source":25,"name":26},"## type alias_DrawerWidget\n> **DrawerWidget** = `Widget`\\\u003C[`DrawerProps`](#drawerprops), [`DrawerState`](#drawerstate), [`DrawerApi`](#drawerapi), [`DrawerDirectives`](#drawerdirectives)\\>\n\n\nRepresents a Drawer widget component.\n","DrawerWidget",{"source":28,"name":29},"## function_getDrawerDefaultConfig\n> **getDrawerDefaultConfig**(): [`DrawerProps`](#drawerprops)\n\n\nRetrieve a shallow copy of the default Drawer config\n\n### Returns\n\n[`DrawerProps`](#drawerprops)\n\nthe default Drawer config\n","getDrawerDefaultConfig","API drawer","@agnos-ui/core-bootstrap/components/drawer"],"uses":{"params":["framework","type","slug"]}}]}
