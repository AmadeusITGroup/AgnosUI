{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":137},true,[3,6,9,52,95,118],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48],{"path":13,"slug":14,"label":15},"api/svelte/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/bootstrap/components/collapse","components/collapse","Collapse",{"path":25,"slug":26,"label":27},"api/svelte/bootstrap/components/modal","components/modal","Modal",{"path":29,"slug":30,"label":31},"api/svelte/bootstrap/components/pagination","components/pagination","Pagination",{"path":33,"slug":34,"label":35},"api/svelte/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":37,"slug":38,"label":39},"api/svelte/bootstrap/components/rating","components/rating","Rating",{"path":41,"slug":42,"label":43},"api/svelte/bootstrap/components/select","components/select","Select",{"path":45,"slug":46,"label":47},"api/svelte/bootstrap/components/slider","components/slider","Slider",{"path":49,"slug":50,"label":51},"api/svelte/bootstrap/components/toast","components/toast","Toast",{"title":53,"path":-1,"submenu":54},"Services",[55,59,63,67,71,75,79,83,87,91],{"path":56,"slug":57,"label":58},"api/svelte/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":60,"slug":61,"label":62},"api/svelte/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":64,"slug":65,"label":66},"api/svelte/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":68,"slug":69,"label":70},"api/svelte/bootstrap/services/hash","services/hash","hash",{"path":72,"slug":73,"label":74},"api/svelte/bootstrap/services/intersection","services/intersection","intersection",{"path":76,"slug":77,"label":78},"api/svelte/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":80,"slug":81,"label":82},"api/svelte/bootstrap/services/navManager","services/navManager","navManager",{"path":84,"slug":85,"label":86},"api/svelte/bootstrap/services/portal","services/portal","portal",{"path":88,"slug":89,"label":90},"api/svelte/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":92,"slug":93,"label":94},"api/svelte/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":96,"path":-1,"submenu":97},"Transitions",[98,102,106,110,114],{"path":99,"slug":100,"label":101},"api/svelte/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":103,"slug":104,"label":105},"api/svelte/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":107,"slug":108,"label":109},"api/svelte/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":111,"slug":112,"label":113},"api/svelte/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":115,"slug":116,"label":117},"api/svelte/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":119,"path":-1,"submenu":120},"Utils",[121,125,129,133],{"path":122,"slug":123,"label":124},"api/svelte/bootstrap/utils/directive","utils/directive","directive",{"path":126,"slug":127,"label":128},"api/svelte/bootstrap/utils/stores","utils/stores","stores",{"path":130,"slug":131,"label":132},"api/svelte/bootstrap/utils/widget","utils/widget","widget",{"path":134,"slug":135,"label":136},"api/svelte/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":69,"import":70},"types",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66],{"source":4,"name":5},"## type alias_AttributeValue\n> **AttributeValue**: `string` \\| `number` \\| `boolean` \\| `undefined`\n\nRepresents a value that can be assigned to an attribute.\n","AttributeValue",{"source":7,"name":8},"## type alias_ConfigValidator\n> **ConfigValidator**\\\u003C`T`\\>: \\{ \\[K in keyof T\\]: WritableWithDefaultOptions\\\u003CT\\[K\\]\\> \\| undefined \\}\n\nRepresents a type that validates a configuration object.\n\n### Type Parameters\n\n• **T** *extends* `object`\n\nThe type of the configuration object to be validated.\n\nThis type maps each key of the configuration object `T` to an optional\n`WritableWithDefaultOptions` type, allowing for partial validation.\n","ConfigValidator",{"source":10,"name":11},"## type alias_Directive\n> **Directive**\\\u003C`T`, `U`\\>: (`node`, `args`) => `void` \\| `object`\n\nRepresents a directive function that can be applied to an SSRHTMLElement.\n\n### Type Parameters\n\n• **T** = `void`\n\nThe type of the arguments passed to the directive.\n\n• **U** *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n• **node**: `U`\n\nThe SSRHTMLElement to which the directive is applied.\n\n• **args**: `T`\n\nThe arguments passed to the directive.\n\n### Returns\n\n`void` \\| `object`\n\nAn optional object that may contain:\n- `update`: A function to update the directive with new arguments.\n- `destroy`: A function to clean up when the directive is no longer needed.\n","Directive",{"source":13,"name":14},"## type alias_DirectiveAndParam\n> **DirectiveAndParam**\\\u003C`T`, `U`\\>: [[`Directive`](#directive)\\\u003C`T`, `U`\\>, `T`]\n\nRepresents a tuple containing a directive and its associated parameter.\n\n### Type Parameters\n\n• **T**\n\nThe type of the parameter associated with the directive.\n\n• **U** *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n","DirectiveAndParam",{"source":16,"name":17},"## type alias_DirectivesAndOptParam\n> **DirectivesAndOptParam**\\\u003C`T`, `U`\\>: \\{ \\[K in keyof T\\]: Directive\\\u003Cvoid, U\\> \\| DirectiveAndParam\\\u003CT\\[K\\], U\\> \\}\n\nRepresents a mapping of directives and their optional parameters.\n\n### Type Parameters\n\n• **T** *extends* `any`[]\n\nAn array type representing the parameters for the directives.\n\n• **U** *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\nThe type of the SSR HTML element, defaults to `SSRHTMLElement`.\n","DirectivesAndOptParam",{"source":19,"name":20},"## type alias_Extends\n> **Extends**\\\u003C`T`, `U`\\>: `T` *extends* `U` ? `1` : `0`\n\nA conditional type that checks if type `T` extends type `U`.\n\n### Type Parameters\n\n• **T**\n\nThe type to check.\n\n• **U**\n\nThe type to check against.\n","Extends",{"source":22,"name":23},"## constant_INVALID_VALUE\n> `const` **INVALID\\_VALUE**: unique `symbol`\n\nA unique symbol representing an invalid value.\nThis can be used as a sentinel value to indicate that a variable or property\ndoes not hold a valid value.\n","INVALID_VALUE",{"source":25,"name":26},"## type alias_IsSlotContent\n> **IsSlotContent**\\\u003C`T`\\>: [`Extends`](#extends)\\\u003C`T`, `SlotContent`\\\u003C`any`\\>\\> \\| [`Extends`](#extends)\\\u003C`SlotContent`\\\u003C`any`\\>, `T`\\> *extends* `1` ? `T` : `0`\n\nType utility to determine if a given type `T` is or extends `SlotContent\u003Cany>`.\n\nThis utility uses conditional types to check if `T` extends `SlotContent\u003Cany>` or if `SlotContent\u003Cany>` extends `T`.\nIf either condition is true, it returns `T`, otherwise it returns `0`.\n\n### Type Parameters\n\n• **T**\n\nThe type to be checked.\n","IsSlotContent",{"source":28,"name":29},"## type alias_NormalizeValue\n> **NormalizeValue**\\\u003C`T`\\>: (`value`) => `T` \\| *typeof* [`INVALID_VALUE`](#invalid_value)\n\nA type alias for a function that normalizes a value of type `T`.\nThe function takes a value of type `T` and returns either a normalized value of type `T`\nor a special constant `INVALID_VALUE` indicating that the value is invalid.\n\n### Type Parameters\n\n• **T**\n\nThe type of the value to be normalized.\n\n### Parameters\n\n• **value**: `T`\n\nThe value to be normalized.\n\n### Returns\n\n`T` \\| *typeof* [`INVALID_VALUE`](#invalid_value)\n\nThe normalized value of type `T` or `INVALID_VALUE` if the value is invalid.\n","NormalizeValue",{"source":31,"name":32},"## interface_PropsConfig\nInterface representing the configuration for properties.\n\n### Type Parameters\n\n• **U** *extends* `object`\n\nAn object type representing the properties.\n\n### Properties\n\n#### config?\n\n> `optional` **config**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`U`\\>\\> \\| [`ValuesOrReadableSignals`](#valuesorreadablesignals)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`U`\\>\\>\n\nEither a store of objects containing, for each property, the default value,\nor an object containing, for each property, either a store containing the default value or the default value itself.\n\n***\n\n#### props?\n\n> `optional` **props**: [`ValuesOrWritableSignals`](#valuesorwritablesignals)\\\u003C`U`\\>\n\nObject containing, for each property, either its initial value, or a store that will contain the value at any time.\nWhen the value of a property is undefined or invalid, the value from the config is used.\n","PropsConfig",{"source":34,"name":35},"## type alias_SlotContent\n> **SlotContent**\\\u003C`Props`\\>: `string` \\| `Snippet`\\\u003C[`Props`]\\>\n\nRepresents the content of a slot, which can either be a `string` or a `Snippet`.\n\n### Type Parameters\n\n• **Props** *extends* `object` = `object`\n\nThe type of the properties that the Snippet can accept.\n\n### See\n\n[https://svelte.dev/docs/svelte/snippet](https://svelte.dev/docs/svelte/snippet)\n","SlotContent",{"source":37,"name":38},"## interface_SSRHTMLElement\nRepresents a server-side rendered HTML element with limited functionality.\n\nThis interface extends a subset of the [HTMLElement](https://developer.mozilla.org/docs/Web/API/HTMLElement) interface, providing\nmethods to set and remove attributes, manipulate the element's classes, and\npartially manipulate the element's style.\n\nIt inherits the [setAttribute](https://developer.mozilla.org/docs/Web/API/Element/setAttribute) and [getAttribute](https://developer.mozilla.org/docs/Web/API/Element/getAttribute) methods from the [HTMLElement](https://developer.mozilla.org/docs/Web/API/HTMLElement) interface.\n\n### Properties\n\n#### classList\n\n> **classList**: [`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C[`DOMTokenList`](https://developer.mozilla.org/docs/Web/API/DOMTokenList), `\"remove\"` \\| `\"add\"` \\| `\"toggle\"`\\>\n\nObject allowing to manipulate the classes of the element.\n\n***\n\n#### style\n\n> **style**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C[`StyleKey`](#stylekey), [`StyleValue`](#stylevalue)\\>\\>\n\nObject allowing to manipulate the style of the element.\n","SSRHTMLElement",{"source":40,"name":41},"## type alias_StyleKey\n> **StyleKey**: [`Exclude`](https://www.typescriptlang.org/docs/handbook/utility-types.html#excludeuniontype-excludedmembers)\\\u003Ckeyof [`CSSStyleDeclaration`](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration), `\"length\"` \\| `\"item\"` \\| `\"parentRule\"` \\| `\"getPropertyValue\"` \\| `\"getPropertyPriority\"` \\| `\"setProperty\"` \\| `\"removeProperty\"` \\| *typeof* `Symbol.iterator` \\| `number` \\| `\"cssText\"`\\>\n\nRepresents a key of the CSSStyleDeclaration interface, excluding certain properties and methods.\n\nThis is useful for scenarios where you need to work with CSS properties directly without\ndealing with the methods and other non-style properties of CSSStyleDeclaration.\n","StyleKey",{"source":43,"name":44},"## type alias_StyleValue\n> **StyleValue**: `string` \\| `undefined` \\| `null`\n\nRepresents a value that can be used for styling purposes.\n\n### Remarks\n\nThis type can be a string representing a style value, or it can be undefined or null.\nIt is useful for scenarios where a style value might be optional or not set.\n","StyleValue",{"source":46,"name":47},"## type alias_ValuesOrReadableSignals\n> **ValuesOrReadableSignals**\\\u003C`T`\\>: \\{ \\[K in keyof T\\]?: ReadableSignal\\\u003CT\\[K\\] \\| undefined\\> \\| T\\[K\\] \\}\n\nA type that maps each property of an object type `T` to either a `ReadableSignal` of that property type or the property type itself.\n\n### Type Parameters\n\n• **T** *extends* `object`\n\nThe object type whose properties are being mapped.\n","ValuesOrReadableSignals",{"source":49,"name":50},"## type alias_ValuesOrWritableSignals\n> **ValuesOrWritableSignals**\\\u003C`T`\\>: \\{ \\[K in keyof T\\]?: WritableSignal\\\u003CT\\[K\\] \\| undefined\\> \\| T\\[K\\] \\}\n\nA type that maps the properties of an object type `T` to either a `WritableSignal` of the property type or the property type itself.\n\n### Type Parameters\n\n• **T** *extends* `object`\n\nThe object type whose properties are being mapped.\n","ValuesOrWritableSignals",{"source":52,"name":53},"## interface_Widget\nRepresents a generic widget with reactive state, stores, and various functionalities.\n\n### Template\n\nThe type of the action handlers for user interactions.\n\n### Type Parameters\n\n• **Props** *extends* `object` = `object`\n\nThe type of the properties that can be passed to the widget.\n\n• **State** *extends* `object` = `object`\n\nThe type of the state managed by the widget.\n\n• **Api** *extends* `object` = `object`\n\nThe type of the API functions available for interacting with the widget.\n\n• **Directives** *extends* `object` = `object`\n\nThe type of the directives used in the widget's template.\n\n### Properties\n\n#### api\n\n> **api**: `Api`\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: `Directives`\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state$\n\n> **state$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`State`\\>\n\nthe reactive state of the widget, combining all the values served by the stores\n\n***\n\n#### stores\n\n> **stores**: \\{ \\[K in string \\| number \\| symbol as \\`$\\{K & string\\}$\\`\\]: ReadableSignal\\\u003CState\\[K\\]\\> \\}\n\nthe different stores of the widget, all reactive\n\n### Methods\n\n#### patch\n\n> **patch**(`parameters`): `void`\n\nModify the parameter values, and recalculate the stores accordingly\n\n##### Parameters\n\n• **parameters**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Props`\\>\n\n##### Returns\n\n`void`\n","Widget",{"source":55,"name":56},"## type alias_WidgetFactory\n> **WidgetFactory**\\\u003C`W`\\>: (`props`?) => `W`\n\nA factory function type for creating instances of a widget.\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](#widget)\n\nThe type of the widget that extends the base Widget type.\n\n### Parameters\n\n• **props?**: [`PropsConfig`](#propsconfig)\\\u003C[`WidgetProps`](#widgetprops)\\\u003C`W`\\>\\>\n\nOptional configuration properties for the widget.\n\n### Returns\n\n`W`\n\nAn instance of the widget.\n","WidgetFactory",{"source":58,"name":59},"## type alias_WidgetProps\n> **WidgetProps**\\\u003C`T`\\>: `T` *extends* `object` ? `U` : `never`\n\nExtracts the type of the argument expected by the `patch` method of a given type `T`.\n\nThis utility type takes a generic type `T` which must have a `patch` method. The `patch` method\nshould accept an argument that is a partial of some object type `U`. If `T` meets this condition,\n`WidgetProps` will resolve to the type `U`. Otherwise, it will resolve to `never`.\n\n### Type Parameters\n\n• **T** *extends* `object`\n\nA type that includes a `patch` method accepting a partial object.\n","WidgetProps",{"source":61,"name":62},"## interface_WidgetSlotContext\nRepresents the context for a widget slot, providing access to the widget and its state.\n\n### Extended by\n\n- [`AccordionItemContext`](./components/accordion#accordionitemcontext)\n- [`AlertContext`](./components/alert#alertcontext)\n- [`ModalContext`](./components/modal#modalcontext)\n- [`PaginationContext`](./components/pagination#paginationcontext)\n- [`ProgressbarContext`](./components/progressbar#progressbarcontext)\n- [`SelectContext`](./components/select#selectcontext)\n- [`SliderContext`](./components/slider#slidercontext)\n- [`ToastContext`](./components/toast#toastcontext)\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](#widget)\n\nThe type of the widget.\n\n### Properties\n\n#### api\n\n> **api**: `W`\\[`\"api\"`\\]\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: `W`\\[`\"directives\"`\\]\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`WidgetState`](#widgetstate)\\\u003C`W`\\>\n\nthe state of the widget\n","WidgetSlotContext",{"source":64,"name":65},"## type alias_WidgetState\n> **WidgetState**\\\u003C`T`\\>: `T` *extends* `object` ? `U` : `never`\n\nExtracts the state type from a widget type that contains a `state$` property.\n\n### Type Parameters\n\n• **T** *extends* `object`\n\nA type that extends an object with a `state$` property of type `SubscribableStore\u003Cany>`.\n","WidgetState",{"source":67,"name":68},"## interface_WritableWithDefaultOptions\nInterface representing options for a writable store with default values.\n\n### Type Parameters\n\n• **T**\n\nThe type of the value stored.\n\n### Properties\n\n#### equal()?\n\n> `optional` **equal**: (`a`, `b`) => `boolean`\n\nthe equal function, allowing to compare two values. used to check if a previous and current values are equals.\n\n##### Parameters\n\n• **a**: `T`\n\n• **b**: `T`\n\n##### Returns\n\n`boolean`\n\n***\n\n#### normalizeValue?\n\n> `optional` **normalizeValue**: [`NormalizeValue`](#normalizevalue)\\\u003C`T`\\>\n\nthe normalize value function. should return the [INVALID_VALUE](#invalid_value) symbol when the provided value is invalid\n","WritableWithDefaultOptions","API types","@agnos-ui/svelte-bootstrap/types"],"uses":{"params":["framework","type","slug"]}}]}
