{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":141},true,[3,6,9,56,99,122],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52],{"path":13,"slug":14,"label":15},"api/svelte/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/bootstrap/components/collapse","components/collapse","Collapse",{"path":25,"slug":26,"label":27},"api/svelte/bootstrap/components/modal","components/modal","Modal",{"path":29,"slug":30,"label":31},"api/svelte/bootstrap/components/pagination","components/pagination","Pagination",{"path":33,"slug":34,"label":35},"api/svelte/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":37,"slug":38,"label":39},"api/svelte/bootstrap/components/rating","components/rating","Rating",{"path":41,"slug":42,"label":43},"api/svelte/bootstrap/components/select","components/select","Select",{"path":45,"slug":46,"label":47},"api/svelte/bootstrap/components/slider","components/slider","Slider",{"path":49,"slug":50,"label":51},"api/svelte/bootstrap/components/toast","components/toast","Toast",{"path":53,"slug":54,"label":55},"api/svelte/bootstrap/components/tree","components/tree","Tree",{"title":57,"path":-1,"submenu":58},"Services",[59,63,67,71,75,79,83,87,91,95],{"path":60,"slug":61,"label":62},"api/svelte/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":64,"slug":65,"label":66},"api/svelte/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":68,"slug":69,"label":70},"api/svelte/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":72,"slug":73,"label":74},"api/svelte/bootstrap/services/hash","services/hash","hash",{"path":76,"slug":77,"label":78},"api/svelte/bootstrap/services/intersection","services/intersection","intersection",{"path":80,"slug":81,"label":82},"api/svelte/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":84,"slug":85,"label":86},"api/svelte/bootstrap/services/navManager","services/navManager","navManager",{"path":88,"slug":89,"label":90},"api/svelte/bootstrap/services/portal","services/portal","portal",{"path":92,"slug":93,"label":94},"api/svelte/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":96,"slug":97,"label":98},"api/svelte/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":100,"path":-1,"submenu":101},"Transitions",[102,106,110,114,118],{"path":103,"slug":104,"label":105},"api/svelte/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":107,"slug":108,"label":109},"api/svelte/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":111,"slug":112,"label":113},"api/svelte/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":115,"slug":116,"label":117},"api/svelte/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":119,"slug":120,"label":121},"api/svelte/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":123,"path":-1,"submenu":124},"Utils",[125,129,133,137],{"path":126,"slug":127,"label":128},"api/svelte/bootstrap/utils/directive","utils/directive","directive",{"path":130,"slug":131,"label":132},"api/svelte/bootstrap/utils/stores","utils/stores","stores",{"path":134,"slug":135,"label":136},"api/svelte/bootstrap/utils/widget","utils/widget","widget",{"path":138,"slug":139,"label":140},"api/svelte/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":24,"import":25},"components/progressbar",[3,6,9,12,15,18,21],{"source":4,"name":5},"## function_createProgressbar\n> **createProgressbar**(`props`?): [`ProgressbarWidget`](#progressbarwidget)\n\nCreate a Progressbar with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`ProgressbarProps`](#progressbarprops)\\>\n\n### Returns\n\n[`ProgressbarWidget`](#progressbarwidget)\n\na ProgressbarWidget\n","createProgressbar",{"source":7,"name":8},"## function_getProgressbarDefaultConfig\n> **getProgressbarDefaultConfig**(): [`ProgressbarProps`](#progressbarprops)\n\nRetrieve a shallow copy of the default Progressbar config\n\n### Returns\n\n[`ProgressbarProps`](#progressbarprops)\n\nthe default Progressbar config\n","getProgressbarDefaultConfig",{"source":10,"name":11},"## interface_ProgressbarContext\nRepresents the context for a Progressbar widget.\nThis interface is used to define the context object that is passed to the Progressbar widget.\n\n### Properties\n\n#### api\n\n> **api**: `object`\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`ProgressbarDirectives`](#progressbardirectives)\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`ProgressbarState`](#progressbarstate)\n\nthe state of the widget\n","ProgressbarContext",{"source":13,"name":14},"## interface_ProgressbarDirectives\nInterface representing directives for a progress bar component.\n\n### Properties\n\n#### ariaDirective\n\n> **ariaDirective**: [`Directive`](../types#directive)\n\nA directive to be applied to the main container that handles aria attributes.\n","ProgressbarDirectives",{"source":16,"name":17},"## interface_ProgressbarProps\nInterface representing the properties for the Progressbar component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label.\n\n##### Default Value\n\n`'Progressbar'`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: (`value`, `minimum`, `maximum`) => `undefined` \\| `string`\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Parameters\n\n• **value**: `number`\n\ncurrent value\n\n• **minimum**: `number`\n\nminimum value\n\n• **maximum**: `number`\n\nmaximum value\n\n##### Returns\n\n`undefined` \\| `string`\n\n##### Default Value\n\n```ts\n() => undefined\n```\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\nLabel of the progress.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### height\n\n> **height**: `string`\n\nHeight of the progressbar, can be any valid css height value.\n\n##### Default Value\n\n`''`\n\n***\n\n#### max\n\n> **max**: `number`\n\nThe maximum value.\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> **min**: `number`\n\nThe minimum value.\n\n##### Default Value\n\n`0`\n\n***\n\n#### striped\n\n> **striped**: `boolean`\n\nIf `true`, shows a striped progressbar.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\nGlobal template for the Progressbar.\n\n***\n\n#### type\n\n> **type**: `undefined` \\| `BSContextualClass`\n\nType of the progressbar, following bootstrap types.\n\n***\n\n#### value\n\n> **value**: `number`\n\nThe current value.\n\n##### Default Value\n\n`0`\n","ProgressbarProps",{"source":19,"name":20},"## interface_ProgressbarState\nRepresents the state of a Progressbar component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label.\n\n##### Default Value\n\n`'Progressbar'`\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `undefined` \\| `string`\n\nThe aria value text.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\nLabel of the progress.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### finished\n\n> **finished**: `boolean`\n\n`true` if the value has reached its maximum value.\n\n***\n\n#### height\n\n> **height**: `string`\n\nHeight of the progressbar, can be any valid css height value.\n\n##### Default Value\n\n`''`\n\n***\n\n#### max\n\n> **max**: `number`\n\nThe maximum value.\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> **min**: `number`\n\nThe minimum value.\n\n##### Default Value\n\n`0`\n\n***\n\n#### percentage\n\n> **percentage**: `number`\n\nPercentage of completion.\n\n***\n\n#### started\n\n> **started**: `boolean`\n\n`true` if the value is above its minimum value.\n\n***\n\n#### striped\n\n> **striped**: `boolean`\n\nIf `true`, shows a striped progressbar.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\nGlobal template for the Progressbar.\n\n***\n\n#### type\n\n> **type**: `undefined` \\| `BSContextualClass`\n\nType of the progressbar, following bootstrap types.\n\n***\n\n#### value\n\n> **value**: `number`\n\nThe current value.\n\n##### Default Value\n\n`0`\n","ProgressbarState",{"source":22,"name":23},"## type alias_ProgressbarWidget\n> **ProgressbarWidget**: [`Widget`](../types#widget)\\\u003C[`ProgressbarProps`](#progressbarprops), [`ProgressbarState`](#progressbarstate), `object`, [`ProgressbarDirectives`](#progressbardirectives)\\>\n\nRepresents a Progressbar widget.\n\nThis type defines the structure of a Progressbar widget, including its properties, state, and directives.\n","ProgressbarWidget","API progressbar","@agnos-ui/svelte-bootstrap/components/progressbar"],"uses":{"params":["framework","type","slug"]}}]}
