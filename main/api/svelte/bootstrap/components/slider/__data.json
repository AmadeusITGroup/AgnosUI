{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":133},true,[3,6,9,48,91,114],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44],{"path":13,"slug":14,"label":15},"api/svelte/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/bootstrap/components/modal","components/modal","Modal",{"path":25,"slug":26,"label":27},"api/svelte/bootstrap/components/pagination","components/pagination","Pagination",{"path":29,"slug":30,"label":31},"api/svelte/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":33,"slug":34,"label":35},"api/svelte/bootstrap/components/rating","components/rating","Rating",{"path":37,"slug":38,"label":39},"api/svelte/bootstrap/components/select","components/select","Select",{"path":41,"slug":42,"label":43},"api/svelte/bootstrap/components/slider","components/slider","Slider",{"path":45,"slug":46,"label":47},"api/svelte/bootstrap/components/toast","components/toast","Toast",{"title":49,"path":-1,"submenu":50},"Services",[51,55,59,63,67,71,75,79,83,87],{"path":52,"slug":53,"label":54},"api/svelte/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":56,"slug":57,"label":58},"api/svelte/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":60,"slug":61,"label":62},"api/svelte/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":64,"slug":65,"label":66},"api/svelte/bootstrap/services/hash","services/hash","hash",{"path":68,"slug":69,"label":70},"api/svelte/bootstrap/services/intersection","services/intersection","intersection",{"path":72,"slug":73,"label":74},"api/svelte/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":76,"slug":77,"label":78},"api/svelte/bootstrap/services/navManager","services/navManager","navManager",{"path":80,"slug":81,"label":82},"api/svelte/bootstrap/services/portal","services/portal","portal",{"path":84,"slug":85,"label":86},"api/svelte/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":88,"slug":89,"label":90},"api/svelte/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":92,"path":-1,"submenu":93},"Transitions",[94,98,102,106,110],{"path":95,"slug":96,"label":97},"api/svelte/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":99,"slug":100,"label":101},"api/svelte/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":103,"slug":104,"label":105},"api/svelte/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":107,"slug":108,"label":109},"api/svelte/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":111,"slug":112,"label":113},"api/svelte/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":115,"path":-1,"submenu":116},"Utils",[117,121,125,129],{"path":118,"slug":119,"label":120},"api/svelte/bootstrap/utils/directive","utils/directive","directive",{"path":122,"slug":123,"label":124},"api/svelte/bootstrap/utils/stores","utils/stores","stores",{"path":126,"slug":127,"label":128},"api/svelte/bootstrap/utils/widget","utils/widget","widget",{"path":130,"slug":131,"label":132},"api/svelte/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":45,"import":46,"pageMeta":47},"components/slider",[3,6,9,12,15,18,21,24,27,30,33,36,39,42],{"source":4,"name":5},"## function_createSlider\n> **createSlider**(`props`?): [`SliderWidget`](#sliderwidget)\n\nCreate a Slider with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`SliderProps`](#sliderprops)\\>\n\n### Returns\n\n[`SliderWidget`](#sliderwidget)\n\na SliderWidget\n","createSlider",{"source":7,"name":8},"## function_getSliderDefaultConfig\n> **getSliderDefaultConfig**(): [`SliderProps`](#sliderprops)\n\nRetrieve a shallow copy of the default Slider config\n\n### Returns\n\n[`SliderProps`](#sliderprops)\n\nthe default Slider config\n","getSliderDefaultConfig",{"source":10,"name":11},"## interface_HandleDisplayOptions\n### Properties\n\n#### left\n\n> **left**: `null` \\| `number`\n\nLeft offset of the handle in %\n\n***\n\n#### top\n\n> **top**: `null` \\| `number`\n\nTop offset of the handle in %\n","HandleDisplayOptions",{"source":13,"name":14},"## interface_ProgressDisplayOptions\n### Properties\n\n#### bottom\n\n> **bottom**: `null` \\| `number`\n\nBottom offset of the progress in %\n\n***\n\n#### height\n\n> **height**: `number`\n\nHeight of hte progress in %\n\n***\n\n#### left\n\n> **left**: `null` \\| `number`\n\nRight offset of the progress in %\n\n***\n\n#### right\n\n> **right**: `null` \\| `number`\n\nLeft offset of the progress in %\n\n***\n\n#### top\n\n> **top**: `null` \\| `number`\n\nTop offset of the progress in %\n\n***\n\n#### width\n\n> **width**: `number`\n\nWidth of the progress in %\n","ProgressDisplayOptions",{"source":16,"name":17},"## interface_SliderActions\n### Methods\n\n#### click\n\n> **click**(`event`): `void`\n\nMethod to handle click on the slider\n\n##### Parameters\n\n• **event**: [`MouseEvent`](https://developer.mozilla.org/docs/Web/API/MouseEvent)\n\nmouse event\n\n##### Returns\n\n`void`\n\n***\n\n#### keydown\n\n> **keydown**(`event`, `handleNumber`): `void`\n\nMethod to process the keyboard event\n\n##### Parameters\n\n• **event**: [`KeyboardEvent`](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)\n\nkeyboard event object\n\n• **handleNumber**: `number`\n\nid of the modified handle\n\n##### Returns\n\n`void`\n\n***\n\n#### mouseDown\n\n> **mouseDown**(`event`, `handleId`): `void`\n\nMethod describing the behavior of the slider handle on mouse down event\n\n##### Parameters\n\n• **event**: [`MouseEvent`](https://developer.mozilla.org/docs/Web/API/MouseEvent)\n\nmouse event\n\n• **handleId**: `number`\n\nnumeric id of the handle\n\n##### Returns\n\n`void`\n\n***\n\n#### touchStart\n\n> **touchStart**(`event`, `handleId`): `void`\n\nMethod describing the behavior of the slider handle on touch start event\n\n##### Parameters\n\n• **event**: [`TouchEvent`](https://developer.mozilla.org/docs/Web/API/TouchEvent)\n\ntouch event\n\n• **handleId**: `number`\n\nnumber id of the handle\n\n##### Returns\n\n`void`\n","SliderActions",{"source":19,"name":20},"## type alias_SliderContext\n> **SliderContext**: [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n","SliderContext",{"source":22,"name":23},"## interface_SliderDirectives\n### Properties\n\n#### clickableAreaDirective\n\n> **clickableAreaDirective**: [`Directive`](../types#directive)\n\nDirective to apply to the slider clickable area, to directly move the handle to a given specific position\n\n***\n\n#### combinedHandleLabelDisplayDirective\n\n> **combinedHandleLabelDisplayDirective**: [`Directive`](../types#directive)\n\nDirective to apply to the handle when combined label display is active\n\n***\n\n#### handleDirective\n\n> **handleDirective**: [`Directive`](../types#directive)\\\u003C`object`\\>\n\nDirective to apply to the slider handle if any\n\n##### Type declaration\n\n###### item\n\n> **item**: [`SliderHandle`](#sliderhandle)\n\n***\n\n#### handleLabelDisplayDirective\n\n> **handleLabelDisplayDirective**: [`Directive`](../types#directive)\\\u003C`object`\\>\n\nDirective to apply to the handle when combined label display is not active\n\n##### Type declaration\n\n###### index\n\n> **index**: `number`\n\n***\n\n#### maxLabelDirective\n\n> **maxLabelDirective**: [`Directive`](../types#directive)\n\nDirective to get the maxLabel elementRef\n\n***\n\n#### minLabelDirective\n\n> **minLabelDirective**: [`Directive`](../types#directive)\n\nDirective to get the minLabel elementRef\n\n***\n\n#### progressDisplayDirective\n\n> **progressDisplayDirective**: [`Directive`](../types#directive)\\\u003C`object`\\>\n\nDirective used to style the progress display for each handle\n\n##### Type declaration\n\n###### option\n\n> **option**: [`ProgressDisplayOptions`](#progressdisplayoptions)\n\n***\n\n#### sliderDirective\n\n> **sliderDirective**: [`Directive`](../types#directive)\n\nDirective to get the slider component elementRef\n","SliderDirectives",{"source":25,"name":26},"## interface_SliderHandle\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nariaLabel of the handle\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `string`\n\nariaValueText of the handle\n\n***\n\n#### id\n\n> **id**: `number`\n\nHandle id\n\n***\n\n#### value\n\n> **value**: `number`\n\nValue of the handle\n","SliderHandle",{"source":28,"name":29},"## interface_SliderProps\n### Properties\n\n#### ariaLabelHandle\n\n> **ariaLabelHandle**: (`value`, `sortedIndex`, `index`) => `string`\n\nReturn the value for the 'aria-label' attribute for the handle\n\n##### Parameters\n\n• **value**: `number`\n\nvalue of the handle\n\n• **sortedIndex**: `number`\n\nindex of the handle in the sorted list\n\n• **index**: `number`\n\nindex of the handle in the original list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(value: number) => '' + value\n```\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: (`value`, `sortedIndex`, `index`) => `string`\n\nReturn the value for the 'aria-valuetext' attribute for the handle\n\n##### Parameters\n\n• **value**: `number`\n\nvalue of the handle\n\n• **sortedIndex**: `number`\n\nindex of the handle in the sorted list\n\n• **index**: `number`\n\nindex of the handle in the original list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(value: number) => '' + value\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### handle\n\n> **handle**: [`SlotContent`](../types#slotcontent)\\\u003C[`SliderSlotHandleContext`](#sliderslothandlecontext)\\>\n\nSlot to change the handlers\n\n***\n\n#### label\n\n> **label**: [`SlotContent`](../types#slotcontent)\\\u003C[`SliderSlotLabelContext`](#sliderslotlabelcontext)\\>\n\nSlot to change the default labels of the slider\n\n##### Default Value\n\n```ts\n({value}: SliderSlotLabelContext) => '' + value\n```\n\n***\n\n#### max\n\n> **max**: `number`\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> **min**: `number`\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### onValuesChange\n\n> **onValuesChange**: (`values`) => `void`\n\nAn event emitted when slider values are changed\n\nEvent payload equals to the updated slider values\n\n##### Parameters\n\n• **values**: `number`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> **rtl**: `boolean`\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> **showMinMaxLabels**: `boolean`\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showValueLabels\n\n> **showValueLabels**: `boolean`\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### stepSize\n\n> **stepSize**: `number`\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`SliderContext`](#slidercontext)\\>\n\nSlot to change the default display of the slider\n\n***\n\n#### values\n\n> **values**: `number`[]\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### vertical\n\n> **vertical**: `boolean`\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n","SliderProps",{"source":31,"name":32},"## type alias_SliderSlotHandleContext\n> **SliderSlotHandleContext**: [`SliderContext`](#slidercontext) & `object`\n\n### Type declaration\n\n#### item\n\n> **item**: [`SliderHandle`](#sliderhandle)\n","SliderSlotHandleContext",{"source":34,"name":35},"## type alias_SliderSlotLabelContext\n> **SliderSlotLabelContext**: [`SliderContext`](#slidercontext) & `object`\n\n### Type declaration\n\n#### value\n\n> **value**: `number`\n","SliderSlotLabelContext",{"source":37,"name":38},"## interface_SliderSlots\n### Properties\n\n#### handle\n\n> **handle**: [`SliderSlotHandleContext`](#sliderslothandlecontext)\n\n***\n\n#### label\n\n> **label**: [`SliderSlotLabelContext`](#sliderslotlabelcontext)\n\n***\n\n#### structure\n\n> **structure**: [`SliderContext`](#slidercontext)\n","SliderSlots",{"source":40,"name":41},"## interface_SliderState\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### combinedLabelDisplay\n\n> **combinedLabelDisplay**: `boolean`\n\nIf true, the label when the handles are close is visible\n\n***\n\n#### combinedLabelPositionLeft\n\n> **combinedLabelPositionLeft**: `number`\n\nCombined label left offset in %\n\n***\n\n#### combinedLabelPositionTop\n\n> **combinedLabelPositionTop**: `number`\n\nCombined label top offset in %\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### handle\n\n> **handle**: [`SlotContent`](../types#slotcontent)\\\u003C[`SliderSlotHandleContext`](#sliderslothandlecontext)\\>\n\nSlot to change the handlers\n\n***\n\n#### handleDisplayOptions\n\n> **handleDisplayOptions**: [`HandleDisplayOptions`](#handledisplayoptions)[]\n\nArray of objects representing handle display options\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\nCheck if the slider is interactive, meaning it is not disabled or readonly\n\n***\n\n#### label\n\n> **label**: [`SlotContent`](../types#slotcontent)\\\u003C[`SliderSlotLabelContext`](#sliderslotlabelcontext)\\>\n\nSlot to change the default labels of the slider\n\n##### Default Value\n\n```ts\n({value}: SliderSlotLabelContext) => '' + value\n```\n\n***\n\n#### max\n\n> **max**: `number`\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### maxValueLabelDisplay\n\n> **maxValueLabelDisplay**: `boolean`\n\nIf true, the maximum label will be visible\n\n***\n\n#### min\n\n> **min**: `number`\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### minValueLabelDisplay\n\n> **minValueLabelDisplay**: `boolean`\n\nIf true, the minimum label will be visible\n\n***\n\n#### progressDisplayOptions\n\n> **progressDisplayOptions**: [`ProgressDisplayOptions`](#progressdisplayoptions)[]\n\nArray of objects representing progress display options\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> **rtl**: `boolean`\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> **showMinMaxLabels**: `boolean`\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showValueLabels\n\n> **showValueLabels**: `boolean`\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### sortedHandles\n\n> **sortedHandles**: [`SliderHandle`](#sliderhandle)[]\n\nArray of the sorted handles to display\n\n***\n\n#### sortedValues\n\n> **sortedValues**: `number`[]\n\nSorted slider values\n\n***\n\n#### stepSize\n\n> **stepSize**: `number`\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`SliderContext`](#slidercontext)\\>\n\nSlot to change the default display of the slider\n\n***\n\n#### values\n\n> **values**: `number`[]\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### vertical\n\n> **vertical**: `boolean`\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n","SliderState",{"source":43,"name":44},"## type alias_SliderWidget\n> **SliderWidget**: [`Widget`](../types#widget)\\\u003C[`SliderProps`](#sliderprops), [`SliderState`](#sliderstate), `object`, [`SliderActions`](#slideractions), [`SliderDirectives`](#sliderdirectives)\\>\n","SliderWidget","API slider","@agnos-ui/svelte-bootstrap/components/slider",{"description":48},"API Documentation for components slider"],"uses":{"params":["framework","type","slug"]}}]}
