{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":153},true,[3,6,9,64,111,130],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/headless/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52,56,60],{"path":13,"slug":14,"label":15},"api/svelte/headless/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/headless/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/headless/components/carousel","components/carousel","Carousel",{"path":25,"slug":26,"label":27},"api/svelte/headless/components/collapse","components/collapse","Collapse",{"path":29,"slug":30,"label":31},"api/svelte/headless/components/drawer","components/drawer","Drawer",{"path":33,"slug":34,"label":35},"api/svelte/headless/components/modal","components/modal","Modal",{"path":37,"slug":38,"label":39},"api/svelte/headless/components/pagination","components/pagination","Pagination",{"path":41,"slug":42,"label":43},"api/svelte/headless/components/progressbar","components/progressbar","Progressbar",{"path":45,"slug":46,"label":47},"api/svelte/headless/components/rating","components/rating","Rating",{"path":49,"slug":50,"label":51},"api/svelte/headless/components/select","components/select","Select",{"path":53,"slug":54,"label":55},"api/svelte/headless/components/slider","components/slider","Slider",{"path":57,"slug":58,"label":59},"api/svelte/headless/components/toast","components/toast","Toast",{"path":61,"slug":62,"label":63},"api/svelte/headless/components/tree","components/tree","Tree",{"title":65,"path":-1,"submenu":66},"Services",[67,71,75,79,83,87,91,95,99,103,107],{"path":68,"slug":69,"label":70},"api/svelte/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":72,"slug":73,"label":74},"api/svelte/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":76,"slug":77,"label":78},"api/svelte/headless/services/focusElement","services/focusElement","focusElement",{"path":80,"slug":81,"label":82},"api/svelte/headless/services/focustrack","services/focustrack","focustrack",{"path":84,"slug":85,"label":86},"api/svelte/headless/services/hash","services/hash","hash",{"path":88,"slug":89,"label":90},"api/svelte/headless/services/intersection","services/intersection","intersection",{"path":92,"slug":93,"label":94},"api/svelte/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":96,"slug":97,"label":98},"api/svelte/headless/services/navManager","services/navManager","navManager",{"path":100,"slug":101,"label":102},"api/svelte/headless/services/portal","services/portal","portal",{"path":104,"slug":105,"label":106},"api/svelte/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":108,"slug":109,"label":110},"api/svelte/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":112,"path":-1,"submenu":113},"Transitions",[114,118,122,126],{"path":115,"slug":116,"label":117},"api/svelte/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":119,"slug":120,"label":121},"api/svelte/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":123,"slug":124,"label":125},"api/svelte/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":127,"slug":128,"label":129},"api/svelte/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":131,"path":-1,"submenu":132},"Utils",[133,137,141,145,149],{"path":134,"slug":135,"label":136},"api/svelte/headless/utils/directive","utils/directive","directive",{"path":138,"slug":139,"label":140},"api/svelte/headless/utils/func","utils/func","func",{"path":142,"slug":143,"label":144},"api/svelte/headless/utils/stores","utils/stores","stores",{"path":146,"slug":147,"label":148},"api/svelte/headless/utils/widget","utils/widget","widget",{"path":150,"slug":151,"label":152},"api/svelte/headless/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":33,"import":34},"config",[3,6,9,12,15,18,21,24,27,30],{"source":4,"name":5},"## constant_callWidgetFactory\n> **callWidgetFactory**: \\\u003C`W`\\>(`factory`, `options?`) => [`WidgetSlotContext`](./types#widgetslotcontext)\\\u003C`W`\\>\n\n\nCreates and initializes a widget using the provided factory and configuration options.\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](./types#widget)\\\u003C`object`, `object`, `object`, `object`\\>\n\n### Parameters\n\n#### factory\n\n[`WidgetFactory`](./types#widgetfactory)\\\u003C`W`\\>\n\nthe widget factory\n\n#### options?\n\nthe optional options\n\n##### defaultConfig?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\> \\| [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\>\\>\n\nthe default configuration for the widget\n\n##### events?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>, keyof [`WidgetProps`](./types#widgetprops)\\\u003C`W`\\> & `` `on${string}Change` ``\\>\\>\n\nthe events to be passed to the widget\n\n##### props?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\>\n\nthe props to be passed to the widget\n\n### Returns\n\n[`WidgetSlotContext`](./types#widgetslotcontext)\\\u003C`W`\\>\n\nthe state, api and directives to track and interact with the widget\n","callWidgetFactory",{"source":7,"name":8},"## function_createWidgetsConfig\n> **createWidgetsConfig**\\\u003C`T`\\>(`parent$?`, `adaptParentConfig?`): [`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`T`\\>\n\n\nCreates a new widgets default configuration store, optionally inheriting from a parent store, and containing\nits own set of widgets configuration properties that override the same properties form the parent configuration.\n\n### Type Parameters\n\n#### T\n\n`T`\n\n### Parameters\n\n#### parent$?\n\n[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`T`\\>\n\noptional parent widgets default configuration store.\n\n#### adaptParentConfig?\n\n(`config`) => [`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\n\noptional function that receives a 2-levels copy of the widgets default configuration\nfrom parent$ (or an empty object if parent$ is not specified) and returns the widgets default configuration to be used.\nIt is called only if the configuration is needed, and was not yet computed for the current value of the parent configuration.\nIt is called in a tansu reactive context, so it can use any tansu store and will be called again if those stores change.\n\n### Returns\n\n[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`T`\\>\n\nthe resulting widgets default configuration store, which contains 3 additional properties that are stores:\nparent$, adaptedParent$ (containing the value computed after the first step), and own$ (that contains only overridding properties).\nThe resulting store is writable, its set function is actually the set function of the own$ store.\n\n### Remarks\n\nThe resulting store has a value computed from the parent store in two steps:\n- first step: the parent configuration is transformed by the adaptParentConfig function (if specified).\nIf adaptParentConfig is not specified, this step is skipped.\n- second step: the configuration from step 1 is merged (2-levels deep) with the own$ store. The own$ store initially contains\nan empty object (i.e. no property from the parent is overridden). It can be changed by calling set on the store returned by this function.\n","createWidgetsConfig",{"source":10,"name":11},"## constant_createWidgetsDefaultConfig\n> **createWidgetsDefaultConfig**: `CreateWidgetsDefaultConfig`\\\u003C[`WidgetsConfig`](#widgetsconfig)\\>\n\n","createWidgetsDefaultConfig",{"source":13,"name":14},"## constant_getContextWidgetConfig\n> **getContextWidgetConfig**: \\\u003C`N`\\>(`widgetName`) => [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetsConfig`](#widgetsconfig)\\[`N`\\]\\>\\>\n\n\nRetrieves a widgets configuration store from the Svelte context hierarchy.\n\n### Type Parameters\n\n#### N\n\n`N` *extends* keyof [`WidgetsConfig`](#widgetsconfig)\n\n### Parameters\n\n#### widgetName\n\n`N`\n\nthe name of the widget\n\n### Returns\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetsConfig`](#widgetsconfig)\\[`N`\\]\\>\\>\n\nthe widgets configuration store\n","getContextWidgetConfig",{"source":16,"name":17},"## function_mergeInto\n> **mergeInto**\\\u003C`T`\\>(`destination`, `source`, `levels`): `T`\n\n\nMerges source object into destination object, up to the provided number of levels.\n\n### Type Parameters\n\n#### T\n\n`T`\n\n### Parameters\n\n#### destination\n\n`T`\n\ndestination object\n\n#### source\n\nsource object\n\n`undefined` | `T`\n\n#### levels\n\n`number` = `Infinity`\n\nnumber of levels to merge\n\n### Returns\n\n`T`\n\nthe destination object in most cases, or the source in some cases (if the source is not undefined and either levels is smaller than 1\nor the source is not an object)\n","mergeInto",{"source":19,"name":20},"## type alias_Partial2Levels\n> **Partial2Levels**\\\u003C`T`\\> = [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`{ [Level1 in keyof T]: Partial\u003CT[Level1]> }`\\>\n\n\nA utility type that makes all properties of an object type `T` optional,\nand also makes all properties of the nested objects within `T` optional.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe object type to be transformed.\n","Partial2Levels",{"source":22,"name":23},"## type alias_WidgetsConfig\n> **WidgetsConfig** = `object`\n\n\nConfiguration for various widgets used in the application.\n\n### Properties\n\n#### accordion\n\n> **accordion**: [`AccordionProps`](./components/accordion#accordionprops)\n\n\nthe accordion widget config\n\n***\n\n#### alert\n\n> **alert**: [`AlertProps`](./components/alert#alertprops)\n\n\nthe alert widget config\n\n***\n\n#### carousel\n\n> **carousel**: [`CarouselProps`](./components/carousel#carouselprops)\n\n\ncarousel widget config\n\n***\n\n#### collapse\n\n> **collapse**: [`CollapseProps`](./components/collapse#collapseprops)\n\n\ncollapse widget config\n\n***\n\n#### drawer\n\n> **drawer**: [`DrawerProps`](./components/drawer#drawerprops)\n\n\ndrawer widget config\n\n***\n\n#### modal\n\n> **modal**: [`ModalProps`](./components/modal#modalprops)\n\n\nthe modal widget config\n\n***\n\n#### pagination\n\n> **pagination**: [`PaginationProps`](./components/pagination#paginationprops)\n\n\nthe pagination widget config\n\n***\n\n#### progressbar\n\n> **progressbar**: [`ProgressbarProps`](./components/progressbar#progressbarprops)\n\n\nthe progress bar widget config\n\n***\n\n#### rating\n\n> **rating**: [`RatingProps`](./components/rating#ratingprops)\n\n\nthe rating widget config\n\n***\n\n#### select\n\n> **select**: [`SelectProps`](./components/select#selectprops)\\\u003C`any`\\>\n\n\nthe select widget config\n\n***\n\n#### slider\n\n> **slider**: [`SliderProps`](./components/slider#sliderprops)\n\n\nslider widget config\n\n***\n\n#### toast\n\n> **toast**: [`ToastProps`](./components/toast#toastprops)\n\n\ntoast widget config\n\n***\n\n#### tree\n\n> **tree**: [`TreeProps`](./components/tree#treeprops)\n\n\ntree widget config\n","WidgetsConfig",{"source":25,"name":26},"## function_widgetsConfigFactory\n> **widgetsConfigFactory**\\\u003C`Config`\\>(`widgetsDefaultConfigKey`): `object`\n\n\nA factory to create the utilities to allow widgets to be context-aware.\n\nIt can be used when extending the core and creating new widgets.\n\n### Type Parameters\n\n#### Config\n\n`Config` *extends* `object` = [`WidgetsConfig`](#widgetsconfig)\n\nThe shape of the widgets configuration object.\n\n### Parameters\n\n#### widgetsDefaultConfigKey\n\n`symbol` = `...`\n\nthe widgets config key\n\n### Returns\n\nthe utilities to create / manage widgets and contexts\n\n#### callWidgetFactory\n\n> **callWidgetFactory**: \\\u003C`W`\\>(`factory`, `options?`) => [`WidgetSlotContext`](./types#widgetslotcontext)\\\u003C`W`\\>\n\nCreates and initializes a widget using the provided factory and configuration options.\n\n##### Type Parameters\n\n###### W\n\n`W` *extends* [`Widget`](./types#widget)\\\u003C`object`, `object`, `object`, `object`\\>\n\n##### Parameters\n\n###### factory\n\n[`WidgetFactory`](./types#widgetfactory)\\\u003C`W`\\>\n\nthe widget factory\n\n###### options?\n\nthe optional options\n\n####### defaultConfig?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\> \\| [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\>\\>\n\nthe default configuration for the widget\n\n####### events?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>, keyof [`WidgetProps`](./types#widgetprops)\\\u003C`W`\\> & `` `on${string}Change` ``\\>\\>\n\nthe events to be passed to the widget\n\n####### props?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\>\n\nthe props to be passed to the widget\n\n##### Returns\n\n[`WidgetSlotContext`](./types#widgetslotcontext)\\\u003C`W`\\>\n\nthe state, api and directives to track and interact with the widget\n\n#### createWidgetsDefaultConfig\n\n> **createWidgetsDefaultConfig**: `CreateWidgetsDefaultConfig`\\\u003C`Config`\\>\n\nCreates in the Svelte context hierarchy a new widgets default configuration store that inherits from any widgets default configuration\nstore already defined at an upper level in the Svelte context hierarchy.\nIt contains its own set of widgets configuration properties that override the same properties form the parent configuration.\n\n##### Remarks\n\nThe configuration is computed from the parent configuration in two steps:\n- first step: the parent configuration is transformed by the adaptParentConfig function (if specified).\nIf adaptParentConfig is not specified, this step is skipped.\n- second step: the configuration from step 1 is merged (2-levels deep) with the own$ store. The own$ store initially contains\nan empty object (i.e. no property from the parent is overridden). It can be changed by calling set on the store returned by this function.\n\n##### Param\n\noptional function that receives a 2-levels copy of the widgets default configuration\ndefined at an upper level in the Svelte context hierarchy (or an empty object if there is none) and returns the widgets\ndefault configuration to be used.\nIt is called only if the configuration is needed, and was not yet computed for the current value of the parent configuration.\nIt is called in a tansu reactive context, so it can use any tansu store and will be called again if those stores change.\n\n##### Returns\n\nthe resulting widgets default configuration store, which contains 3 additional properties that are stores:\nparent$, adaptedParent$ (containing the value computed after the first step), and own$ (that contains only overridding properties).\nThe resulting store is writable, its set function is actually the set function of the own$ store.\n\n##### Example\n\n```ts\nconst widgetsConfig = createWidgetsDefaultConfig((parentConfig) => {\n  // first step configuration: transforms the parent configuration\n  parentConfig.rating = parentConfig.rating ?? {};\n  parentConfig.rating.className = `${parentConfig.rating.className ?? ''} my-rating-extra-class`\n  return parentConfig;\n});\nwidgetsConfig.set({\n  // second step configuration: overrides the parent configuration\n  rating: {\n    slotStar: MyCustomSlotStar\n  }\n});\n```\n\n#### getContextWidgetConfig\n\n> **getContextWidgetConfig**: \\\u003C`N`\\>(`widgetName`) => [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Config`\\[`N`\\]\\>\\>\n\nRetrieves a widgets configuration store from the Svelte context hierarchy.\n\n##### Type Parameters\n\n###### N\n\n`N` *extends* `string` \\| `number` \\| `symbol`\n\n##### Parameters\n\n###### widgetName\n\n`N`\n\nthe name of the widget\n\n##### Returns\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Config`\\[`N`\\]\\>\\>\n\nthe widgets configuration store\n\n#### widgetsDefaultConfigKey\n\n> **widgetsDefaultConfigKey**: `symbol`\n\nKey used in the Svelte context to get or set the widgets default configuration store.\n","widgetsConfigFactory",{"source":28,"name":29},"## type alias_WidgetsConfigStore\n> **WidgetsConfigStore**\\\u003C`T`\\> = [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\> & `object`\n\n\nRepresents a store for widget configurations with support for partial updates\nat two levels of depth. This store includes signals for its own state, an optional\nparent state, and an optional adapted parent state.\n\n### Type Declaration\n\n#### adaptedParent$\n\n> **adaptedParent$**: `undefined` \\| [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\>\n\n#### own$\n\n> **own$**: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\>\n\n#### parent$\n\n> **parent$**: `undefined` \\| [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\>\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the widget configuration.\n","WidgetsConfigStore",{"source":31,"name":32},"## constant_widgetsDefaultConfigKey\n> **widgetsDefaultConfigKey**: `symbol`\n\n","widgetsDefaultConfigKey","API config","@agnos-ui/svelte-headless/config"],"uses":{"params":["framework","type","slug"]}}]}
