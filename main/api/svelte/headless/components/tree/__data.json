{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":133},true,[3,6,9,52,95,114],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/headless/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48],{"path":13,"slug":14,"label":15},"api/svelte/headless/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/headless/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/headless/components/modal","components/modal","Modal",{"path":25,"slug":26,"label":27},"api/svelte/headless/components/pagination","components/pagination","Pagination",{"path":29,"slug":30,"label":31},"api/svelte/headless/components/progressbar","components/progressbar","Progressbar",{"path":33,"slug":34,"label":35},"api/svelte/headless/components/rating","components/rating","Rating",{"path":37,"slug":38,"label":39},"api/svelte/headless/components/select","components/select","Select",{"path":41,"slug":42,"label":43},"api/svelte/headless/components/slider","components/slider","Slider",{"path":45,"slug":46,"label":47},"api/svelte/headless/components/toast","components/toast","Toast",{"path":49,"slug":50,"label":51},"api/svelte/headless/components/tree","components/tree","Tree",{"title":53,"path":-1,"submenu":54},"Services",[55,59,63,67,71,75,79,83,87,91],{"path":56,"slug":57,"label":58},"api/svelte/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":60,"slug":61,"label":62},"api/svelte/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":64,"slug":65,"label":66},"api/svelte/headless/services/focustrack","services/focustrack","focustrack",{"path":68,"slug":69,"label":70},"api/svelte/headless/services/hash","services/hash","hash",{"path":72,"slug":73,"label":74},"api/svelte/headless/services/intersection","services/intersection","intersection",{"path":76,"slug":77,"label":78},"api/svelte/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":80,"slug":81,"label":82},"api/svelte/headless/services/navManager","services/navManager","navManager",{"path":84,"slug":85,"label":86},"api/svelte/headless/services/portal","services/portal","portal",{"path":88,"slug":89,"label":90},"api/svelte/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":92,"slug":93,"label":94},"api/svelte/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":96,"path":-1,"submenu":97},"Transitions",[98,102,106,110],{"path":99,"slug":100,"label":101},"api/svelte/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":103,"slug":104,"label":105},"api/svelte/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":107,"slug":108,"label":109},"api/svelte/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":111,"slug":112,"label":113},"api/svelte/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":115,"path":-1,"submenu":116},"Utils",[117,121,125,129],{"path":118,"slug":119,"label":120},"api/svelte/headless/utils/directive","utils/directive","directive",{"path":122,"slug":123,"label":124},"api/svelte/headless/utils/stores","utils/stores","stores",{"path":126,"slug":127,"label":128},"api/svelte/headless/utils/widget","utils/widget","widget",{"path":130,"slug":131,"label":132},"api/svelte/headless/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":30,"import":31},"components/tree",[3,6,9,12,15,18,21,24,27],{"source":4,"name":5},"## function_createTree\n> **createTree**(`config`?): [`TreeWidget`](#treewidget)\n\n\nCreate a tree widget with given config props\n\n### Parameters\n\n#### config?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`TreeProps`](#treeprops)\\>\n\nan optional tree config\n\n### Returns\n\n[`TreeWidget`](#treewidget)\n\na TreeWidget\n","createTree",{"source":7,"name":8},"## function_getTreeDefaultConfig\n> **getTreeDefaultConfig**(): [`TreeProps`](#treeprops)\n\n\nRetrieve a shallow copy of the default Tree config\n\n### Returns\n\n[`TreeProps`](#treeprops)\n\nthe default Tree config\n","getTreeDefaultConfig",{"source":10,"name":11},"## interface_NormalizedTreeItem\n\nNormalized TreeItem object\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nAccessibility label for the node\n\n***\n\n#### children\n\n> **children**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\n\nAn array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\n\nString title of the node\n\n***\n\n#### level\n\n> **level**: `number`\n\n\nLevel in the hierarchy, starts with 0 for a root node\n","NormalizedTreeItem",{"source":13,"name":14},"## interface_TreeApi\n\nInterface representing the API for a Tree component.\n","TreeApi",{"source":16,"name":17},"## interface_TreeDirectives\n\nInterface representing various directives used in the Tree component.\n\n### Properties\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../types#directive)\\\u003C\\{ `item`: [`NormalizedTreeItem`](#normalizedtreeitem); \\}\\>\n\n\nDirective to handle attributes for the tree item\n\n***\n\n#### itemToggleDirective\n\n> **itemToggleDirective**: [`Directive`](../types#directive)\\\u003C\\{ `item`: [`NormalizedTreeItem`](#normalizedtreeitem); \\}\\>\n\n\nDirective to handle toggle for the tree item\n\n***\n\n#### navigationDirective\n\n> **navigationDirective**: [`Directive`](../types#directive)\n\n\nDirective to attach navManager for the tree\n","TreeDirectives",{"source":19,"name":20},"## interface_TreeItem\n\nRepresents a tree item component.\n\n### Extended by\n\n- [`NormalizedTreeItem`](#normalizedtreeitem)\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the node\n\n***\n\n#### children?\n\n> `optional` **children**: [`TreeItem`](#treeitem)[]\n\n\nOptional array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\n\nString title of the node\n","TreeItem",{"source":22,"name":23},"## interface_TreeProps\n\nInterface representing the properties for the Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaLabelToggleFn\n\n> **ariaLabelToggleFn**: (`label`) => `string`\n\n\nReturn the value for the 'aria-label' attribute of the toggle\n\n##### Parameters\n\n###### label\n\n`string`\n\ntree item label\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(label: string) => `Toggle ${label}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### nodes\n\n> **nodes**: [`TreeItem`](#treeitem)[]\n\n\nArray of the tree nodes to display\n\n##### Default Value\n\n`[]`\n\n***\n\n#### onExpandToggle\n\n> **onExpandToggle**: (`node`) => `void`\n\n\nAn event emitted when the user toggles the expand of the TreeItem.\n\nEvent payload is equal to the TreeItem clicked.\n\n##### Parameters\n\n###### node\n\n[`NormalizedTreeItem`](#normalizedtreeitem)\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n### Methods\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n\nRetrieves expand items of the TreeItem\n\n##### Parameters\n\n###### node\n\n[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTML element that is representing the expand item\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('button')\n```\n","TreeProps",{"source":25,"name":26},"## interface_TreeState\n\nRepresents the state of a Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### expandedMap\n\n> **expandedMap**: `object`\n\n\nGetter of expanded state for each tree node\n\n##### get\n\n###### Parameters\n\n####### item\n\n[`NormalizedTreeItem`](#normalizedtreeitem)\n\n###### Returns\n\n`undefined` \\| `boolean`\n\n***\n\n#### normalizedNodes\n\n> **normalizedNodes**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\n\nArray of normalized tree nodes\n","TreeState",{"source":28,"name":29},"## type alias_TreeWidget\n> **TreeWidget**: [`Widget`](../types#widget)\\\u003C[`TreeProps`](#treeprops), [`TreeState`](#treestate), [`TreeApi`](#treeapi), [`TreeDirectives`](#treedirectives)\\>\n\n\nRepresents a Tree widget component.\n","TreeWidget","API tree","@agnos-ui/svelte-headless/components/tree"],"uses":{"params":["framework","type","slug"]}}]}
