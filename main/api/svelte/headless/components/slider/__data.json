{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":153},true,[3,6,9,64,111,130],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/headless/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52,56,60],{"path":13,"slug":14,"label":15},"api/svelte/headless/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/headless/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/headless/components/carousel","components/carousel","Carousel",{"path":25,"slug":26,"label":27},"api/svelte/headless/components/collapse","components/collapse","Collapse",{"path":29,"slug":30,"label":31},"api/svelte/headless/components/drawer","components/drawer","Drawer",{"path":33,"slug":34,"label":35},"api/svelte/headless/components/modal","components/modal","Modal",{"path":37,"slug":38,"label":39},"api/svelte/headless/components/pagination","components/pagination","Pagination",{"path":41,"slug":42,"label":43},"api/svelte/headless/components/progressbar","components/progressbar","Progressbar",{"path":45,"slug":46,"label":47},"api/svelte/headless/components/rating","components/rating","Rating",{"path":49,"slug":50,"label":51},"api/svelte/headless/components/select","components/select","Select",{"path":53,"slug":54,"label":55},"api/svelte/headless/components/slider","components/slider","Slider",{"path":57,"slug":58,"label":59},"api/svelte/headless/components/toast","components/toast","Toast",{"path":61,"slug":62,"label":63},"api/svelte/headless/components/tree","components/tree","Tree",{"title":65,"path":-1,"submenu":66},"Services",[67,71,75,79,83,87,91,95,99,103,107],{"path":68,"slug":69,"label":70},"api/svelte/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":72,"slug":73,"label":74},"api/svelte/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":76,"slug":77,"label":78},"api/svelte/headless/services/focusElement","services/focusElement","focusElement",{"path":80,"slug":81,"label":82},"api/svelte/headless/services/focustrack","services/focustrack","focustrack",{"path":84,"slug":85,"label":86},"api/svelte/headless/services/hash","services/hash","hash",{"path":88,"slug":89,"label":90},"api/svelte/headless/services/intersection","services/intersection","intersection",{"path":92,"slug":93,"label":94},"api/svelte/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":96,"slug":97,"label":98},"api/svelte/headless/services/navManager","services/navManager","navManager",{"path":100,"slug":101,"label":102},"api/svelte/headless/services/portal","services/portal","portal",{"path":104,"slug":105,"label":106},"api/svelte/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":108,"slug":109,"label":110},"api/svelte/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":112,"path":-1,"submenu":113},"Transitions",[114,118,122,126],{"path":115,"slug":116,"label":117},"api/svelte/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":119,"slug":120,"label":121},"api/svelte/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":123,"slug":124,"label":125},"api/svelte/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":127,"slug":128,"label":129},"api/svelte/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":131,"path":-1,"submenu":132},"Utils",[133,137,141,145,149],{"path":134,"slug":135,"label":136},"api/svelte/headless/utils/directive","utils/directive","directive",{"path":138,"slug":139,"label":140},"api/svelte/headless/utils/func","utils/func","func",{"path":142,"slug":143,"label":144},"api/svelte/headless/utils/stores","utils/stores","stores",{"path":146,"slug":147,"label":148},"api/svelte/headless/utils/widget","utils/widget","widget",{"path":150,"slug":151,"label":152},"api/svelte/headless/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":33,"import":34},"components/slider",[3,6,9,12,15,18,21,24,27,30],{"source":4,"name":5},"## constant_createSlider\n> `const` **createSlider**: [`WidgetFactory`](../types#widgetfactory)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n\n\nCreate a slider widget with given config props\n\n### Param\n\nan optional slider config\n\n### Returns\n\na SliderWidget\n","createSlider",{"source":7,"name":8},"## function_getSliderDefaultConfig\n> **getSliderDefaultConfig**(): [`SliderProps`](#sliderprops)\n\n\nReturns a shallow copy of the default slider config.\n\n### Returns\n\n[`SliderProps`](#sliderprops)\n\na copy of the default config\n","getSliderDefaultConfig",{"source":10,"name":11},"## interface_HandleDisplayOptions\n\nOptions for displaying a handle in a slider component.\n\n### Properties\n\n#### left\n\n> **left**: `null` \\| `number`\n\n\nLeft offset of the handle in %\n\n***\n\n#### top\n\n> **top**: `null` \\| `number`\n\n\nTop offset of the handle in %\n","HandleDisplayOptions",{"source":13,"name":14},"## interface_ProgressDisplayOptions\n\nOptions for displaying progress in a slider component.\n\n### Properties\n\n#### bottom\n\n> **bottom**: `null` \\| `number`\n\n\nBottom offset of the progress in %\n\n***\n\n#### height\n\n> **height**: `number`\n\n\nHeight of the progress in %\n\n***\n\n#### id\n\n> **id**: `number`\n\n\nId of the progress\n\n***\n\n#### left\n\n> **left**: `null` \\| `number`\n\n\nRight offset of the progress in %\n\n***\n\n#### right\n\n> **right**: `null` \\| `number`\n\n\nLeft offset of the progress in %\n\n***\n\n#### top\n\n> **top**: `null` \\| `number`\n\n\nTop offset of the progress in %\n\n***\n\n#### width\n\n> **width**: `number`\n\n\nWidth of the progress in %\n","ProgressDisplayOptions",{"source":16,"name":17},"## interface_SliderDirectives\n\nInterface representing various directives used in the slider component.\n\n### Properties\n\n#### clickableAreaDirective\n\n> **clickableAreaDirective**: [`Directive`](../types#directive)\n\n\nDirective to apply to the slider clickable area, to directly move the handle to a given specific position\n\n***\n\n#### combinedHandleLabelDisplayDirective\n\n> **combinedHandleLabelDisplayDirective**: [`Directive`](../types#directive)\n\n\nDirective to apply to the handle when combined label display is active\n\n***\n\n#### containerDirective\n\n> **containerDirective**: [`Directive`](../types#directive)\n\n\nDirective to apply to the slider container wrapping the slider content\n\n***\n\n#### handleDirective\n\n> **handleDirective**: [`Directive`](../types#directive)\\\u003C\\{ `item`: [`SliderHandle`](#sliderhandle); \\}\\>\n\n\nDirective to apply to the slider handle if any\n\n***\n\n#### handleEventsDirective\n\n> **handleEventsDirective**: [`Directive`](../types#directive)\\\u003C\\{ `item`: \\{ `id`: `number`; \\}; \\}\\>\n\n\nDirective to apply handle events handlers\n\n***\n\n#### handleLabelDisplayDirective\n\n> **handleLabelDisplayDirective**: [`Directive`](../types#directive)\\\u003C\\{ `index`: `number`; \\}\\>\n\n\nDirective to apply to the handle when combined label display is not active\n\n***\n\n#### maxLabelDirective\n\n> **maxLabelDirective**: [`Directive`](../types#directive)\n\n\nDirective to get the maxLabel elementRef\n\n***\n\n#### minLabelDirective\n\n> **minLabelDirective**: [`Directive`](../types#directive)\n\n\nDirective to get the minLabel elementRef\n\n***\n\n#### progressDisplayDirective\n\n> **progressDisplayDirective**: [`Directive`](../types#directive)\\\u003C\\{ `option`: [`ProgressDisplayOptions`](#progressdisplayoptions); \\}\\>\n\n\nDirective used to style the progress display for each handle\n\n***\n\n#### sliderDirective\n\n> **sliderDirective**: [`Directive`](../types#directive)\n\n\nDirective to get the slider component elementRef\n\n***\n\n#### tickDirective\n\n> **tickDirective**: [`Directive`](../types#directive)\\\u003C\\{ `tick`: [`SliderTick`](#slidertick); \\}\\>\n\n\nDirective to apply to the slider tick\n\n***\n\n#### tickLabelDirective\n\n> **tickLabelDirective**: [`Directive`](../types#directive)\\\u003C\\{ `tick`: [`SliderTick`](#slidertick); \\}\\>\n\n\nDirective to apply to the slider tick label\n","SliderDirectives",{"source":19,"name":20},"## interface_SliderHandle\n\nRepresents a handle in a slider component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\n\nariaLabel of the handle\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `undefined` \\| `string`\n\n\naria-labelledBy of the handle\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `undefined` \\| `string`\n\n\nariaValueText of the handle\n\n***\n\n#### id\n\n> **id**: `number`\n\n\nHandle id\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nValue of the handle\n","SliderHandle",{"source":22,"name":23},"## interface_SliderProps\n\nInterface representing the properties for the Slider component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: (`sortedIndex`) => `string`\n\n\nReturn the value for the 'aria-label' attribute for the handle\n\n##### Parameters\n\n###### sortedIndex\n\n`number`\n\nindex of the handle in the sorted list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n() => 'Value'\n```\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: (`sortedIndex`) => `string`\n\n\nReturn the value for the 'aria-labelledBy' attribute for the handle\n\n##### Parameters\n\n###### sortedIndex\n\n`number`\n\nindex of the handle in the sorted list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n() => ''\n```\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: (`value`, `sortedIndex`) => `string`\n\n\nReturn the value for the 'aria-valuetext' attribute for the handle\n\n##### Parameters\n\n###### value\n\n`number`\n\nvalue of the handle\n\n###### sortedIndex\n\n`number`\n\nindex of the handle in the sorted list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(value: number) => ''\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### max\n\n> **max**: `number`\n\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### maxRange\n\n> **maxRange**: `number`\n\n\nMaximum distance between two values\nWhen set to 0, no maximum distance constraint is applied.\n\n##### Default Value\n\n```ts\n0\n```\n\n***\n\n#### min\n\n> **min**: `number`\n\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### minRange\n\n> **minRange**: `number`\n\n\nMinimum distance between two values.\nWhen set to 0, no minimum distance constraint is applied.\n\n##### Default Value\n\n```ts\n0\n```\n\n***\n\n#### onValuesChange\n\n> **onValuesChange**: (`values`) => `void`\n\n\nAn event emitted when slider values are changed\n\nEvent payload equals to the updated slider values\n\n##### Parameters\n\n###### values\n\n`number`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### pushRange\n\n> **pushRange**: `boolean`\n\n\nWhen true, if moving a value would break the minRange or maxRange constraint,\nit will instead push or pull the neighboring values to keep the allowed range rather than just stopping.\n\n##### Default Value\n\n```ts\nfalse\n```\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> **rtl**: `boolean`\n\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> **showMinMaxLabels**: `boolean`\n\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showTicks\n\n> **showTicks**: `boolean`\n\n\nIf `true` the ticks are displayed on the slider\n\n##### Default Value\n\n`false`\n\n***\n\n#### showTickValues\n\n> **showTickValues**: `boolean`\n\n\nIf `true` the tick values are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showValueLabels\n\n> **showValueLabels**: `boolean`\n\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### stepSize\n\n> **stepSize**: `number`\n\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### tickInterval\n\n> **tickInterval**: `number`\n\n\nUnit value between the ticks\nIf value is set to `0` the [stepSize](#sliderstate-stepsize) is used to space the ticks\n\n##### Default Value\n\n`0`\n\n***\n\n#### values\n\n> **values**: `number`[]\n\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### vertical\n\n> **vertical**: `boolean`\n\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n","SliderProps",{"source":25,"name":26},"## interface_SliderState\n\nRepresents the state of a slider component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### combinedLabelDisplay\n\n> **combinedLabelDisplay**: `boolean`\n\n\nIf true, the label when the handles are close is visible\n\n***\n\n#### combinedLabelPositionLeft\n\n> **combinedLabelPositionLeft**: `number`\n\n\nCombined label left offset in %\n\n***\n\n#### combinedLabelPositionTop\n\n> **combinedLabelPositionTop**: `number`\n\n\nCombined label top offset in %\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### handleDisplayOptions\n\n> **handleDisplayOptions**: [`HandleDisplayOptions`](#handledisplayoptions)[]\n\n\nArray of objects representing handle display options\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\n\nCheck if the slider is interactive, meaning it is not disabled or readonly\n\n***\n\n#### max\n\n> **max**: `number`\n\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### maxValueLabelDisplay\n\n> **maxValueLabelDisplay**: `boolean`\n\n\nIf true, the maximum label will be visible\n\n***\n\n#### min\n\n> **min**: `number`\n\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### minValueLabelDisplay\n\n> **minValueLabelDisplay**: `boolean`\n\n\nIf true, the minimum label will be visible\n\n***\n\n#### progressDisplayOptions\n\n> **progressDisplayOptions**: [`ProgressDisplayOptions`](#progressdisplayoptions)[]\n\n\nArray of objects representing progress display options\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> **rtl**: `boolean`\n\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> **showMinMaxLabels**: `boolean`\n\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showTicks\n\n> **showTicks**: `boolean`\n\n\nIf `true` the ticks are displayed on the slider\n\n##### Default Value\n\n`false`\n\n***\n\n#### showValueLabels\n\n> **showValueLabels**: `boolean`\n\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### sortedHandles\n\n> **sortedHandles**: [`SliderHandle`](#sliderhandle)[]\n\n\nArray of the sorted handles to display\n\n***\n\n#### sortedValues\n\n> **sortedValues**: `number`[]\n\n\nSorted slider values\n\n***\n\n#### stepSize\n\n> **stepSize**: `number`\n\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### ticks\n\n> **ticks**: [`SliderTick`](#slidertick)[]\n\n\nArray of ticks to display on the slider component\n\n***\n\n#### values\n\n> **values**: `number`[]\n\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### vertical\n\n> **vertical**: `boolean`\n\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n","SliderState",{"source":28,"name":29},"## interface_SliderTick\n\nRepresents a tick in a slider component.\n\n### Properties\n\n#### className?\n\n> `optional` **className**: `null` \\| `string`\n\n\nCSS classes to be applied on the tick\n\n***\n\n#### displayLabel\n\n> **displayLabel**: `boolean`\n\n\nIf `true` the tick label is displayed\n\n***\n\n#### legend?\n\n> `optional` **legend**: `null` \\| `string`\n\n\nVisualized optional explanation of the label\n\n***\n\n#### position\n\n> **position**: `number`\n\n\nPosition of the tick in percent\n\n***\n\n#### selected\n\n> **selected**: `boolean`\n\n\nIf `true` the tick has selected style\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nValue of the tick\n","SliderTick",{"source":31,"name":32},"## type alias_SliderWidget\n> **SliderWidget** = [`Widget`](../types#widget)\\\u003C[`SliderProps`](#sliderprops), [`SliderState`](#sliderstate), `object`, [`SliderDirectives`](#sliderdirectives)\\>\n\n\nRepresents a slider widget component.\n","SliderWidget","API slider","@agnos-ui/svelte-headless/components/slider"],"uses":{"params":["framework","type","slug"]}}]}
