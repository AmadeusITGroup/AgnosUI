{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":141},true,[3,6,9,56,99,118],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/headless/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52],{"path":13,"slug":14,"label":15},"api/svelte/headless/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/headless/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/headless/components/carousel","components/carousel","Carousel",{"path":25,"slug":26,"label":27},"api/svelte/headless/components/modal","components/modal","Modal",{"path":29,"slug":30,"label":31},"api/svelte/headless/components/pagination","components/pagination","Pagination",{"path":33,"slug":34,"label":35},"api/svelte/headless/components/progressbar","components/progressbar","Progressbar",{"path":37,"slug":38,"label":39},"api/svelte/headless/components/rating","components/rating","Rating",{"path":41,"slug":42,"label":43},"api/svelte/headless/components/select","components/select","Select",{"path":45,"slug":46,"label":47},"api/svelte/headless/components/slider","components/slider","Slider",{"path":49,"slug":50,"label":51},"api/svelte/headless/components/toast","components/toast","Toast",{"path":53,"slug":54,"label":55},"api/svelte/headless/components/tree","components/tree","Tree",{"title":57,"path":-1,"submenu":58},"Services",[59,63,67,71,75,79,83,87,91,95],{"path":60,"slug":61,"label":62},"api/svelte/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":64,"slug":65,"label":66},"api/svelte/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":68,"slug":69,"label":70},"api/svelte/headless/services/focustrack","services/focustrack","focustrack",{"path":72,"slug":73,"label":74},"api/svelte/headless/services/hash","services/hash","hash",{"path":76,"slug":77,"label":78},"api/svelte/headless/services/intersection","services/intersection","intersection",{"path":80,"slug":81,"label":82},"api/svelte/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":84,"slug":85,"label":86},"api/svelte/headless/services/navManager","services/navManager","navManager",{"path":88,"slug":89,"label":90},"api/svelte/headless/services/portal","services/portal","portal",{"path":92,"slug":93,"label":94},"api/svelte/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":96,"slug":97,"label":98},"api/svelte/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":100,"path":-1,"submenu":101},"Transitions",[102,106,110,114],{"path":103,"slug":104,"label":105},"api/svelte/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":107,"slug":108,"label":109},"api/svelte/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":111,"slug":112,"label":113},"api/svelte/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":115,"slug":116,"label":117},"api/svelte/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":119,"path":-1,"submenu":120},"Utils",[121,125,129,133,137],{"path":122,"slug":123,"label":124},"api/svelte/headless/utils/directive","utils/directive","directive",{"path":126,"slug":127,"label":128},"api/svelte/headless/utils/func","utils/func","func",{"path":130,"slug":131,"label":132},"api/svelte/headless/utils/stores","utils/stores","stores",{"path":134,"slug":135,"label":136},"api/svelte/headless/utils/widget","utils/widget","widget",{"path":138,"slug":139,"label":140},"api/svelte/headless/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":18,"import":19},"services/extendWidget",[3,6,9,12,15],{"source":4,"name":5},"## type alias_ExtendWidgetAdaptSlotContentProps\n> **ExtendWidgetAdaptSlotContentProps**\\\u003C`Props`, `ExtraProps`, `ExtraDirectives`\\>: `Props` *extends* [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003Cinfer U\\> ? [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C[`ExtendWidgetProps`](#extendwidgetprops)\\\u003C`U`, `ExtraProps`, `ExtraDirectives`\\>\\> & [`Omit`](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)\\\u003C`Props`, keyof [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C`any`\\>\\> : `Props`\n\n\nType to adapt the slot content properties of a widget by extending its props, extra props, and extra directives.\n\n### Type Parameters\n\n• **Props** *extends* [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `any`\\>\n\nThe original properties of the widget slot context.\n\n• **ExtraProps** *extends* `object`\n\nAdditional properties to extend the widget slot context.\n\n• **ExtraDirectives** *extends* `object`\n\nAdditional directives to extend the widget slot context.\n\n### Remarks\n\nThis type conditionally checks if `Props` extends `WidgetSlotContext` and, if so, extends the widget slot context\nwith additional properties and directives while omitting the original widget slot context properties.\n","ExtendWidgetAdaptSlotContentProps",{"source":7,"name":8},"## type alias_ExtendWidgetAdaptSlotWidgetProps\n> **ExtendWidgetAdaptSlotWidgetProps**\\\u003C`Props`, `ExtraProps`, `ExtraDirectives`\\>: `ExtraProps` & `{ [K in keyof Props]: IsSlotContent\u003CProps[K]> extends SlotContent\u003Cinfer U> ? SlotContent\u003CExtendWidgetAdaptSlotContentProps\u003CU, ExtraProps, ExtraDirectives>> : Props[K] }`\n\n\nType definition for extending widget properties with additional properties and directives.\n\nThis type takes three generic parameters:\n- `Props`: The original properties of the widget.\n- `ExtraProps`: Additional properties to be merged with the original properties.\n- `ExtraDirectives`: Additional directives to be merged with the original properties.\n\nThe resulting type combines `ExtraProps` with the original `Props`. For each property in `Props`,\nif the property is of type `SlotContent`, it will be extended with the additional properties and directives.\n\n### Type Parameters\n\n• **Props**\n\nThe original properties of the widget.\n\n• **ExtraProps** *extends* `object`\n\nAdditional properties to be merged with the original properties.\n\n• **ExtraDirectives** *extends* `object`\n\nAdditional directives to be merged with the original properties.\n","ExtendWidgetAdaptSlotWidgetProps",{"source":10,"name":11},"## type alias_ExtendWidgetInterfaces\n> **ExtendWidgetInterfaces**\\\u003C`Interfaces`, `ExtraInterfaces`\\>: `Interfaces` & `ExtraInterfaces`\n\n\nCombines two interface types into a single type.\n\n### Type Parameters\n\n• **Interfaces**\n\nThe base interface type.\n\n• **ExtraInterfaces**\n\nThe additional interface type to extend the base interface.\n","ExtendWidgetInterfaces",{"source":13,"name":14},"## function_extendWidgetProps\n> **extendWidgetProps**\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>(`factory`, `extraPropsDefaults`, `extraPropsConfig`?, `overrideDefaults`?): [`WidgetFactory`](../types#widgetfactory)\\\u003C[`ExtendWidgetProps`](#extendwidgetprops)\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>\\>\n\n\nMethod to extend the original widget with extra props with validator\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](../types#widget)\\\u003C`object`, `object`, `object`, `object`\\>\n\nThe type of the widget.\n\n• **ExtraProps** *extends* `object`\n\nThe type of the additional properties.\n\n• **ExtraDirectives** *extends* `object` = `object`\n\nThe type of the additional directives (default is an empty object).\n\n### Parameters\n\n#### factory\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C`W`\\>\n\noriginal widget factory\n\n#### extraPropsDefaults\n\n`ExtraProps`\n\nobject containing default value for each extra prop\n\n#### extraPropsConfig?\n\n[`ConfigValidator`](../types#configvalidator)\\\u003C`ExtraProps`\\>\n\nobject verifying the type of each extra prop\n\n#### overrideDefaults?\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetState`](../types#widgetstate)\\\u003C`W`\\>\\>\n\nobject overriding some default props of the widget to extend\n\n### Returns\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C[`ExtendWidgetProps`](#extendwidgetprops)\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>\\>\n\nwidget factory with the extra props\n","extendWidgetProps",{"source":16,"name":17},"## type alias_ExtendWidgetProps\n> **ExtendWidgetProps**\\\u003C`W`, `ExtraProps`, `ExtraDirectives`\\>: [`Widget`](../types#widget)\\\u003C[`ExtendWidgetAdaptSlotWidgetProps`](#extendwidgetadaptslotwidgetprops)\\\u003C[`WidgetProps`](../types#widgetprops)\\\u003C`W`\\>, `ExtraProps`, `ExtraDirectives`\\>, [`ExtendWidgetAdaptSlotWidgetProps`](#extendwidgetadaptslotwidgetprops)\\\u003C[`WidgetState`](../types#widgetstate)\\\u003C`W`\\>, `ExtraProps`, `ExtraDirectives`\\>, `W`\\[`\"api\"`\\], [`ExtendWidgetInterfaces`](#extendwidgetinterfaces)\\\u003C`W`\\[`\"directives\"`\\], `ExtraDirectives`\\>\\>\n\n\nType extending the original Widget props and state with ExtraProps\n\n### Type Parameters\n\n• **W** *extends* [`Widget`](../types#widget)\n\nThe base widget type to be extended.\n\n• **ExtraProps** *extends* `object`\n\nAdditional properties to be added to the widget.\n\n• **ExtraDirectives** *extends* `object` = `object`\n\nAdditional directives to be added to the widget. Defaults to an empty object.\n","ExtendWidgetProps","API extendWidget","@agnos-ui/svelte-headless/services/extendWidget"],"uses":{"params":["framework","type","slug"]}}]}
