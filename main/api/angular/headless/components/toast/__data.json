{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":160},true,[3,6,9,12,63,110,129],{"title":4,"path":5,"submenu":-1},"Types","api/angular/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/headless/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/headless/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55,59],{"path":16,"slug":17,"label":18},"api/angular/headless/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/headless/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/headless/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/angular/headless/components/collapse","components/collapse","Collapse",{"path":32,"slug":33,"label":34},"api/angular/headless/components/modal","components/modal","Modal",{"path":36,"slug":37,"label":38},"api/angular/headless/components/pagination","components/pagination","Pagination",{"path":40,"slug":41,"label":42},"api/angular/headless/components/progressbar","components/progressbar","Progressbar",{"path":44,"slug":45,"label":46},"api/angular/headless/components/rating","components/rating","Rating",{"path":48,"slug":49,"label":50},"api/angular/headless/components/select","components/select","Select",{"path":52,"slug":53,"label":54},"api/angular/headless/components/slider","components/slider","Slider",{"path":56,"slug":57,"label":58},"api/angular/headless/components/toast","components/toast","Toast",{"path":60,"slug":61,"label":62},"api/angular/headless/components/tree","components/tree","Tree",{"title":64,"path":-1,"submenu":65},"Services",[66,70,74,78,82,86,90,94,98,102,106],{"path":67,"slug":68,"label":69},"api/angular/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":71,"slug":72,"label":73},"api/angular/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":75,"slug":76,"label":77},"api/angular/headless/services/focusElement","services/focusElement","focusElement",{"path":79,"slug":80,"label":81},"api/angular/headless/services/focustrack","services/focustrack","focustrack",{"path":83,"slug":84,"label":85},"api/angular/headless/services/hash","services/hash","hash",{"path":87,"slug":88,"label":89},"api/angular/headless/services/intersection","services/intersection","intersection",{"path":91,"slug":92,"label":93},"api/angular/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":95,"slug":96,"label":97},"api/angular/headless/services/navManager","services/navManager","navManager",{"path":99,"slug":100,"label":101},"api/angular/headless/services/portal","services/portal","portal",{"path":103,"slug":104,"label":105},"api/angular/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":107,"slug":108,"label":109},"api/angular/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":111,"path":-1,"submenu":112},"Transitions",[113,117,121,125],{"path":114,"slug":115,"label":116},"api/angular/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":118,"slug":119,"label":120},"api/angular/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":122,"slug":123,"label":124},"api/angular/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":126,"slug":127,"label":128},"api/angular/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":130,"path":-1,"submenu":131},"Utils",[132,136,140,144,148,152,156],{"path":133,"slug":134,"label":135},"api/angular/headless/utils/coercion","utils/coercion","coercion",{"path":137,"slug":138,"label":139},"api/angular/headless/utils/directive","utils/directive","directive",{"path":141,"slug":142,"label":143},"api/angular/headless/utils/func","utils/func","func",{"path":145,"slug":146,"label":147},"api/angular/headless/utils/stores","utils/stores","stores",{"path":149,"slug":150,"label":151},"api/angular/headless/utils/widget","utils/widget","widget",{"path":153,"slug":154,"label":155},"api/angular/headless/utils/writables","utils/writables","writables",{"path":157,"slug":158,"label":159},"api/angular/headless/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":48,"import":49},"components/toast",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45],{"source":4,"name":5},"## constant_createToast\n> `const` **createToast**: [`WidgetFactory`](../types#widgetfactory)\\\u003C[`ToastWidget`](#toastwidget)\\>\n\n\nCreate a ToastWidget with given config props\n\n### Param\n\nan optional toast config\n\n### Returns\n\na ToastWidget\n","createToast",{"source":7,"name":8},"## constant_defaultToasterProps\n> `const` **defaultToasterProps**: [`ToasterProps`](#toasterprops)\n\n","defaultToasterProps",{"source":10,"name":11},"## function_getToastDefaultConfig\n> **getToastDefaultConfig**(): [`ToastProps`](#toastprops)\n\n\nRetrieve a shallow copy of the default toast config\n\n### Returns\n\n[`ToastProps`](#toastprops)\n\nthe default toast config\n","getToastDefaultConfig",{"source":13,"name":14},"## interface_ToastApi\n\nRepresents the API for the toast component.\n\n### Methods\n\n#### close\n\n> **close**(): `void`\n\n\nTriggers alert closing programmatically (same as clicking on the close button (Ã—)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","ToastApi",{"source":16,"name":17},"## interface_ToastDirectives\n\nInterface representing the directives for a toast component.\n\n### Properties\n\n#### autoHideDirective\n\n> **autoHideDirective**: [`Directive`](../types#directive)\n\n\nDirective that handles the autohide of the toast component\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../types#directive)\n\n\nDirective that adds all the necessary attributes to the body\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: [`Directive`](../types#directive)\n\n\nDirective that adds all the necessary attributes to the close button depending on the presence of the header\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","ToastDirectives",{"source":19,"name":20},"## class_Toaster\n\nCreate a toaster provider with helpers and state.\n\n### Param\n\nOptions for the toaster.\n\n### Type Parameters\n\n#### Props\n\n`Props` *extends* [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`ToastProps`](#toastprops)\\> = [`ToastProps`](#toastprops)\n\nType of the toast properties.\n\n### Properties\n\n#### eventsDirective\n\n> `readonly` **eventsDirective**: [`Directive`](../types#directive)\\\u003C`number`\\>\n\n\nEvents directive is used to set events on the Toast component, to keep track for example of pointer enter/leave,\nused to pause / resume the timer in case of duration and pauseOnHover are specified.\n\n***\n\n#### toasts\n\n> `readonly` **toasts**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`ToasterToast`](#toastertoast)\\\u003C`Props`\\>[]\\>\n\n\nGet the toasts value from the store\n\n##### Returns\n\nThe array of toasts.\n\n### Accessors\n\n#### timers\n\n##### Get Signature\n\n> **get** **timers**(): `ReadonlyMap`\\\u003C`number`, [`ToasterTimer`](#toastertimer)\\>\n\n\nGet the timers value from the store\n\n###### Returns\n\n`ReadonlyMap`\\\u003C`number`, [`ToasterTimer`](#toastertimer)\\>\n\nThe map of timers.\n\n### Methods\n\n#### addTimer\n\n> `readonly` **addTimer**(`id`, `duration`): `void`\n\n\nAdd timer for a toast\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast\n\n###### duration\n\n`number` = `...`\n\nDuration of the timer, by default taken from options\n\n##### Returns\n\n`void`\n\n***\n\n#### addToast\n\n> `readonly` **addToast**(`props`): `number`\n\n\nHelper to add a toast to the viewport.\n\n##### Parameters\n\n###### props\n\n`Props`\n\nOptions for the toast.\n\n##### Returns\n\n`number`\n\nThe ID of the added toast.\n\n***\n\n#### closeAll\n\n> `readonly` **closeAll**(): `void`\n\n\nHelper to close all toasts at once\n\n##### Returns\n\n`void`\n\n***\n\n#### pauseTimer\n\n> `readonly` **pauseTimer**(`id`): `void`\n\n\nPause a timer for a toast\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast\n\n##### Returns\n\n`void`\n\n***\n\n#### removeToast\n\n> `readonly` **removeToast**(`id`): `void`\n\n\nHelper to remove a toast to the viewport.\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast to remove.\n\n##### Returns\n\n`void`\n\n***\n\n#### resumeTimer\n\n> `readonly` **resumeTimer**(`id`): `void`\n\n\nResume a timer for a toast\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast\n\n##### Returns\n\n`void`\n\n***\n\n#### updateToasts\n\n> `readonly` **updateToasts**(): `void`\n\n\nHelper to update toasts when options change\n\n##### Returns\n\n`void`\n","Toaster",{"source":22,"name":23},"## interface_ToasterProps\n\nProps of the toaster\n\n### Properties\n\n#### closeAll?\n\n> `optional` **closeAll**: `boolean`\n\n\nAdd a button to close all the toasts at once\n\n***\n\n#### closeAllLabel?\n\n> `optional` **closeAllLabel**: `string`\n\n\nClose all label\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nDisplay a dismiss button on each toast. When duration = 0, this is enforced to true\n\n***\n\n#### duration\n\n> **duration**: `number`\n\n\nHow much time (ms) a toast is displayed; 0 means it won't be removed until a manual action\n\n***\n\n#### limit?\n\n> `optional` **limit**: `number`\n\n\nMaximum number of toasts displayed\n\n***\n\n#### pauseOnHover?\n\n> `optional` **pauseOnHover**: `boolean`\n\n\nPause toast when hover\n\n***\n\n#### position\n\n> **position**: [`ToastPositions`](#toastpositions)\n\n\nWhere to position the toasts\n","ToasterProps",{"source":25,"name":26},"## class_ToasterService\n\nCreate a toaster provider with helpers and state.\n\n### Param\n\nOptions for the toaster.\n\n### Type Parameters\n\n#### Props\n\n`Props` *extends* [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`ToastProps`](#toastprops)\\>\n\nType of the toast properties.\n","ToasterService",{"source":28,"name":29},"## interface_ToasterTimer\n\nRepresents a timer used by the toaster service.\n\n### Properties\n\n#### duration\n\n> **duration**: `number`\n\n\nThe duration for which the timer is set (optional). Used internally to compute the remaining time.\n\n***\n\n#### paused?\n\n> `optional` **paused**: `number`\n\n\nThe timestamp when the timer was paused (optional).\n\n***\n\n#### started\n\n> **started**: `number`\n\n\nThe timestamp when the timer was started.\n\n***\n\n#### timeout\n\n> **timeout**: `null` \\| `Timeout`\n\n\nThe timeout identifier returned by `setTimeout`.\n","ToasterTimer",{"source":31,"name":32},"## interface_ToasterToast\n\nToast object\n\n### Type Parameters\n\n#### Props\n\n`Props`\n\nType of the toast properties.\n\n### Properties\n\n#### id\n\n> **id**: `number`\n\n\nIdentifier of the toasts in the toaster\n\n***\n\n#### props\n\n> **props**: `Props`\n\n\nProperties of the toast\n","ToasterToast",{"source":34,"name":35},"## type alias_ToastPositions\n> **ToastPositions** = `\"topLeft\"` \\| `\"topCenter\"` \\| `\"topRight\"` \\| `\"middleLeft\"` \\| `\"middleCenter\"` \\| `\"middleRight\"` \\| `\"bottomLeft\"` \\| `\"bottomCenter\"` \\| `\"bottomRight\"`\n\n\nRepresents the possible positions for displaying a toast notification.\n\nThe positions are defined based on a grid layout with three horizontal\nalignments (left, center, right) and three vertical alignments (top, middle, bottom).\n\nAvailable positions:\n- `topLeft`: Top-left corner of the screen.\n- `topCenter`: Top-center of the screen.\n- `topRight`: Top-right corner of the screen.\n- `middleLeft`: Middle-left side of the screen.\n- `middleCenter`: Center of the screen.\n- `middleRight`: Middle-right side of the screen.\n- `bottomLeft`: Bottom-left corner of the screen.\n- `bottomCenter`: Bottom-center of the screen.\n- `bottomRight`: Bottom-right corner of the screen.\n","ToastPositions",{"source":37,"name":38},"## interface_ToastProps\n\nRepresents the properties for the toast component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (Ã—),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (Ã—) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastProps",{"source":40,"name":41},"## constant_ToastPropsToken\n> `const` **ToastPropsToken**: [`InjectionToken`](https://angular.dev/api/core/InjectionToken)\\\u003C[`ToasterProps`](#toasterprops)\\>\n\n\nInjection token used to provide configuration properties for the toaster service.\n\nThis token is associated with the `ToasterProps` interface, which defines the\nstructure of the configuration object. It allows dependency injection to supply\ncustom properties for the toaster service, such as default settings or behavior.\n","ToastPropsToken",{"source":43,"name":44},"## interface_ToastState\n\nRepresents the state of a toast component.\n\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (Ã—) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastState",{"source":46,"name":47},"## type alias_ToastWidget\n> **ToastWidget** = [`Widget`](../types#widget)\\\u003C[`ToastProps`](#toastprops), [`ToastState`](#toaststate), [`ToastApi`](#toastapi), [`ToastDirectives`](#toastdirectives)\\>\n\n\nRepresents a toast widget with specific properties, state, API, and directives.\n","ToastWidget","API toast","@agnos-ui/angular-headless"],"uses":{"params":["framework","type","slug"]}}]}
