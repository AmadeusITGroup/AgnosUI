{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":152},true,[3,6,9,12,59,102,121],{"title":4,"path":5,"submenu":-1},"Types","api/angular/headless/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/headless/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/headless/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55],{"path":16,"slug":17,"label":18},"api/angular/headless/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/headless/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/headless/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/angular/headless/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/headless/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/headless/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/headless/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/headless/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/headless/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/headless/components/toast","components/toast","Toast",{"path":56,"slug":57,"label":58},"api/angular/headless/components/tree","components/tree","Tree",{"title":60,"path":-1,"submenu":61},"Services",[62,66,70,74,78,82,86,90,94,98],{"path":63,"slug":64,"label":65},"api/angular/headless/services/extendWidget","services/extendWidget","extendWidget",{"path":67,"slug":68,"label":69},"api/angular/headless/services/floatingUI","services/floatingUI","floatingUI",{"path":71,"slug":72,"label":73},"api/angular/headless/services/focustrack","services/focustrack","focustrack",{"path":75,"slug":76,"label":77},"api/angular/headless/services/hash","services/hash","hash",{"path":79,"slug":80,"label":81},"api/angular/headless/services/intersection","services/intersection","intersection",{"path":83,"slug":84,"label":85},"api/angular/headless/services/matchMedia","services/matchMedia","matchMedia",{"path":87,"slug":88,"label":89},"api/angular/headless/services/navManager","services/navManager","navManager",{"path":91,"slug":92,"label":93},"api/angular/headless/services/portal","services/portal","portal",{"path":95,"slug":96,"label":97},"api/angular/headless/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":99,"slug":100,"label":101},"api/angular/headless/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":103,"path":-1,"submenu":104},"Transitions",[105,109,113,117],{"path":106,"slug":107,"label":108},"api/angular/headless/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":110,"slug":111,"label":112},"api/angular/headless/services/transitions/collapse","services/transitions/collapse","collapse",{"path":114,"slug":115,"label":116},"api/angular/headless/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":118,"slug":119,"label":120},"api/angular/headless/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":122,"path":-1,"submenu":123},"Utils",[124,128,132,136,140,144,148],{"path":125,"slug":126,"label":127},"api/angular/headless/utils/coercion","utils/coercion","coercion",{"path":129,"slug":130,"label":131},"api/angular/headless/utils/directive","utils/directive","directive",{"path":133,"slug":134,"label":135},"api/angular/headless/utils/func","utils/func","func",{"path":137,"slug":138,"label":139},"api/angular/headless/utils/stores","utils/stores","stores",{"path":141,"slug":142,"label":143},"api/angular/headless/utils/widget","utils/widget","widget",{"path":145,"slug":146,"label":147},"api/angular/headless/utils/writables","utils/writables","writables",{"path":149,"slug":150,"label":151},"api/angular/headless/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":72,"import":73},"utils/directive",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69],{"source":4,"name":5},"## function_attributesData\n> **attributesData**\\\u003C`T`\\>(...`directives`): `object`\n\n\nReturns an object with the attributes, style and class keys containing information derived from a list of directives.\n\n  - The `attributes` value is a JSON representation of key/value attributes, excepted for the `class` and `style` attributes\n  - The `classNames` value is an array of string representing the classes to be applied\n  - The `style` value is a JSON representation of the styles to be applied\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `any`[]\n\nThe type of the directives array.\n\n### Parameters\n\n#### directives\n\n...[`DirectivesAndOptParam`](../types#directivesandoptparam)\\\u003C`T`\\>\n\nList of directives to generate attributes from. Each parameter can be the directive or an array with the directive and its parameter\n\n### Returns\n\n`object`\n\nJSON object with the `attributes`, `class` and `style` keys.\n\n#### attributes\n\n> **attributes**: [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `string`\\>\n\n#### classNames\n\n> **classNames**: `string`[]\n\n#### style\n\n> **style**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C[`StyleKey`](../types#stylekey), [`StyleValue`](../types#stylevalue)\\>\\>\n","attributesData",{"source":7,"name":8},"## interface_AttributesDirectiveProps\n\nProperties for configuring server-side rendering directives.\n\n### Properties\n\n#### attributes?\n\n> `optional` **attributes**: [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`AttributeValue`](../types#attributevalue)\\>\\>\n\n\nAttributes to be added to the provided node.\n\n##### Remarks\n\nThe `style` attribute must be added separately.\n\n***\n\n#### classNames?\n\n> `optional` **classNames**: [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`boolean`\\>\\>\n\n\nClass names to be added to an HTML element.\n\n##### Remarks\n\nKey-value pairs where keys are class names and values indicate whether the class should be added (true) or removed (false).\n\n***\n\n#### events?\n\n> `optional` **events**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C\\{ \\}\\>\n\n\nEvents to be attached to an HTML element.\n\n##### Remarks\n\nKey-value pairs where keys are event types and values are event handlers.\nxw\n\n***\n\n#### styles?\n\n> `optional` **styles**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C[`StyleKey`](../types#stylekey), [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`StyleValue`](../types#stylevalue)\\>\\>\\>\n\n\nStyles to be added to an HTML element.\n\n##### Remarks\n\nKey-value pairs where keys are CSS style properties and values are style values.\n","AttributesDirectiveProps",{"source":10,"name":11},"## function_bindDirective\n> **bindDirective**\\\u003C`T`, `U`\\>(`directive`, `directiveArg$`): [`Directive`](../types#directive)\\\u003C`void`, `U`\\>\n\n\nBinds the given directive to a store that provides its argument.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the directive argument.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](../types#ssrhtmlelement) = [`SSRHTMLElement`](../types#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n#### directive\n\n[`Directive`](../types#directive)\\\u003C`T`, `U`\\>\n\nThe directive to bind to the element.\n\n#### directiveArg$\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`T`\\>\n\nThe signal to subscribe to for directive updates.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`void`, `U`\\>\n\nA directive that manages the lifecycle of the bound directive.\n\n### Remarks\n\nThe returned directive can be used without argument, it will ignore any argument passed to it\nand will call the provided directive with the content of the provided store as its argument,\ncalling its update method when the content of the store changes.\n","bindDirective",{"source":13,"name":14},"## function_bindDirectiveNoArg\n> **bindDirectiveNoArg**\\\u003C`T`, `U`\\>(`directive`): [`Directive`](../types#directive)\\\u003C`void`, `U`\\>\n\n\nReturns a directive that ignores any argument passed to it and calls the provided directive without any\nargument.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the directive's argument.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](../types#ssrhtmlelement) = [`SSRHTMLElement`](../types#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n#### directive\n\n[`Directive`](../types#directive)\\\u003C`T`, `U`\\>\n\nThe directive to bind without arguments.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`void`, `U`\\>\n\nA new directive that does not require any arguments.\n","bindDirectiveNoArg",{"source":16,"name":17},"## constant_browserDirective\n> `const` **browserDirective**: \\\u003C`T`, `U`\\>(`directive`) => [`Directive`](../types#directive)\\\u003C`T`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n\nA higher-order directive function that conditionally applies a directive based on the environment.\nIf running in a browser environment, it applies the given directive to the node.\nIf not in a browser environment, it returns a no-op function.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the directive's argument.\n\n#### U\n\n`U` *extends* [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nThe type of the HTML element the directive is applied to.\n\n### Parameters\n\n#### directive\n\n[`Directive`](../types#directive)\\\u003C`T`, `U`\\>\n\nThe directive to be conditionally applied.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`T`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n- A directive that applies the given directive in a browser environment, or a no-op in a non-browser environment.\n","browserDirective",{"source":19,"name":20},"## constant_classDirective\n> `const` **classDirective**: [`Directive`](../types#directive)\\\u003C`ClassValue`\\>\n\n\nDirective that takes as an argument a string, array or object containing CSS classes to be put on the HTML element.\nThe class attribute is computed using the clsx library.\n","classDirective",{"source":22,"name":23},"## function_createAttributesDirective\n> **createAttributesDirective**\\\u003C`T`\\>(`propsFn`): [`Directive`](../types#directive)\\\u003C`T`\\>\n\n\nCreates a directive that binds attributes, styles, class names, and events to a DOM node.\n\n### Type Parameters\n\n#### T\n\n`T` = `void`\n\nThe type of the arguments passed to the directive.\n\n### Parameters\n\n#### propsFn\n\n(`arg`) => [`AttributesDirectiveProps`](#attributesdirectiveprops)\n\nA function that takes a readable signal of type `T` and returns an object containing\n                 attributes, styles, class names, and events to bind to the node.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`T`\\>\n\nA directive function that can be used to bind the specified properties to a DOM node.\n\nThe returned directive function takes a DOM node and arguments of type `T`, and sets up the bindings\nspecified by the `propsFn` function. It returns an object with `update` and `destroy` methods:\n- `update(args: T)`: Updates the arguments passed to the directive.\n- `destroy()`: Cleans up all bindings and event listeners.\n","createAttributesDirective",{"source":25,"name":26},"## function_createBrowserStoreArrayDirective\n> **createBrowserStoreArrayDirective**(): `object`\n\n\nReturns a directive and a store. The store contains at any time the array of all the DOM elements on which the directive is\ncurrently used.\n\n### Returns\n\n`object`\n\nAn object with two properties: the `directive` property that is the directive to use on some DOM elements,\nand the `elements$` property that is the store containing an array of all the elements on which the directive is currently\nused.\n\n#### directive\n\n> **directive**: [`Directive`](../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n#### elements$\n\n> **elements$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)[]\\>\n\n### Remarks\n\nIt is the same as [createStoreArrayDirective](#createstorearraydirective), but the returned directive is only executed in a browser environment\nand the type of the elements is HTMLElement instead of [SSRHTMLElement](../types#ssrhtmlelement).\n\nIf the directive is intended to be used on a single element element, it may be more appropriate to use\n[createBrowserStoreDirective](#createbrowserstoredirective) instead.\n","createBrowserStoreArrayDirective",{"source":28,"name":29},"## function_createBrowserStoreDirective\n> **createBrowserStoreDirective**(): `object`\n\n\nReturns a directive and a store. When the directive is used on a DOM element, the store contains that DOM element.\nWhen the directive is not used, the store contains null.\n\n### Returns\n\n`object`\n\nAn object with two properties: the `directive` property that is the directive to use on one DOM element,\nand the `element$` property that is the store containing the element on which the directive is currently used (or null\nif the store is not currently used).\n\n#### directive\n\n> **directive**: [`Directive`](../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n#### element$\n\n> **element$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`null` \\| [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n### Remarks\n\nIt is the same as [createStoreDirective](#createstoredirective), but the returned directive is only executed in a browser environment\nand the type of the element is HTMLElement instead of [SSRHTMLElement](../types#ssrhtmlelement).\n\nIf the directive is used on more than one element, an error is displayed in the console and the element is ignored.\nIf the directive is intended to be used on more than one element, please use [createStoreArrayDirective](#createstorearraydirective) instead.\n","createBrowserStoreDirective",{"source":31,"name":32},"## function_createStoreArrayDirective\n> **createStoreArrayDirective**(): `object`\n\n\nReturns a directive and a store. The store contains at any time the array of all the DOM elements on which the directive is\ncurrently used.\n\n### Returns\n\n`object`\n\nAn object with two properties: the `directive` property that is the directive to use on some DOM elements,\nand the `elements$` property that is the store containing an array of all the elements on which the directive is currently\nused.\n\n#### directive\n\n> **directive**: [`Directive`](../types#directive)\n\n#### elements$\n\n> **elements$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`SSRHTMLElement`](../types#ssrhtmlelement)[]\\>\n\n### Remarks\n\nIt is the same as [createBrowserStoreArrayDirective](#createbrowserstorearraydirective), but the returned directive is also executed in a server environment\nand the type of the elements is [SSRHTMLElement](../types#ssrhtmlelement) instead of HTMLElement.\n\nIf the directive is intended to be used on a single element element, it may be more appropriate to use\n[createStoreDirective](#createstoredirective) instead.\n","createStoreArrayDirective",{"source":34,"name":35},"## function_createStoreDirective\n> **createStoreDirective**(): `object`\n\n\nReturns a directive and a store. When the directive is used on a DOM element, the store contains that DOM element.\nWhen the directive is not used, the store contains null.\n\n### Returns\n\n`object`\n\nAn object with two properties: the `directive` property that is the directive to use on one DOM element,\nand the `element$` property that is the store containing the element on which the directive is currently used (or null\nif the store is not currently used).\n\n#### directive\n\n> **directive**: [`Directive`](../types#directive)\n\n#### element$\n\n> **element$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`null` \\| [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\n\n### Remarks\n\nIt is the same as [createBrowserStoreDirective](#createbrowserstoredirective), but the returned directive is also executed in a server environment\nand the type of the element is [SSRHTMLElement](../types#ssrhtmlelement) instead of HTMLElement.\n\nIf the directive is used on more than one element, an error is displayed in the console and the element is ignored.\nIf the directive is intended to be used on more than one element, please use [createStoreArrayDirective](#createstorearraydirective) instead.\n","createStoreDirective",{"source":37,"name":38},"## function_directiveAttributes\n> **directiveAttributes**\\\u003C`T`\\>(...`directives`): [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `string`\\>\n\n\nCombines multiple directives into a single attributes object.\n\nThis function processes an array of directives and optional parameters,\nextracting attributes, class names, and styles. It then combines these\ninto a single attributes object, where class names are joined into a\nsingle string and styles are formatted as a CSS string.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `any`[]\n\nThe type of the directives and optional parameters.\n\n### Parameters\n\n#### directives\n\n...[`DirectivesAndOptParam`](../types#directivesandoptparam)\\\u003C`T`\\>\n\nThe directives and optional parameters to process.\n\n### Returns\n\n[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `string`\\>\n\nAn object containing the combined attributes.\n","directiveAttributes",{"source":40,"name":41},"## function_directiveSubscribe\n> **directiveSubscribe**(`store`, `asyncUnsubscribe`): [`Directive`](../types#directive)\n\n\nReturns a directive that subscribes to the given store while it is used on a DOM element,\nand that unsubscribes from it when it is no longer used.\n\n### Parameters\n\n#### store\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`any`\\>\n\nstore on which there will be an active subscription while the returned directive is used.\n\n#### asyncUnsubscribe\n\n`boolean` = `true`\n\ntrue if unsubscribing from the store should be done asynchronously (which is the default), and\nfalse if it should be done synchronously when the directive is destroyed\n\n### Returns\n\n[`Directive`](../types#directive)\n\nThe resulting directive.\n","directiveSubscribe",{"source":43,"name":44},"## function_directiveUpdate\n> **directiveUpdate**\\\u003C`T`\\>(`update`): [`Directive`](../types#directive)\\\u003C`T`\\>\n\n\nReturns a directive that calls the provided function with the arguments passed to the directive\non initialization and each time they are updated.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the argument that the update function accepts.\n\n### Parameters\n\n#### update\n\n(`arg`) => `void`\n\nFunction called with the directive argument when the directive is initialized and when its argument is updated.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`T`\\>\n\nThe resulting directive.\n","directiveUpdate",{"source":46,"name":47},"## constant_isBrowserHTMLElement\n> `const` **isBrowserHTMLElement**: (`element`) => `element is HTMLElement`\n\n\nOn a browser environment, returns true if the given element is an HTMLElement.\nOn a server environment, always returns false.\n\n### Parameters\n\n#### element\n\n[`SSRHTMLElement`](../types#ssrhtmlelement)\n\nThe element to check.\n\n### Returns\n\n`element is HTMLElement`\n\ntrue in a browser environment if the given element is an HTMLElement, otherwise false.\n","isBrowserHTMLElement",{"source":49,"name":50},"## function_mapDirectiveArg\n> **mapDirectiveArg**\\\u003C`T`, `U`, `V`\\>(`directive`, `fn`): [`Directive`](../types#directive)\\\u003C`T`, `V`\\>\n\n\nMaps the argument of a directive to a new value using a provided function.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the original argument.\n\n#### U\n\n`U`\n\nThe type of the mapped argument.\n\n#### V\n\n`V` *extends* [`SSRHTMLElement`](../types#ssrhtmlelement) = [`SSRHTMLElement`](../types#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n#### directive\n\n[`Directive`](../types#directive)\\\u003C`U`, `V`\\>\n\nThe original directive to be mapped.\n\n#### fn\n\n(`arg`) => `U`\n\nThe function to map the original argument to the new argument.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`T`, `V`\\>\n\nA new directive with the mapped argument.\n","mapDirectiveArg",{"source":52,"name":53},"## function_mergeDirectives\n> **mergeDirectives**\\\u003C`T`, `U`\\>(...`args`): [`Directive`](../types#directive)\\\u003C`T`, `U`\\>\n\n\nMerges multiple directives into a single directive that executes all of them when called.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the argument passed to the directive.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](../types#ssrhtmlelement) = [`SSRHTMLElement`](../types#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n#### args\n\n...([`Directive`](../types#directive)\\\u003C`T`, `U`\\> \\| [`Directive`](../types#directive)\\\u003C`void`, `U`\\>)[]\n\nThe directives to merge.\n\n### Returns\n\n[`Directive`](../types#directive)\\\u003C`T`, `U`\\>\n\nA new directive that applies all the given directives.\n\nThe returned directive has the following lifecycle methods:\n- `update(arg)`: Updates all merged directives with the given argument.\n- `destroy()`: Destroys all merged directives in reverse order.\n\n### Remarks\n\nAll directives receive the same argument upon initialization and update.\nDirectives are created and updated in the same order as they appear in the arguments list,\nthey are destroyed in the reverse order.\nAll calls to the directives (to create, update and destroy them) are wrapped in a call to the\nbatch function of tansu\n","mergeDirectives",{"source":55,"name":56},"## function_multiDirective\n> **multiDirective**\\\u003C`T`, `U`\\>(`element`, `directives`): `object`\n\n\nApplies multiple directives to a given SSRHTMLElement and provides methods to update or destroy them.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `any`[]\n\nA tuple type representing the arguments for each directive.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](../types#ssrhtmlelement) = [`SSRHTMLElement`](../types#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n#### element\n\n`U`\n\nThe SSRHTMLElement to which the directives will be applied.\n\n#### directives\n\n[`DirectivesAndOptParam`](../types#directivesandoptparam)\\\u003C`T`, `U`\\>\n\nAn array of directives and their optional parameters.\n\n### Returns\n\n`object`\n\nAn object containing:\n- `update`: A function to update the directives with new parameters.\n- `destroy`: A function to destroy all applied directives.\n\n#### destroy\n\n> **destroy**: () => `void`\n\n##### Returns\n\n`void`\n\n#### update\n\n> **update**: (`directives`) => `void`\n\n##### Parameters\n\n###### directives\n\n([`Directive`](../types#directive)\\\u003C`void`, `U`\\> \\| [`DirectiveAndParam`](../types#directiveandparam)\\\u003C`any`, `U`\\>)[]\n\n##### Returns\n\n`void`\n","multiDirective",{"source":58,"name":59},"## function_registrationArray\n> **registrationArray**\\\u003C`T`\\>(): [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`T`[]\\> & `object`\n\n\nCreates a registration array that allows elements to be added and removed.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of elements in the array.\n\n### Returns\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`T`[]\\> & `object`\n\nAn object that includes a readable signal of the array and a register function.\n\nThe returned object has the following properties:\n- `register`: A function to add an element to the array. It takes an element of type `T` as a parameter and returns a function to remove the element from the array.\n","registrationArray",{"source":61,"name":62},"## constant_ssrAttributes\n> `const` **ssrAttributes**: \\\u003C`T`\\>(...`directives`) => [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `string`\\>\n\n\nGenerates a record of SSR (Server-Side Rendering) attributes based on the provided directives.\n\nThis function behaves differently depending on the environment:\n- In a browser environment (`BROWSER` is true), it returns an empty object.\n- In a non-browser environment, it delegates to the `directiveAttributes` function.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `any`[]\n\nA tuple type representing the directives and optional parameters.\n\n### Parameters\n\n#### directives\n\n...[`DirectivesAndOptParam`](../types#directivesandoptparam)\\\u003C`T`\\>\n\n### Returns\n\n[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `string`\\>\n\nA record of SSR attributes.\n","ssrAttributes",{"source":64,"name":65},"## class_UseDirective\n\nA directive that allows the use of another directive with optional parameters.\n\n### Remarks\n\nThis directive uses a private instance of [useDirectiveForHost](#usedirectiveforhost) to manage the directive and its parameter.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the parameter that can be passed to the directive.\n\n### Implements\n\n- [`OnChanges`](https://angular.dev/api/core/OnChanges)\n","UseDirective",{"source":67,"name":68},"## function_useDirectiveForHost\n> **useDirectiveForHost**\\\u003C`T`\\>(`directive?`, `params?`): `object`\n\n\nA utility function to manage the lifecycle of a directive for a host element.\n\nThis function handles the creation, updating, and destruction of a directive instance\nassociated with a host element. It ensures that the directive is called appropriately\nbased on the platform (server or client) and manages the directive's lifecycle within\nthe Angular injection context.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of parameters that the directive accepts.\n\n### Parameters\n\n#### directive?\n\n[`Directive`](../types#directive)\\\u003C`T`\\>\n\nThe directive to be applied to the host element.\n\n#### params?\n\n`T`\n\nThe parameters to be passed to the directive.\n\n### Returns\n\n`object`\n\nAn object containing an `update` function to update the directive and its parameters.\n\n#### update\n\n> **update**: (`newDirective?`, `newParams?`) => `void`\n\n##### Parameters\n\n###### newDirective?\n\n[`Directive`](../types#directive)\\\u003C`T`\\>\n\n###### newParams?\n\n`T`\n\n##### Returns\n\n`void`\n","useDirectiveForHost",{"source":70,"name":71},"## class_UseMultiDirective\n\nA directive that allows the use of multiple directives on a host element.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `any`[]\n\nA tuple type representing the directives and their optional parameters.\n\n### Implements\n\n- [`OnChanges`](https://angular.dev/api/core/OnChanges)\n\n### Properties\n\n#### useMulti\n\n> `readonly` **useMulti**: `InputSignal`\\\u003C[`DirectivesAndOptParam`](../types#directivesandoptparam)\\\u003C`T`, [`SSRHTMLElement`](../types#ssrhtmlelement)\\>\\>\n\n\nAn input property that takes a tuple of directives and their optional parameters.\n","UseMultiDirective","API directive","@agnos-ui/angular-headless"],"uses":{"params":["framework","type","slug"]}}]}
