{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":156},true,[3,6,9,12,59,102,125],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/toast","components/toast","Toast",{"path":56,"slug":57,"label":58},"api/angular/bootstrap/components/tree","components/tree","Tree",{"title":60,"path":-1,"submenu":61},"Services",[62,66,70,74,78,82,86,90,94,98],{"path":63,"slug":64,"label":65},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":99,"slug":100,"label":101},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":103,"path":-1,"submenu":104},"Transitions",[105,109,113,117,121],{"path":106,"slug":107,"label":108},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":122,"slug":123,"label":124},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":126,"path":-1,"submenu":127},"Utils",[128,132,136,140,144,148,152],{"path":129,"slug":130,"label":131},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/func","utils/func","func",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":149,"slug":150,"label":151},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":153,"slug":154,"label":155},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":21,"import":22},"config",[3,6,9,12,15,18],{"source":4,"name":5},"## function_createWidgetsConfig\n> **createWidgetsConfig**\\\u003C`T`\\>(`parent$`?, `adaptParentConfig`?): [`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`T`\\>\n\n\nCreates a new widgets default configuration store, optionally inheriting from a parent store, and containing\nits own set of widgets configuration properties that override the same properties form the parent configuration.\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n#### parent$?\n\n[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`T`\\>\n\noptional parent widgets default configuration store.\n\n#### adaptParentConfig?\n\n(`config`) => [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C\\{ \\[Level1 in string \\| number \\| symbol\\]: Partial\\\u003CT\\[Level1\\]\\> \\}\\>\n\noptional function that receives a 2-levels copy of the widgets default configuration\nfrom parent$ (or an empty object if parent$ is not specified) and returns the widgets default configuration to be used.\nIt is called only if the configuration is needed, and was not yet computed for the current value of the parent configuration.\nIt is called in a tansu reactive context, so it can use any tansu store and will be called again if those stores change.\n\n### Returns\n\n[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`T`\\>\n\nthe resulting widgets default configuration store, which contains 3 additional properties that are stores:\nparent$, adaptedParent$ (containing the value computed after the first step), and own$ (that contains only overridding properties).\nThe resulting store is writable, its set function is actually the set function of the own$ store.\n\n### Remarks\n\nThe resulting store has a value computed from the parent store in two steps:\n- first step: the parent configuration is transformed by the adaptParentConfig function (if specified).\nIf adaptParentConfig is not specified, this step is skipped.\n- second step: the configuration from step 1 is merged (2-levels deep) with the own$ store. The own$ store initially contains\nan empty object (i.e. no property from the parent is overridden). It can be changed by calling set on the store returned by this function.\n","createWidgetsConfig",{"source":7,"name":8},"## function_mergeInto\n> **mergeInto**\\\u003C`T`\\>(`destination`, `source`, `levels`): `T`\n\n\nMerges source object into destination object, up to the provided number of levels.\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n#### destination\n\n`T`\n\ndestination object\n\n#### source\n\nsource object\n\n`undefined` | `T`\n\n#### levels\n\n`number` = `Infinity`\n\nnumber of levels to merge\n\n### Returns\n\n`T`\n\nthe destination object in most cases, or the source in some cases (if the source is not undefined and either levels is smaller than 1\nor the source is not an object)\n","mergeInto",{"source":10,"name":11},"## type alias_Partial2Levels\n> **Partial2Levels**\\\u003C`T`\\>: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`{ [Level1 in keyof T]: Partial\u003CT[Level1]> }`\\>\n\n\nA utility type that makes all properties of an object type `T` optional,\nand also makes all properties of the nested objects within `T` optional.\n\n### Type Parameters\n\n• **T**\n\nThe object type to be transformed.\n","Partial2Levels",{"source":13,"name":14},"## function_widgetsConfigFactory\n> **widgetsConfigFactory**\\\u003C`Config`\\>(`widgetsConfigInjectionToken`): `object`\n\n\nA factory to create the utilities to allow widgets to be context-aware.\n\nIt can be used when extending the core and creating new widgets.\n\n### Type Parameters\n\n• **Config** *extends* `object` = `WidgetsConfig`\n\nThe type of the widgets configuration object.\n\n### Parameters\n\n#### widgetsConfigInjectionToken\n\n[`InjectionToken`](https://angular.dev/api/core/InjectionToken)\\\u003C[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`Config`\\>\\> = `...`\n\nthe widgets config injection token\n\n### Returns\n\n`object`\n\nthe utilities to create / manage widgets and contexts\n\n#### callWidgetFactory\n\n> **callWidgetFactory**: \\\u003C`W`\\>(`params`) => [`AngularWidget`](./types#angularwidget)\\\u003C`W`\\>\n\nCreates and initializes a widget using the provided factory and configuration options.\n\n##### Type Parameters\n\n• **W** *extends* [`Widget`](./types#widget)\n\nThe type of the widget.\n\n##### Parameters\n\n###### params\n\nThe parameters for creating the widget.\n\n####### afterInit\n\n(`widget`) => `void`\n\nA callback function to be called after the widget is initialized.\n\n####### defaultConfig\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\> \\| [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>\\>\\> = `{}`\n\nThe default configuration for the widget.\n\n####### events\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C[`WidgetProps`](./types#widgetprops)\\\u003C`W`\\>, keyof [`WidgetProps`](./types#widgetprops)\\\u003C`W`\\> & `` `on${string}` ``\\>\\>\n\nThe event handlers for the widget.\n\n####### factory\n\n[`WidgetFactory`](./types#widgetfactory)\\\u003C`W`\\>\n\nThe factory function to create the widget.\n\n####### slotChildren\n\n() => `undefined` \\| [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`void`\\>\n\nA function that returns the slot children for the widget.\n\n####### slotTemplates\n\n() => \\{ \\[K in string \\| number \\| symbol as IsSlotContent\\\u003CWidgetProps\\\u003CW\\>\\[K\\]\\> extends 0 ? never : K\\]: WidgetProps\\\u003CW\\>\\[K\\] extends SlotContent\\\u003CU\\> ? undefined \\| TemplateRef\\\u003CU\\> : never \\}\n\nA function that returns the slot templates for the widget.\n\n####### widgetName\n\n`null` \\| keyof `Config` = `null`\n\nThe name of the widget configuration to inject, if any.\n\n##### Returns\n\n[`AngularWidget`](./types#angularwidget)\\\u003C`W`\\>\n\nThe initialized widget.\n\n#### injectWidgetConfig\n\n> **injectWidgetConfig**: \\\u003C`N`\\>(`widgetName`) => [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Config`\\[`N`\\]\\>\\>\n\nInjects the configuration for a specific widget.\n\n##### Type Parameters\n\n• **N** *extends* `string` \\| `number` \\| `symbol`\n\nThe key of the widget configuration in the `Config` type.\n\n##### Parameters\n\n###### widgetName\n\n`N`\n\nThe name of the widget whose configuration is to be injected.\n\n##### Returns\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Config`\\[`N`\\]\\>\\>\n\nA `ReadableSignal` that provides a partial configuration of the specified widget or `undefined` if the configuration is not available.\n\n#### injectWidgetsConfig\n\n> **injectWidgetsConfig**: `InjectWidgetsConfig`\\\u003C`Config`\\>\n\n#### provideWidgetsConfig\n\n> **provideWidgetsConfig**: (`adaptParentConfig`?) => [`FactoryProvider`](https://angular.dev/api/core/FactoryProvider)\n\nCreates a provider of widgets default configuration that inherits from any widgets default configuration already defined at an upper level\nin the Angular dependency injection system. It contains its own set of widgets configuration properties that override the same properties form\nthe parent configuration.\n\n##### Parameters\n\n###### adaptParentConfig?\n\n`AdaptParentConfig`\\\u003C`Config`\\>\n\noptional function that receives a 2-levels copy of the widgets default configuration\ndefined at an upper level in the Angular dependency injection system (or an empty object if there is none) and returns the widgets\ndefault configuration to be used.\nIt is called only if the configuration is needed, and was not yet computed for the current value of the parent configuration.\nIt is called in a tansu reactive context, so it can use any tansu store and will be called again if those stores change.\nIt is also called in an Angular injection context, so it can call the Angular inject function to get and use dependencies from the\nAngular dependency injection system.\n\n##### Returns\n\n[`FactoryProvider`](https://angular.dev/api/core/FactoryProvider)\n\nDI provider to be included a list of `providers` (for example at a component level or\nany other level of the Angular dependency injection system)\n\n##### Remarks\n\nThe configuration is computed from the parent configuration in two steps:\n- first step: the parent configuration is transformed by the adaptParentConfig function (if specified).\nIf adaptParentConfig is not specified, this step is skipped.\n- second step: the configuration from step 1 is merged (2-levels deep) with the own$ store. The own$ store initially contains\nan empty object (i.e. no property from the parent is overridden). It can be changed by calling set on the store returned by\n[injectWidgetsConfig](#widgetsconfigfactory-injectwidgetsconfig).\n\n##### Example\n\n```typescript\n@Component({\n  // ...\n  providers: [\n    provideWidgetsConfig((parentConfig) => {\n      // first step configuration: transforms the parent configuration\n      parentConfig.rating = parentConfig.rating ?? {};\n      parentConfig.rating.className = `${parentConfig.rating.className ?? ''} my-rating-extra-class`\n      return parentConfig;\n    })\n  ]\n})\nclass MyComponent {\n  widgetsConfig = injectWidgetsConfig();\n  constructor() {\n    this.widgetsConfig.set({\n      // second step configuration: overrides the parent configuration\n      rating: {\n        slotStar: MyCustomSlotStar\n      }\n    });\n  }\n  // ...\n}\n```\n\n#### widgetsConfigInjectionToken\n\n> **widgetsConfigInjectionToken**: [`InjectionToken`](https://angular.dev/api/core/InjectionToken)\\\u003C[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`Config`\\>\\>\n\nDependency Injection token which can be used to provide or inject the widgets default configuration store.\n","widgetsConfigFactory",{"source":16,"name":17},"## constant_widgetsConfigInjectionToken\n> **widgetsConfigInjectionToken**: [`InjectionToken`](https://angular.dev/api/core/InjectionToken)\\\u003C[`WidgetsConfigStore`](#widgetsconfigstore)\\\u003C`WidgetsConfig`\\>\\>\n\n","widgetsConfigInjectionToken",{"source":19,"name":20},"## type alias_WidgetsConfigStore\n> **WidgetsConfigStore**\\\u003C`T`\\>: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\> & `object`\n\n\nRepresents a store for widget configurations with support for partial updates\nat two levels of depth. This store includes signals for its own state, an optional\nparent state, and an optional adapted parent state.\n\n### Type declaration\n\n#### adaptedParent$\n\n> **adaptedParent$**: `undefined` \\| [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\>\n\n#### own$\n\n> **own$**: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\>\n\n#### parent$\n\n> **parent$**: `undefined` \\| [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial2Levels`](#partial2levels)\\\u003C`T`\\>\\>\n\n### Type Parameters\n\n• **T**\n\nThe type of the widget configuration.\n","WidgetsConfigStore","API config","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
