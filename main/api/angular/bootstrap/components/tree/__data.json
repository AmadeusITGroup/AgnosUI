{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":160},true,[3,6,9,12,63,106,129],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55,59],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/select","components/select","Select",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":56,"slug":57,"label":58},"api/angular/bootstrap/components/toast","components/toast","Toast",{"path":60,"slug":61,"label":62},"api/angular/bootstrap/components/tree","components/tree","Tree",{"title":64,"path":-1,"submenu":65},"Services",[66,70,74,78,82,86,90,94,98,102],{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":99,"slug":100,"label":101},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":103,"slug":104,"label":105},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":107,"path":-1,"submenu":108},"Transitions",[109,113,117,121,125],{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":122,"slug":123,"label":124},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":126,"slug":127,"label":128},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":130,"path":-1,"submenu":131},"Utils",[132,136,140,144,148,152,156],{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/func","utils/func","func",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":149,"slug":150,"label":151},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":153,"slug":154,"label":155},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":157,"slug":158,"label":159},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":63,"import":64},"components/tree",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60],{"source":4,"name":5},"## function_createTree\n> **createTree**(`props`?): [`TreeWidget`](#treewidget)\n\n\nCreate a Tree with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`TreeProps`](#treeprops)\\>\n\n### Returns\n\n[`TreeWidget`](#treewidget)\n\na TreeWidget\n","createTree",{"source":7,"name":8},"## function_getTreeDefaultConfig\n> **getTreeDefaultConfig**(): [`TreeProps`](#treeprops)\n\n\nRetrieve a shallow copy of the default Tree config\n\n### Returns\n\n[`TreeProps`](#treeprops)\n\nthe default Tree config\n","getTreeDefaultConfig",{"source":10,"name":11},"## interface_NormalizedTreeItem\n\nNormalized TreeItem object\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nAccessibility label for the node\n\n***\n\n#### children\n\n> **children**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\n\nAn array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\n\nString title of the node\n\n***\n\n#### level\n\n> **level**: `number`\n\n\nLevel in the hierarchy, starts with 0 for a root node\n","NormalizedTreeItem",{"source":13,"name":14},"## interface_TreeApi\n\nInterface representing the API for a Tree component.\n","TreeApi",{"source":16,"name":17},"## class_TreeComponent\n\nTreeComponent is an Angular component that extends the BaseWidgetDirective\nto provide a customizable tree widget. This component allows for various\nconfigurations and customizations through its inputs and outputs.\n\n### Properties\n\n#### ariaLabel\n\n> `readonly` **ariaLabel**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaLabelToggleFn\n\n> `readonly` **ariaLabelToggleFn**: `InputSignal`\\\u003C`undefined` \\| (`label`) => `string`\\>\n\n\nReturn the value for the 'aria-label' attribute of the toggle\n\n##### Param\n\ntree item label\n\n##### Default Value\n\n```ts\n(label: string) => `Toggle ${label}`\n```\n\n***\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### expandToggle\n\n> `readonly` **expandToggle**: `OutputEmitterRef`\\\u003C[`NormalizedTreeItem`](#normalizedtreeitem)\\>\n\n\nAn event emitted when the user toggles the expand of the TreeItem.\n\nEvent payload is equal to the TreeItem clicked.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### item\n\n> `readonly` **item**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\\>\n\n\nSlot to change the default tree item\n\n***\n\n#### itemContent\n\n> `readonly` **itemContent**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\\>\n\n\nSlot to change the default tree item content\n\n***\n\n#### itemToggle\n\n> `readonly` **itemToggle**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\\>\n\n\nSlot to change the default tree item toggle\n\n***\n\n#### navSelector\n\n> `readonly` **navSelector**: `InputSignal`\\\u003C`undefined` \\| (`node`) => `NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\\>\n\n\nRetrieves expand items of the TreeItem\n\n##### Param\n\nHTML element that is representing the expand item\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('button')\n```\n\n***\n\n#### nodes\n\n> `readonly` **nodes**: `InputSignal`\\\u003C`undefined` \\| [`TreeItem`](#treeitem)[]\\>\n\n\nArray of the tree nodes to display\n\n##### Default Value\n\n`[]`\n\n***\n\n#### structure\n\n> `readonly` **structure**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\\>\n\n\nSlot to change the default display of the tree\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","TreeComponent",{"source":19,"name":20},"## type alias_TreeContext\n> **TreeContext**: [`WidgetSlotContext`](../types#widgetslotcontext)\\\u003C[`TreeWidget`](#treewidget)\\>\n\n\nRepresents the context for a Tree widget.\nThis interface is an alias for `WidgetSlotContext\u003CTreeWidget>`.\n","TreeContext",{"source":22,"name":23},"## constant_treeDefaultItemToggle\n> `const` **treeDefaultItemToggle**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nA constant representing the default slot for tree item toggle.\n","treeDefaultItemToggle",{"source":25,"name":26},"## constant_treeDefaultSlotItem\n> `const` **treeDefaultSlotItem**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nA constant representing the default slot for tree item.\n","treeDefaultSlotItem",{"source":28,"name":29},"## constant_treeDefaultSlotItemContent\n> `const` **treeDefaultSlotItemContent**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nA constant representing the default slot for tree item.\n","treeDefaultSlotItemContent",{"source":31,"name":32},"## constant_treeDefaultSlotStructure\n> `const` **treeDefaultSlotStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\n\nA constant representing the default slot for tree structure.\n","treeDefaultSlotStructure",{"source":34,"name":35},"## interface_TreeDirectives\n\nInterface representing various directives used in the Tree component.\n\n### Properties\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../types#directive)\\\u003C\\{ `item`: [`NormalizedTreeItem`](#normalizedtreeitem); \\}\\>\n\n\nDirective to handle attributes for the tree item\n\n***\n\n#### itemToggleDirective\n\n> **itemToggleDirective**: [`Directive`](../types#directive)\\\u003C\\{ `item`: [`NormalizedTreeItem`](#normalizedtreeitem); \\}\\>\n\n\nDirective to handle toggle for the tree item\n\n***\n\n#### navigationDirective\n\n> **navigationDirective**: [`Directive`](../types#directive)\n\n\nDirective to attach navManager for the tree\n","TreeDirectives",{"source":37,"name":38},"## interface_TreeItem\n\nRepresents a tree item component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the node\n\n***\n\n#### children?\n\n> `optional` **children**: [`TreeItem`](#treeitem)[]\n\n\nOptional array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\n\nString title of the node\n","TreeItem",{"source":40,"name":41},"## class_TreeItemContentDirective\n\nDirective to provide a template reference for tree item content.\n\nThis directive uses a template reference to render the [TreeSlotItemContext](#treeslotitemcontext).\n","TreeItemContentDirective",{"source":43,"name":44},"## class_TreeItemDirective\n\nDirective to provide a template reference for tree item.\n\nThis directive uses a template reference to render the [TreeSlotItemContext](#treeslotitemcontext).\n","TreeItemDirective",{"source":46,"name":47},"## class_TreeItemToggleDirective\n\nDirective to provide a template reference for tree item toggle.\n\nThis directive uses a template reference to render the [TreeSlotItemContext](#treeslotitemcontext).\n","TreeItemToggleDirective",{"source":49,"name":50},"## interface_TreeProps\n\nRepresents the properties for the Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaLabelToggleFn\n\n> **ariaLabelToggleFn**: (`label`) => `string`\n\n\nReturn the value for the 'aria-label' attribute of the toggle\n\n##### Parameters\n\n###### label\n\n`string`\n\ntree item label\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(label: string) => `Toggle ${label}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### item\n\n> **item**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nSlot to change the default tree item\n\n***\n\n#### itemContent\n\n> **itemContent**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nSlot to change the default tree item content\n\n***\n\n#### itemToggle\n\n> **itemToggle**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nSlot to change the default tree item toggle\n\n***\n\n#### nodes\n\n> **nodes**: [`TreeItem`](#treeitem)[]\n\n\nArray of the tree nodes to display\n\n##### Default Value\n\n`[]`\n\n***\n\n#### onExpandToggle\n\n> **onExpandToggle**: (`node`) => `void`\n\n\nAn event emitted when the user toggles the expand of the TreeItem.\n\nEvent payload is equal to the TreeItem clicked.\n\n##### Parameters\n\n###### node\n\n[`NormalizedTreeItem`](#normalizedtreeitem)\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\n\nSlot to change the default display of the tree\n\n### Methods\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n\nRetrieves expand items of the TreeItem\n\n##### Parameters\n\n###### node\n\n[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTML element that is representing the expand item\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('button')\n```\n","TreeProps",{"source":52,"name":53},"## type alias_TreeSlotItemContext\n> **TreeSlotItemContext**: [`TreeContext`](#treecontext) & `object`\n\n\nRepresents the context for a tree item, extending the base `TreeContext`\nwith an additional `item` property.\n\n### Type declaration\n\n#### item\n\n> **item**: [`NormalizedTreeItem`](#normalizedtreeitem)\n","TreeSlotItemContext",{"source":55,"name":56},"## interface_TreeState\n\nRepresents the state of a Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### expandedMap\n\n> **expandedMap**: `object`\n\n\nGetter of expanded state for each tree node\n\n##### get\n\n###### Parameters\n\n####### item\n\n[`NormalizedTreeItem`](#normalizedtreeitem)\n\n###### Returns\n\n`undefined` \\| `boolean`\n\n***\n\n#### item\n\n> **item**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nSlot to change the default tree item\n\n***\n\n#### itemContent\n\n> **itemContent**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nSlot to change the default tree item content\n\n***\n\n#### itemToggle\n\n> **itemToggle**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeSlotItemContext`](#treeslotitemcontext)\\>\n\n\nSlot to change the default tree item toggle\n\n***\n\n#### normalizedNodes\n\n> **normalizedNodes**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\n\nArray of normalized tree nodes\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`TreeContext`](#treecontext)\\>\n\n\nSlot to change the default display of the tree\n","TreeState",{"source":58,"name":59},"## class_TreeStructureDirective\n\nDirective to provide a template reference for tree structure.\n\nThis directive uses a template reference to render the [TreeContext](#treecontext).\n","TreeStructureDirective",{"source":61,"name":62},"## type alias_TreeWidget\n> **TreeWidget**: [`Widget`](../types#widget)\\\u003C[`TreeProps`](#treeprops), [`TreeState`](#treestate), [`TreeApi`](#treeapi), [`TreeDirectives`](#treedirectives)\\>\n\n\nRepresents a Tree widget component.\n","TreeWidget","API tree","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
