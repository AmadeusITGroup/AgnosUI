{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":156},true,[3,6,9,12,59,102,125],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/toast","components/toast","Toast",{"path":56,"slug":57,"label":58},"api/angular/bootstrap/components/tree","components/tree","Tree",{"title":60,"path":-1,"submenu":61},"Services",[62,66,70,74,78,82,86,90,94,98],{"path":63,"slug":64,"label":65},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":99,"slug":100,"label":101},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":103,"path":-1,"submenu":104},"Transitions",[105,109,113,117,121],{"path":106,"slug":107,"label":108},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":122,"slug":123,"label":124},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":126,"path":-1,"submenu":127},"Utils",[128,132,136,140,144,148,152],{"path":129,"slug":130,"label":131},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/func","utils/func","func",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":149,"slug":150,"label":151},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":153,"slug":154,"label":155},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":42,"import":43},"components/toast",[3,6,9,12,15,18,21,24,27,30,33,36,39],{"source":4,"name":5},"## function_createToast\n> **createToast**(`props`?): [`ToastWidget`](#toastwidget)\n\n\nCreate an ToastWidget with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`ToastProps`](#toastprops)\\>\n\n### Returns\n\n[`ToastWidget`](#toastwidget)\n\nan ToastWidget\n","createToast",{"source":7,"name":8},"## function_getToastDefaultConfig\n> **getToastDefaultConfig**(): [`ToastProps`](#toastprops)\n\n\nRetrieve a shallow copy of the default Toast config\n\n### Returns\n\n[`ToastProps`](#toastprops)\n\nthe default Toast config\n","getToastDefaultConfig",{"source":10,"name":11},"## interface_ToastApi\n\nRepresents the API for the toast component.\n\n### Methods\n\n#### close\n\n> **close**(): `void`\n\n\nTriggers alert closing programmatically (same as clicking on the close button (×)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","ToastApi",{"source":13,"name":14},"## class_ToastBodyDirective\n\nDirective to represent the body of a toast notification.\nThis directive uses a template reference to render the [ToastContext](#toastcontext).\n","ToastBodyDirective",{"source":16,"name":17},"## class_ToastComponent\n\nThe `ToastComponent` is a UI component that displays a toast notification.\nIt extends the `BaseWidgetDirective` and provides various configurable properties\nand events to control the behavior and appearance of the toast.\n\n### Properties\n\n#### animated\n\n> `readonly` **animated**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> `readonly` **animatedOnInit**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> `readonly` **ariaCloseButtonLabel**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> `readonly` **autoHide**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> `readonly` **children**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\\>\n\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> `readonly` **delay**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> `readonly` **dismissible**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> `readonly` **header**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\\>\n\n\nHeader template for the toast component\n\n***\n\n#### hidden\n\n> `readonly` **hidden**: `OutputEmitterRef`\\\u003C`void`\\>\n\n\nCallback called when the alert is hidden.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### shown\n\n> `readonly` **shown**: `OutputEmitterRef`\\\u003C`void`\\>\n\n\nCallback called when the alert is shown.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> `readonly` **structure**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\\>\n\n\nGlobal template for the toast component\n\n***\n\n#### transition\n\n> `readonly` **transition**: `InputSignal`\\\u003C`undefined` \\| [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\\>\n\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### visible\n\n> `readonly` **visible**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n\n***\n\n#### visibleChange\n\n> `readonly` **visibleChange**: `OutputEmitterRef`\\\u003C`boolean`\\>\n\n\nCallback called when the alert visibility changed.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","ToastComponent",{"source":19,"name":20},"## interface_ToastContext\n\nRepresents the context for a Toast widget.\nThis interface is an alias for `WidgetSlotContext\u003CToastWidget>`.\n\n### Properties\n\n#### api\n\n> **api**: [`ToastApi`](#toastapi)\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`ToastDirectives`](#toastdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../types#angularstate)\\\u003C[`ToastWidget`](#toastwidget)\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","ToastContext",{"source":22,"name":23},"## constant_toastDefaultSlotStructure\n> `const` **toastDefaultSlotStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nRepresents the default slot structure for the toast component.\n","toastDefaultSlotStructure",{"source":25,"name":26},"## interface_ToastDirectives\n\nInterface representing the directives for a toast component.\n\n### Properties\n\n#### autoHideDirective\n\n> **autoHideDirective**: [`Directive`](../types#directive)\n\n\nDirective that handles the autohide of the toast component\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../types#directive)\n\n\nDirective that adds all the necessary attributes to the body\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: [`Directive`](../types#directive)\n\n\nDirective that adds all the necessary attributes to the close button depending on the presence of the header\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","ToastDirectives",{"source":28,"name":29},"## class_ToastHeaderDirective\n\nDirective representing the header of a toast component.\nThis directive uses a template reference to render the [ToastContext](#toastcontext).\n","ToastHeaderDirective",{"source":31,"name":32},"## interface_ToastProps\n\nInterface representing the properties for the Toast component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nHeader template for the toast component\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nGlobal template for the toast component\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastProps",{"source":34,"name":35},"## interface_ToastState\n\nRepresents the state of a Toast component.\n\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nHeader template for the toast component\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nGlobal template for the toast component\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastState",{"source":37,"name":38},"## class_ToastStructureDirective\n\nDirective to define the structure of a toast component.\nThis directive uses a template reference to render the [ToastContext](#toastcontext).\n","ToastStructureDirective",{"source":40,"name":41},"## type alias_ToastWidget\n> **ToastWidget**: [`Widget`](../types#widget)\\\u003C[`ToastProps`](#toastprops), [`ToastState`](#toaststate), [`ToastApi`](#toastapi), [`ToastDirectives`](#toastdirectives)\\>\n\n\nRepresents a Toast widget component.\n","ToastWidget","API toast","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
