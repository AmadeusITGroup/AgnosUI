{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":148},true,[3,6,9,12,55,98,121],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/toast","components/toast","Toast",{"title":56,"path":-1,"submenu":57},"Services",[58,62,66,70,74,78,82,86,90,94],{"path":59,"slug":60,"label":61},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":63,"slug":64,"label":65},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":99,"path":-1,"submenu":100},"Transitions",[101,105,109,113,117],{"path":102,"slug":103,"label":104},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":106,"slug":107,"label":108},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":122,"path":-1,"submenu":123},"Utils",[124,128,132,136,140,144],{"path":125,"slug":126,"label":127},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":129,"slug":130,"label":131},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":66,"import":67},"components/accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63],{"source":4,"name":5},"## interface_AccordionApi\nInterface representing the API for an accordion component.\n\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreates a new accordionItem.\n\n##### Parameters\n\n• **itemConfig?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":7,"name":8},"## class_AccordionBodyDirective\nDirective to represent the body of an accordion item.\n\nThis directive provides a template reference for the [AccordionItemContext](#accordionitemcontext).\n","AccordionBodyDirective",{"source":10,"name":11},"## class_AccordionDirective\nDirective for creating an accordion component.\n\nThis directive extends the `BaseWidgetDirective` and provides various inputs and outputs\nto customize the behavior and appearance of the accordion and its items.\n\n### Properties\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `undefined` \\| `boolean`\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `undefined` \\| `boolean`\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `undefined` \\| `string`\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHidden\n\n> **itemHidden**: `EventEmitter`\\\u003C`string`\\>\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### itemShown\n\n> **itemShown**: `EventEmitter`\\\u003C`string`\\>\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: `undefined` \\| [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n> `get` **directives**(): `W`\\[`\"directives\"`\\]\n\nRetrieves the widget directives\n\n##### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n> `get` **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nRetrieves the widget state as an Angular [Signal](https://angular.dev/api/core/Signal)\n\n##### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","AccordionDirective",{"source":13,"name":14},"## interface_AccordionDirectives\nInterface representing the directives used in the Accordion component.\n\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../types#directive)\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":16,"name":17},"## class_AccordionHeaderDirective\nDirective to be used as an accordion header.\n\nThis directive provides a template reference for the [AccordionItemContext](#accordionitemcontext).\n","AccordionHeaderDirective",{"source":19,"name":20},"## interface_AccordionItemApi\nInterface representing the API for an accordion item.\n\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":22,"name":23},"## class_AccordionItemComponent\nAccordionItemComponent is a component that represents an item within an accordion.\n\n### Implements\n\n- [`AfterViewInit`](https://angular.dev/api/core/AfterViewInit)\n\n### Properties\n\n#### animated\n\n> **animated**: `undefined` \\| `boolean`\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `undefined` \\| `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### hidden\n\n> **hidden**: `EventEmitter`\\\u003C`void`\\>\n\nAn event fired when an item is hidden.\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shown\n\n> **shown**: `EventEmitter`\\\u003C`void`\\>\n\nAn event fired when an item is shown.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: `undefined` \\| [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n\n***\n\n#### visibleChange\n\n> **visibleChange**: `EventEmitter`\\\u003C`boolean`\\>\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n> `get` **directives**(): `W`\\[`\"directives\"`\\]\n\nRetrieves the widget directives\n\n##### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n> `get` **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nRetrieves the widget state as an Angular [Signal](https://angular.dev/api/core/Signal)\n\n##### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n\n### Methods\n\n#### ngAfterViewInit\n\n> **ngAfterViewInit**(): `void`\n\nA callback method that is invoked immediately after\nAngular has completed initialization of a component's view.\nIt is invoked only once when the view is instantiated.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterViewInit.ngAfterViewInit`\n","AccordionItemComponent",{"source":25,"name":26},"## interface_AccordionItemContext\nRepresents the context for an accordion item within the accordion component.\n\n### Properties\n\n#### api\n\n> **api**: [`AccordionItemApi`](#accordionitemapi)\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`AccordionItemDirectives`](#accordionitemdirectives)\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../types#angularstate)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nthe state of the widget\n","AccordionItemContext",{"source":28,"name":29},"## constant_accordionItemDefaultSlotStructure\n> `const` **accordionItemDefaultSlotStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nRepresents the default slot structure for an accordion item.\n","accordionItemDefaultSlotStructure",{"source":31,"name":32},"## interface_AccordionItemDirectives\nInterface representing the directives used in an accordion item.\n\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../types#directive)\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../types#directive)\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../types#directive)\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../types#directive)\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../types#directive)\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../types#directive)\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../types#directive)\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":34,"name":35},"## interface_AccordionItemProps\nRepresents the properties for an Accordion item component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":37,"name":38},"## interface_AccordionItemState\nRepresents the state of an accordion item, extending the core item state and additional properties specific to the accordion item.\n\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":40,"name":41},"## class_AccordionItemStructureDirective\nDirective that represents the structure of an accordion item.\n\nThis directive provides a template reference for the [AccordionItemContext](#accordionitemcontext).\nIt also includes a static method to guard the template context type.\n","AccordionItemStructureDirective",{"source":43,"name":44},"## type alias_AccordionItemWidget\n> **AccordionItemWidget**: [`Widget`](../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n\nRepresents a widget for an accordion item.\n","AccordionItemWidget",{"source":46,"name":47},"## interface_AccordionProps\nRepresents the state of an AccordionItem component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":49,"name":50},"## interface_AccordionState\nRepresents the state of an Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":52,"name":53},"## type alias_AccordionWidget\n> **AccordionWidget**: [`Widget`](../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), [`AccordionDirectives`](#accordiondirectives)\\>\n\nRepresents an Accordion widget type.\n","AccordionWidget",{"source":55,"name":56},"## function_createAccordion\n> **createAccordion**(`props`?): [`AccordionWidget`](#accordionwidget)\n\nCreate an AccordionWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\n### Returns\n\n[`AccordionWidget`](#accordionwidget)\n\nan AccordionWidget\n","createAccordion",{"source":58,"name":59},"## function_createAccordionItem\n> **createAccordionItem**(`props`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreate an AccordionItemWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\nan AccordionItemWidget\n","createAccordionItem",{"source":61,"name":62},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`?, `accordionItemProps`?, `accordionConfig`?, `accordionValidator`?): [`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n• **itemFactory?**: [`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nthe item factory\n\n• **accordionItemProps?**: `string`[]\n\nthe list of item props\n\n• **accordionConfig?**: [`AccordionProps`](#accordionprops)\n\nthe default accordion config\n\n• **accordionValidator?**: [`ConfigValidator`](../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":64,"name":65},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig","API accordion","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
