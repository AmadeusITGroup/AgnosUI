{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":152},true,[3,6,9,12,59,102,125],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/toast","components/toast","Toast",{"path":56,"slug":57,"label":58},"api/angular/bootstrap/components/tree","components/tree","Tree",{"title":60,"path":-1,"submenu":61},"Services",[62,66,70,74,78,82,86,90,94,98],{"path":63,"slug":64,"label":65},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":99,"slug":100,"label":101},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":103,"path":-1,"submenu":104},"Transitions",[105,109,113,117,121],{"path":106,"slug":107,"label":108},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":122,"slug":123,"label":124},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":126,"path":-1,"submenu":127},"Utils",[128,132,136,140,144,148],{"path":129,"slug":130,"label":131},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":149,"slug":150,"label":151},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":66,"import":67},"components/accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63],{"source":4,"name":5},"## interface_AccordionApi\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:416\n\nInterface representing the API for an accordion component.\n\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:430\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:449\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:423\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:444\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:454\n\nCreates a new accordionItem.\n\n##### Parameters\n\n###### itemConfig?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:437\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":7,"name":8},"## class_AccordionBodyDirective\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:23](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L23)\n\nDirective to represent the body of an accordion item.\n\nThis directive provides a template reference for the [AccordionItemContext](#accordionitemcontext).\n","AccordionBodyDirective",{"source":10,"name":11},"## class_AccordionDirective\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:306](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L306)\n\nDirective for creating an accordion component.\n\nThis directive extends the `BaseWidgetDirective` and provides various inputs and outputs\nto customize the behavior and appearance of the accordion and its items.\n\n### Properties\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:319](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L319)\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> `readonly` **closeOthers**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:312](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L312)\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> `readonly` **itemAnimated**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:357](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L357)\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> `readonly` **itemBodyClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:413](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L413)\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> `readonly` **itemBodyContainerClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:406](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L406)\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> `readonly` **itemButtonClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:398](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L398)\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> `readonly` **itemClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:384](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L384)\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> `readonly` **itemDestroyOnHide**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:350](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L350)\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> `readonly` **itemHeaderClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:391](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L391)\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> `readonly` **itemHeadingTag**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:420](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L420)\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHidden\n\n> `readonly` **itemHidden**: `OutputEmitterRef`\\\u003C`string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:343](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L343)\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### itemShown\n\n> `readonly` **itemShown**: `OutputEmitterRef`\\\u003C`string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:331](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L331)\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### itemStructure\n\n> `readonly` **itemStructure**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:377](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L377)\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> `readonly` **itemTransition**: `InputSignal`\\\u003C`undefined` \\| [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:367](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L367)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\nDefined in: [angular/headless/src/utils/widget.ts:140](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/utils/widget.ts#L140)\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\nDefined in: [angular/headless/src/utils/widget.ts:156](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/utils/widget.ts#L156)\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nDefined in: [angular/headless/src/utils/widget.ts:148](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/utils/widget.ts#L148)\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","AccordionDirective",{"source":13,"name":14},"## interface_AccordionDirectives\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:460\n\nInterface representing the directives used in the Accordion component.\n\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:465\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":16,"name":17},"## class_AccordionHeaderDirective\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:36](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L36)\n\nDirective to be used as an accordion header.\n\nThis directive provides a template reference for the [AccordionItemContext](#accordionitemcontext).\n","AccordionHeaderDirective",{"source":19,"name":20},"## interface_AccordionItemApi\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:471\n\nInterface representing the API for an accordion item.\n\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:476\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:482\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:492\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:487\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":22,"name":23},"## class_AccordionItemComponent\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:163](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L163)\n\nAccordionItemComponent is a component that represents an item within an accordion.\n\n### Implements\n\n- [`AfterViewInit`](https://angular.dev/api/core/AfterViewInit)\n\n### Properties\n\n#### animated\n\n> `readonly` **animated**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:222](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L222)\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> `readonly` **bodyClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:239](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L239)\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> `readonly` **bodyContainerClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:235](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L235)\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> `readonly` **buttonClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:230](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L230)\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> `readonly` **children**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:176](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L176)\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:204](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L204)\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> `readonly` **destroyOnHide**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:208](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L208)\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> `readonly` **disabled**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:213](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L213)\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> `readonly` **header**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:169](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L169)\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> `readonly` **headerClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:226](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L226)\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> `readonly` **headingTag**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:243](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L243)\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### hidden\n\n> `readonly` **hidden**: `OutputEmitterRef`\\\u003C`void`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:251](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L251)\n\nAn event fired when an item is hidden.\n\n***\n\n#### id\n\n> `readonly` **id**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:193](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L193)\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shown\n\n> `readonly` **shown**: `OutputEmitterRef`\\\u003C`void`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:247](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L247)\n\nAn event fired when an item is shown.\n\n***\n\n#### structure\n\n> `readonly` **structure**: `InputSignal`\\\u003C[`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:187](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L187)\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> `readonly` **transition**: `InputSignal`\\\u003C`undefined` \\| [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:197](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L197)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> `readonly` **visible**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:218](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L218)\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n\n***\n\n#### visibleChange\n\n> `readonly` **visibleChange**: `OutputEmitterRef`\\\u003C`boolean`\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:257](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L257)\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\nDefined in: [angular/headless/src/utils/widget.ts:140](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/utils/widget.ts#L140)\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\nDefined in: [angular/headless/src/utils/widget.ts:156](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/utils/widget.ts#L156)\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nDefined in: [angular/headless/src/utils/widget.ts:148](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/utils/widget.ts#L148)\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n\n### Methods\n\n#### ngAfterViewInit\n\n> **ngAfterViewInit**(): `void`\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:286](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L286)\n\nA callback method that is invoked immediately after\nAngular has completed initialization of a component's view.\nIt is invoked only once when the view is instantiated.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterViewInit.ngAfterViewInit`\n","AccordionItemComponent",{"source":25,"name":26},"## interface_AccordionItemContext\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:18\n\nRepresents the context for an accordion item within the accordion component.\n\n### Properties\n\n#### api\n\n> **api**: [`AccordionItemApi`](#accordionitemapi)\n\nDefined in: [core/src/types.ts:75](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/core/src/types.ts#L75)\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`AccordionItemDirectives`](#accordionitemdirectives)\n\nDefined in: [core/src/types.ts:71](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/core/src/types.ts#L71)\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../types#angularstate)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nDefined in: [angular/headless/src/types.ts:119](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/headless/src/types.ts#L119)\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","AccordionItemContext",{"source":28,"name":29},"## constant_accordionItemDefaultSlotStructure\n> `const` **accordionItemDefaultSlotStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:142](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L142)\n\nRepresents the default slot structure for an accordion item.\n","accordionItemDefaultSlotStructure",{"source":31,"name":32},"## interface_AccordionItemDirectives\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:498\n\nInterface representing the directives used in an accordion item.\n\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:531\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:536\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:521\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:509\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:515\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:541\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:503\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:526\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":34,"name":35},"## interface_AccordionItemProps\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:264\n\nRepresents the properties for an Accordion item component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:269\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:333\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:328\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:322\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:362\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:345\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:279\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:307\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:369\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:317\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:338\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:312\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:289\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:284\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:296\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:355\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:274\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:301\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":37,"name":38},"## interface_AccordionItemState\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:179\n\nRepresents the state of an accordion item, extending the core item state and additional properties specific to the accordion item.\n\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:222\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:217\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:211\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:251\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:234\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:196\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:258\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:206\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:227\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:201\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:185\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:244\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:190\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":40,"name":41},"## class_AccordionItemStructureDirective\nDefined in: [angular/bootstrap/src/components/accordion/accordion.component.ts:50](https://github.com/AmadeusITGroup/AgnosUI/blob/863721bb9c0a8edf231e6372cee0ac10a1361a9b/angular/bootstrap/src/components/accordion/accordion.component.ts#L50)\n\nDirective that represents the structure of an accordion item.\n\nThis directive provides a template reference for the [AccordionItemContext](#accordionitemcontext).\nIt also includes a static method to guard the template context type.\n","AccordionItemStructureDirective",{"source":43,"name":44},"## type alias_AccordionItemWidget\n> **AccordionItemWidget**: [`Widget`](../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:377\n\nRepresents a widget for an accordion item.\n","AccordionItemWidget",{"source":46,"name":47},"## interface_AccordionProps\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:51\n\nRepresents the state of an AccordionItem component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:156\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:68\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:106\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:142\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:135\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:127\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:113\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:99\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:120\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:149\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:166\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../services/transitions/baseTransitions#transitionfn)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:61\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:92\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:80\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":49,"name":50},"## interface_AccordionState\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:23\n\nRepresents the state of an Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:35\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:45\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:28\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":52,"name":53},"## type alias_AccordionWidget\n> **AccordionWidget**: [`Widget`](../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), [`AccordionDirectives`](#accordiondirectives)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:174\n\nRepresents an Accordion widget type.\n","AccordionWidget",{"source":55,"name":56},"## function_createAccordion\n> **createAccordion**(`props`?): [`AccordionWidget`](#accordionwidget)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:396\n\nCreate an AccordionWidget with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\n### Returns\n\n[`AccordionWidget`](#accordionwidget)\n\nan AccordionWidget\n","createAccordion",{"source":58,"name":59},"## function_createAccordionItem\n> **createAccordionItem**(`props`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:386\n\nCreate an AccordionItemWidget with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\nan AccordionItemWidget\n","createAccordionItem",{"source":61,"name":62},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`?, `accordionItemProps`?, `accordionConfig`?, `accordionValidator`?): [`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:410\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n#### itemFactory?\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nthe item factory\n\n#### accordionItemProps?\n\n`string`[]\n\nthe list of item props\n\n#### accordionConfig?\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n\n#### accordionValidator?\n\n[`ConfigValidator`](../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":64,"name":65},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\nDefined in: angular/bootstrap/src/components/accordion/accordion.gen.ts:10\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig","API accordion","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
