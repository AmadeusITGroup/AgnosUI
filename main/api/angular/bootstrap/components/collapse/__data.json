{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":148},true,[3,6,9,12,55,98,121],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/toast","components/toast","Toast",{"title":56,"path":-1,"submenu":57},"Services",[58,62,66,70,74,78,82,86,90,94],{"path":59,"slug":60,"label":61},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":63,"slug":64,"label":65},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":99,"path":-1,"submenu":100},"Transitions",[101,105,109,113,117],{"path":102,"slug":103,"label":104},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":106,"slug":107,"label":108},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":122,"path":-1,"submenu":123},"Utils",[124,128,132,136,140,144],{"path":125,"slug":126,"label":127},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":129,"slug":130,"label":131},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":27,"import":28,"pageMeta":29},"components/collapse",[3,6,9,12,15,18,21,24],{"source":4,"name":5},"## interface_CollapseApi\n### Methods\n\n#### close\n\n> **close**(): `void`\n\nTriggers collapse closing programmatically.\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nTriggers the collapse content to be displayed for the user.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nToggles the collapse content visibility.\n\n##### Returns\n\n`void`\n","CollapseApi",{"source":7,"name":8},"## class_CollapseDirective\n### Constructors\n\n#### new CollapseDirective\n\n> **new CollapseDirective**(): [`CollapseDirective`](#collapsedirective)\n\n##### Returns\n\n[`CollapseDirective`](#collapsedirective)\n\n### Properties\n\n#### _widget\n\n> `readonly` **\\_widget**: [`AngularWidget`](../types#angularwidget)\\\u003C`CollapseWidget`\\>\n\n***\n\n#### animated\n\n> **animated**: `undefined` \\| `boolean`\n\nIf `true`, collapse closing and opening will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `undefined` \\| `boolean`\n\nIf `true`, collapse opening will be animated at init time.\n\n##### Default Value\n\n`false`\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### hidden\n\n> **hidden**: `EventEmitter`\\\u003C`void`\\>\n\nCallback called when the collapse is hidden.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### horizontal\n\n> **horizontal**: `undefined` \\| `boolean`\n\nIf `true`, collapse will be done horizontally.\n\n##### Default Value\n\n`false`\n\n***\n\n#### shown\n\n> **shown**: `EventEmitter`\\\u003C`void`\\>\n\nCallback called when the collapse is shown.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### visible\n\n> **visible**: `undefined` \\| `boolean`\n\nIf `true` the collapse is visible to the user\n\n##### Default Value\n\n`true`\n\n***\n\n#### visibleChange\n\n> **visibleChange**: `EventEmitter`\\\u003C`boolean`\\>\n\nCallback called when the collapse visibility changed.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n> `get` **directives**(): `W`\\[`\"directives\"`\\]\n\nRetrieves the widget directives\n\n##### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n> `get` **state**(): [`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../types#widgetstate)\\\u003C`W`\\>\\>\n\nRetrieves the widget state as an Angular Signal\n\n##### Returns\n\n[`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../types#widgetstate)\\\u003C`W`\\>\\>\n\nthe widget state\n\n### Methods\n\n#### ngOnChanges\n\n> **ngOnChanges**(`changes`): `void`\n\n##### Parameters\n\n• **changes**: `SimpleChanges`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### ngOnInit\n\n> **ngOnInit**(): `void`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n","CollapseDirective",{"source":10,"name":11},"## interface_CollapseDirectives\n### Properties\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../types#directive)\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","CollapseDirectives",{"source":13,"name":14},"## interface_CollapseProps\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, collapse closing and opening will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\nIf `true`, collapse opening will be animated at init time.\n\n##### Default Value\n\n`false`\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### horizontal\n\n> **horizontal**: `boolean`\n\nIf `true`, collapse will be done horizontally.\n\n##### Default Value\n\n`false`\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nCallback called when the collapse is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nCallback called when the collapse is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nCallback called when the collapse visibility changed.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the collapse is visible to the user\n\n##### Default Value\n\n`true`\n","CollapseProps",{"source":16,"name":17},"## interface_CollapseState\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\nIs `true` when the collapse is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### horizontal\n\n> **horizontal**: `boolean`\n\nIf `true`, collapse will be done horizontally.\n\n##### Default Value\n\n`false`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the collapse is visible to the user\n\n##### Default Value\n\n`true`\n","CollapseState",{"source":19,"name":20},"## type alias_CollapseWidget\n> **CollapseWidget**: [`Widget`](../types#widget)\\\u003C[`CollapseProps`](#collapseprops), [`CollapseState`](#collapsestate), [`CollapseApi`](#collapseapi), [`CollapseDirectives`](#collapsedirectives)\\>\n","CollapseWidget",{"source":22,"name":23},"## function_createCollapse\n> **createCollapse**(`config`?): [`CollapseWidget`](#collapsewidget)\n\nCreate an CollapseWidget with given config props\n\n### Parameters\n\n• **config?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`CollapseProps`](#collapseprops)\\>\n\nan optional collapse config\n\n### Returns\n\n[`CollapseWidget`](#collapsewidget)\n\nan CollapseWidget\n","createCollapse",{"source":25,"name":26},"## function_getCollapseDefaultConfig\n> **getCollapseDefaultConfig**(): [`CollapseProps`](#collapseprops)\n\nRetrieve a shallow copy of the default collapse config\n\n### Returns\n\n[`CollapseProps`](#collapseprops)\n\nthe default collapse config\n","getCollapseDefaultConfig","API collapse","@agnos-ui/angular-bootstrap",{"description":30},"API Documentation for components collapse"],"uses":{"params":["framework","type","slug"]}}]}
