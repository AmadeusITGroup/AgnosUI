{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":148},true,[3,6,9,12,55,98,121],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/select","components/select","Select",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/toast","components/toast","Toast",{"title":56,"path":-1,"submenu":57},"Services",[58,62,66,70,74,78,82,86,90,94],{"path":59,"slug":60,"label":61},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":63,"slug":64,"label":65},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":67,"slug":68,"label":69},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":99,"path":-1,"submenu":100},"Transitions",[101,105,109,113,117],{"path":102,"slug":103,"label":104},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":106,"slug":107,"label":108},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":110,"slug":111,"label":112},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":114,"slug":115,"label":116},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":122,"path":-1,"submenu":123},"Utils",[124,128,132,136,140,144],{"path":125,"slug":126,"label":127},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":129,"slug":130,"label":131},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":133,"slug":134,"label":135},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":137,"slug":138,"label":139},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":33,"import":34},"components/rating",[3,6,9,12,15,18,21,24,27,30],{"source":4,"name":5},"## function_createRating\n> **createRating**(`props`?): [`RatingWidget`](#ratingwidget)\n\nCreate a RatingWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`RatingProps`](#ratingprops)\\>\n\n### Returns\n\n[`RatingWidget`](#ratingwidget)\n\na RatingWidget\n","createRating",{"source":7,"name":8},"## function_getRatingDefaultConfig\n> **getRatingDefaultConfig**(): [`RatingProps`](#ratingprops)\n\nRetrieve a shallow copy of the default Rating config\n\n### Returns\n\n[`RatingProps`](#ratingprops)\n\nthe default Rating config\n","getRatingDefaultConfig",{"source":10,"name":11},"## interface_RatingApi\nInterface representing the API that can be performed on a rating component.\n\n### Methods\n\n#### leave\n\n> **leave**(): `void`\n\nLeave the rating, resetting the visible rating to the rating value and triggering the onLeave callback\n\n##### Returns\n\n`void`\n\n***\n\n#### setHoveredRating\n\n> **setHoveredRating**(`index`): `void`\n\nSets the hovered rating value.\n\n##### Parameters\n\n• **index**: `number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n\n***\n\n#### setRating\n\n> **setRating**(`index`): `void`\n\nSets the rating value.\n\n##### Parameters\n\n• **index**: `number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n","RatingApi",{"source":13,"name":14},"## class_RatingComponent\nThe `RatingComponent` is an Angular component that allows users to provide a rating.\nIt extends `BaseWidgetDirective` and implements `ControlValueAccessor` to integrate with Angular forms.\n\n### Implements\n\n- [`ControlValueAccessor`](https://angular.dev/api/forms/ControlValueAccessor)\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `undefined` \\| `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: `undefined` \\| (`rating`, `maxRating`) => `string`\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Param\n\nCurrent rating value.\n\n##### Param\n\nmaxRating value.\n\n##### Default Value\n\n```ts\n(rating: number, maxRating: number) => `${rating} out of ${maxRating}`\n```\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `undefined` \\| `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### hover\n\n> **hover**: `EventEmitter`\\\u003C`number`\\>\n\nAn event emitted when the user is hovering over a given rating.\n\nEvent payload is equal to the rating being hovered over.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### leave\n\n> **leave**: `EventEmitter`\\\u003C`number`\\>\n\nAn event emitted when the user stops hovering over a given rating.\n\nEvent payload is equal to the rating of the last item being hovered over.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### maxRating\n\n> **maxRating**: `undefined` \\| `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### rating\n\n> **rating**: `undefined` \\| `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### ratingChange\n\n> **ratingChange**: `EventEmitter`\\\u003C`number`\\>\n\nAn event emitted when the rating is changed.\n\nEvent payload is equal to the newly selected rating.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### readonly\n\n> **readonly**: `undefined` \\| `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `undefined` \\| `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### tabindex\n\n> **tabindex**: `undefined` \\| `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nRetrieves the widget state as an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n\n### Methods\n\n#### registerOnChange\n\n> **registerOnChange**(`fn`): `void`\n\n##### Parameters\n\n• **fn**\n\nThe callback function to register\n\n##### Returns\n\n`void`\n\n##### Description\n\nRegisters a callback function that is called when the control's value\nchanges in the UI.\n\nThis method is called by the forms API on initialization to update the form\nmodel when values propagate from the view to the model.\n\nWhen implementing the `registerOnChange` method in your own value accessor,\nsave the given function so your class calls it at the appropriate time.\n\n##### Usage Notes\n\n#### Store the change function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnChange(fn: (_: any) => void): void {\n  this._onChange = fn;\n}\n```\n\nWhen the value changes in the UI, call the registered\nfunction to allow the forms API to update itself:\n\n```ts\nhost: {\n   '(change)': '_onChange($event.target.value)'\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.registerOnChange`\n\n***\n\n#### registerOnTouched\n\n> **registerOnTouched**(`fn`): `void`\n\n##### Parameters\n\n• **fn**\n\nThe callback function to register\n\n##### Returns\n\n`void`\n\n##### Description\n\nRegisters a callback function that is called by the forms API on initialization\nto update the form model on blur.\n\nWhen implementing `registerOnTouched` in your own value accessor, save the given\nfunction so your class calls it when the control should be considered\nblurred or \"touched\".\n\n##### Usage Notes\n\n#### Store the callback function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnTouched(fn: any): void {\n  this._onTouched = fn;\n}\n```\n\nOn blur (or equivalent), your class should call the registered function to allow\nthe forms API to update itself:\n\n```ts\nhost: {\n   '(blur)': '_onTouched()'\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.registerOnTouched`\n\n***\n\n#### setDisabledState\n\n> **setDisabledState**(`disabled`): `void`\n\n##### Parameters\n\n• **disabled**: `boolean`\n\n##### Returns\n\n`void`\n\n##### Description\n\nFunction that is called by the forms API when the control status changes to\nor from 'DISABLED'. Depending on the status, it enables or disables the\nappropriate DOM element.\n\n##### Usage Notes\n\nThe following is an example of writing the disabled property to a native DOM element:\n\n```ts\nsetDisabledState(isDisabled: boolean): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.setDisabledState`\n\n***\n\n#### writeValue\n\n> **writeValue**(`value`): `void`\n\n##### Parameters\n\n• **value**: `any`\n\n##### Returns\n\n`void`\n\n##### Description\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n##### Usage Notes\n\n#### Write a value to the element\n\nThe following example writes a value to the native DOM element.\n\n```ts\nwriteValue(value: any): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.writeValue`\n","RatingComponent",{"source":16,"name":17},"## interface_RatingDirectives\nInterface representing directives for a rating component.\n\n### Properties\n\n#### containerDirective\n\n> **containerDirective**: [`Directive`](../types#directive)\n\nA directive to be applied to the main container\nThis will handle the keydown, mouseleave, tabindex and aria attributes\n\n***\n\n#### starDirective\n\n> **starDirective**: [`Directive`](../types#directive)\\\u003C`object`\\>\n\nA directive to be applied on each star element\n\n##### Type declaration\n\n###### index\n\n> **index**: `number`\n","RatingDirectives",{"source":19,"name":20},"## interface_RatingProps\nRepresents the properties for the Rating component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: (`rating`, `maxRating`) => `string`\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Parameters\n\n• **rating**: `number`\n\nCurrent rating value.\n\n• **maxRating**: `number`\n\nmaxRating value.\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(rating: number, maxRating: number) => `${rating} out of ${maxRating}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### onHover\n\n> **onHover**: (`rating`) => `void`\n\nAn event emitted when the user is hovering over a given rating.\n\nEvent payload is equal to the rating being hovered over.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onLeave\n\n> **onLeave**: (`rating`) => `void`\n\nAn event emitted when the user stops hovering over a given rating.\n\nEvent payload is equal to the rating of the last item being hovered over.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onRatingChange\n\n> **onRatingChange**: (`rating`) => `void`\n\nAn event emitted when the rating is changed.\n\nEvent payload is equal to the newly selected rating.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### rating\n\n> **rating**: `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n","RatingProps",{"source":22,"name":23},"## class_RatingStarDirective\nDirective to represent a rating star.\n\nThis directive uses a template reference to render the [StarContext](#starcontext).\n","RatingStarDirective",{"source":25,"name":26},"## interface_RatingState\nRepresents the state of a rating component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `string`\n\nthe aria value of the rating\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\nis the rating interactive i.e. listening to hover, click and keyboard events\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### rating\n\n> **rating**: `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### stars\n\n> **stars**: [`StarContext`](#starcontext)[]\n\nthe list of stars\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### visibleRating\n\n> **visibleRating**: `number`\n\nthe visible value of the rating (it changes when hovering over the rating even though the real value did not change)\n","RatingState",{"source":28,"name":29},"## type alias_RatingWidget\n> **RatingWidget**: [`Widget`](../types#widget)\\\u003C[`RatingProps`](#ratingprops), [`RatingState`](#ratingstate), [`RatingApi`](#ratingapi), [`RatingDirectives`](#ratingdirectives)\\>\n\nRepresents a Rating Widget component.\n","RatingWidget",{"source":31,"name":32},"## interface_StarContext\nRepresents the context for a star in a rating component.\n\n### Properties\n\n#### fill\n\n> **fill**: `number`\n\nindicates how much the current star is filled, from 0 to 100\n\n***\n\n#### index\n\n> **index**: `number`\n\nthe position of the star in the rating\n","StarContext","API rating","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
