{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":168},true,[3,6,9,12,67,114,137],{"title":4,"path":5,"submenu":-1},"Types","api/angular/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/angular/bootstrap/config",{"title":10,"path":11,"submenu":-1},"Slot","api/angular/bootstrap/slot",{"title":13,"path":-1,"submenu":14},"Components",[15,19,23,27,31,35,39,43,47,51,55,59,63],{"path":16,"slug":17,"label":18},"api/angular/bootstrap/components/accordion","components/accordion","Accordion",{"path":20,"slug":21,"label":22},"api/angular/bootstrap/components/alert","components/alert","Alert",{"path":24,"slug":25,"label":26},"api/angular/bootstrap/components/carousel","components/carousel","Carousel",{"path":28,"slug":29,"label":30},"api/angular/bootstrap/components/collapse","components/collapse","Collapse",{"path":32,"slug":33,"label":34},"api/angular/bootstrap/components/drawer","components/drawer","Drawer",{"path":36,"slug":37,"label":38},"api/angular/bootstrap/components/modal","components/modal","Modal",{"path":40,"slug":41,"label":42},"api/angular/bootstrap/components/pagination","components/pagination","Pagination",{"path":44,"slug":45,"label":46},"api/angular/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":48,"slug":49,"label":50},"api/angular/bootstrap/components/rating","components/rating","Rating",{"path":52,"slug":53,"label":54},"api/angular/bootstrap/components/select","components/select","Select",{"path":56,"slug":57,"label":58},"api/angular/bootstrap/components/slider","components/slider","Slider",{"path":60,"slug":61,"label":62},"api/angular/bootstrap/components/toast","components/toast","Toast",{"path":64,"slug":65,"label":66},"api/angular/bootstrap/components/tree","components/tree","Tree",{"title":68,"path":-1,"submenu":69},"Services",[70,74,78,82,86,90,94,98,102,106,110],{"path":71,"slug":72,"label":73},"api/angular/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":75,"slug":76,"label":77},"api/angular/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":79,"slug":80,"label":81},"api/angular/bootstrap/services/focusElement","services/focusElement","focusElement",{"path":83,"slug":84,"label":85},"api/angular/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":87,"slug":88,"label":89},"api/angular/bootstrap/services/hash","services/hash","hash",{"path":91,"slug":92,"label":93},"api/angular/bootstrap/services/intersection","services/intersection","intersection",{"path":95,"slug":96,"label":97},"api/angular/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":99,"slug":100,"label":101},"api/angular/bootstrap/services/navManager","services/navManager","navManager",{"path":103,"slug":104,"label":105},"api/angular/bootstrap/services/portal","services/portal","portal",{"path":107,"slug":108,"label":109},"api/angular/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":111,"slug":112,"label":113},"api/angular/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":115,"path":-1,"submenu":116},"Transitions",[117,121,125,129,133],{"path":118,"slug":119,"label":120},"api/angular/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":122,"slug":123,"label":124},"api/angular/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":126,"slug":127,"label":128},"api/angular/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":130,"slug":131,"label":132},"api/angular/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":134,"slug":135,"label":136},"api/angular/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":138,"path":-1,"submenu":139},"Utils",[140,144,148,152,156,160,164],{"path":141,"slug":142,"label":143},"api/angular/bootstrap/utils/coercion","utils/coercion","coercion",{"path":145,"slug":146,"label":147},"api/angular/bootstrap/utils/directive","utils/directive","directive",{"path":149,"slug":150,"label":151},"api/angular/bootstrap/utils/func","utils/func","func",{"path":153,"slug":154,"label":155},"api/angular/bootstrap/utils/stores","utils/stores","stores",{"path":157,"slug":158,"label":159},"api/angular/bootstrap/utils/widget","utils/widget","widget",{"path":161,"slug":162,"label":163},"api/angular/bootstrap/utils/writables","utils/writables","writables",{"path":165,"slug":166,"label":167},"api/angular/bootstrap/utils/zone","utils/zone","zone","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":90,"import":91},"types",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87],{"source":4,"name":5},"## type alias_AngularState\n> **AngularState**\\\u003C`W`\\> = `{ [key in keyof WidgetState\u003CW>]: Signal\u003CWidgetState\u003CW>[key]> }`\n\n\nRepresents the state of an Angular widget, where each key in the widget's state\nis mapped to a Signal of the corresponding state value.\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](#widget)\n\nThe type of the widget.\n","AngularState",{"source":7,"name":8},"## interface_AngularWidget\n\nRepresents an Angular widget that extends a base widget type.\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](#widget)\n\nThe type of the base widget.\n\n### Properties\n\n#### api\n\n> **api**: `W`\\[`\"api\"`\\]\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: `W`\\[`\"directives\"`\\]\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### initialized\n\n> **initialized**: [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\\u003C`void`\\>\n\n\nA promise that resolves when the widget is initialized\n\n***\n\n#### ngInit\n\n> **ngInit**: () => `void`\n\n\nA function to initialize the Angular widget.\n\n##### Returns\n\n`void`\n\n***\n\n#### state\n\n> **state**: [`AngularState`](#angularstate)\\\u003C`W`\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n***\n\n#### updateSlots\n\n> **updateSlots**: () => `void`\n\n\nA utility function to update the slot properties.\n\n##### Returns\n\n`void`\n\n### Methods\n\n#### patch\n\n> **patch**(`parameters`): `void`\n\n\nModify the parameter values, and recalculate the stores accordingly\n\n##### Parameters\n\n###### parameters\n\n`object`\n\n##### Returns\n\n`void`\n","AngularWidget",{"source":10,"name":11},"## type alias_AttributeValue\n> **AttributeValue** = `string` \\| `number` \\| `boolean` \\| `undefined`\n\n\nRepresents a value that can be assigned to an attribute.\n","AttributeValue",{"source":13,"name":14},"## constant_BS_CONTEXTUAL_CLASSES\n> `const` **BS\\_CONTEXTUAL\\_CLASSES**: [`BSContextualClass`](#bscontextualclass)[]\n\n\nList of all contextual classes, can be used to validate that a specific string is a [BSContextualClass](#bscontextualclass)\n","BS_CONTEXTUAL_CLASSES",{"source":16,"name":17},"## type alias_BSContextualClass\n> **BSContextualClass** = `\"success\"` \\| `\"info\"` \\| `\"warning\"` \\| `\"danger\"` \\| `\"primary\"` \\| `\"secondary\"` \\| `\"light\"` \\| `\"dark\"`\n\n\nRepresents the contextual classes available in Bootstrap.\nThese classes are used to apply different styles to elements\nbased on the context or state they represent.\n\nPossible values are:\n- 'success': Indicates a successful or positive action.\n- 'info': Represents informational messages or actions.\n- 'warning': Denotes a warning that might need attention.\n- 'danger': Signifies a dangerous or potentially negative action.\n- 'primary': Primary action or information.\n- 'secondary': Secondary action or information.\n- 'light': Light background or context.\n- 'dark': Dark background or context.\n","BSContextualClass",{"source":19,"name":20},"## class_ComponentTemplate\n\nRepresents a template for a component with specified properties.\n\n### Param\n\nThe component type that contains the template.\n\n### Param\n\nThe key in the component that maps to the template reference.\n\n### Type Parameters\n\n#### Props\n\n`Props`\n\nThe type of properties that the template accepts.\n\n#### K\n\n`K` *extends* `string`\n\nThe key in the template object that maps to the template reference.\n\n#### T\n\n`T` *extends* `{ [key in K]: Signal\u003CTemplateRef\u003CProps>> }`\n\nAn object type where each key of type K maps to a TemplateRef of Props.\n","ComponentTemplate",{"source":22,"name":23},"## type alias_ConfigValidator\n> **ConfigValidator**\\\u003C`T`\\> = \\{ \\[K in keyof T\\]: WritableWithDefaultOptions\\\u003CT\\[K\\]\\> \\| undefined \\}\n\n\nRepresents a type that validates a configuration object.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `object`\n\nThe type of the configuration object to be validated.\n\nThis type maps each key of the configuration object `T` to an optional\n`WritableWithDefaultOptions` type, allowing for partial validation.\n","ConfigValidator",{"source":25,"name":26},"## type alias_Directive\n> **Directive**\\\u003C`T`, `U`\\> = (`node`, `args`) => `void` \\| \\{ `destroy?`: () => `void`; `update?`: (`args`) => `void`; \\}\n\n\nRepresents a directive function that can be applied to an SSRHTMLElement.\n\n### Type Parameters\n\n#### T\n\n`T` = `void`\n\nThe type of the arguments passed to the directive.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n\n### Parameters\n\n#### node\n\n`U`\n\nThe SSRHTMLElement to which the directive is applied.\n\n#### args\n\n`T`\n\nThe arguments passed to the directive.\n\n### Returns\n\n`void` \\| \\{ `destroy?`: () => `void`; `update?`: (`args`) => `void`; \\}\n\nAn optional object that may contain:\n- `update`: A function to update the directive with new arguments.\n- `destroy`: A function to clean up when the directive is no longer needed.\n","Directive",{"source":28,"name":29},"## type alias_DirectiveAndParam\n> **DirectiveAndParam**\\\u003C`T`, `U`\\> = \\[[`Directive`](#directive)\\\u003C`T`, `U`\\>, `T`\\]\n\n\nRepresents a tuple containing a directive and its associated parameter.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the parameter associated with the directive.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\nThe type of the SSRHTMLElement, defaults to SSRHTMLElement.\n","DirectiveAndParam",{"source":31,"name":32},"## type alias_DirectivesAndOptParam\n> **DirectivesAndOptParam**\\\u003C`T`, `U`\\> = \\{ \\[K in keyof T\\]: Directive\\\u003Cvoid, U\\> \\| DirectiveAndParam\\\u003CT\\[K\\], U\\> \\}\n\n\nRepresents a mapping of directives and their optional parameters.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `any`[]\n\nAn array type representing the parameters for the directives.\n\n#### U\n\n`U` *extends* [`SSRHTMLElement`](#ssrhtmlelement) = [`SSRHTMLElement`](#ssrhtmlelement)\n\nThe type of the SSR HTML element, defaults to `SSRHTMLElement`.\n","DirectivesAndOptParam",{"source":34,"name":35},"## type alias_Extends\n> **Extends**\\\u003C`T`, `U`\\> = `T` *extends* `U` ? `1` : `0`\n\n\nA conditional type that checks if type `T` extends type `U`.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type to check.\n\n#### U\n\n`U`\n\nThe type to check against.\n\n### Returns\n\n`1` if `T` extends `U`, otherwise `0`.\n","Extends",{"source":37,"name":38},"## constant_FACTORY_WIDGET_NAME\n> `const` **FACTORY\\_WIDGET\\_NAME**: unique `symbol`\n\n\nA unique symbol representing a widget factory widget name.\n","FACTORY_WIDGET_NAME",{"source":40,"name":41},"## constant_INVALID_VALUE\n> `const` **INVALID\\_VALUE**: unique `symbol`\n\n\nA unique symbol representing an invalid value.\nThis can be used as a sentinel value to indicate that a variable or property\ndoes not hold a valid value.\n","INVALID_VALUE",{"source":43,"name":44},"## type alias_IsSlotContent\n> **IsSlotContent**\\\u003C`T`\\> = [`Extends`](#extends)\\\u003C`T`, [`SlotContent`](#slotcontent)\\\u003C`any`\\>\\> \\| [`Extends`](#extends)\\\u003C[`SlotContent`](#slotcontent)\\\u003C`any`\\>, `T`\\> *extends* `1` ? `T` : `0`\n\n\nType utility to determine if a given type `T` is or extends `SlotContent\u003Cany>`.\n\nThis type alias uses conditional types to check if `T` extends `SlotContent\u003Cany>` or if `SlotContent\u003Cany>` extends `T`.\nIf either condition is true, it resolves to `T`, otherwise it resolves to `0`.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type to be checked.\n","IsSlotContent",{"source":46,"name":47},"## type alias_NormalizeValue\n> **NormalizeValue**\\\u003C`T`\\> = (`value`) => `T` \\| *typeof* [`INVALID_VALUE`](#invalid_value)\n\n\nA type alias for a function that normalizes a value of type `T`.\nThe function takes a value of type `T` and returns either a normalized value of type `T`\nor a special constant `INVALID_VALUE` indicating that the value is invalid.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the value to be normalized.\n\n### Parameters\n\n#### value\n\n`T`\n\nThe value to be normalized.\n\n### Returns\n\n`T` \\| *typeof* [`INVALID_VALUE`](#invalid_value)\n\nThe normalized value of type `T` or `INVALID_VALUE` if the value is invalid.\n","NormalizeValue",{"source":49,"name":50},"## interface_PropsConfig\n\nInterface representing the configuration for properties.\n\n### Type Parameters\n\n#### U\n\n`U` *extends* `object`\n\nAn object type representing the properties.\n\n### Properties\n\n#### config?\n\n> `optional` **config**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`U`\\>\\> \\| [`ValuesOrReadableSignals`](#valuesorreadablesignals)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`U`\\>\\>\n\n\nEither a store of objects containing, for each property, the default value,\nor an object containing, for each property, either a store containing the default value or the default value itself.\n\n***\n\n#### props?\n\n> `optional` **props**: [`ValuesOrWritableSignals`](#valuesorwritablesignals)\\\u003C`U`\\>\n\n\nObject containing, for each property, either its initial value, or a store that will contain the value at any time.\nWhen the value of a property is undefined or invalid, the value from the config is used.\n","PropsConfig",{"source":52,"name":53},"## class_SlotComponent\n\nA directive representing a slot component that can be used to manage the state and context of a widget.\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](#widget)\n\nThe type of the widget that this slot component manages.\n\n### Properties\n\n#### api\n\n> `readonly` **api**: `InputSignal`\\\u003C`W`\\[`\"api\"`\\]\\>\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> `readonly` **directives**: `InputSignal`\\\u003C`W`\\[`\"directives\"`\\]\\>\n\n\ndirectives to be used on html elements in the template of the slot\n\n***\n\n#### slotContext\n\n> `readonly` **slotContext**: [`Signal`](https://angular.dev/api/core/Signal)\\\u003C\\{ `api`: `W`\\[`\"api\"`\\]; `directives`: `W`\\[`\"directives\"`\\]; `state`: [`AngularState`](#angularstate)\\\u003C`W`\\>; \\}\\>\n\n\nThe slot context, to be used when the slot component uses other slots.\n\n***\n\n#### state\n\n> `readonly` **state**: `InputSignal`\\\u003C[`AngularState`](#angularstate)\\\u003C`W`\\>\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","SlotComponent",{"source":55,"name":56},"## type alias_SlotContent\n> **SlotContent**\\\u003C`Props`\\> = `CoreSlotContent`\\\u003C`Props`\\> \\| [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`Props`\\> \\| [`Type`](https://angular.dev/api/core/Type)\\\u003C`unknown`\\> \\| [`ComponentTemplate`](#componenttemplate)\\\u003C`Props`, `any`, `any`\\>\n\n\nRepresents the content that can be used in a slot.\n\n### Type Parameters\n\n#### Props\n\n`Props` *extends* `object` = `object`\n\nThe type of the properties that the slot content can accept.\n\nThis type can be one of the following:\n- `undefined | null`: Nullish value\n- `string`: A static string\n- `(props: Props) => string`: A function that takes props as input and returns a string template\n- `TemplateRef\u003CProps>`: A reference to an Angular template with the specified properties.\n- `Type\u003Cunknown>`: A type representing an unknown component or directive.\n- `ComponentTemplate\u003CProps, any, any>`: A component template with the specified properties.\n","SlotContent",{"source":58,"name":59},"## interface_SSRHTMLElement\n\nRepresents a server-side rendered HTML element with limited functionality.\n\nThis interface extends a subset of the [HTMLElement](https://developer.mozilla.org/docs/Web/API/HTMLElement) interface, providing\nmethods to set and remove attributes, manipulate the element's classes, and\npartially manipulate the element's style.\n\nIt inherits the [setAttribute](https://developer.mozilla.org/docs/Web/API/Element/setAttribute) and [getAttribute](https://developer.mozilla.org/docs/Web/API/Element/getAttribute) methods from the [HTMLElement](https://developer.mozilla.org/docs/Web/API/HTMLElement) interface.\n\n### Properties\n\n#### classList\n\n> **classList**: [`Pick`](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\[`\"classList\"`\\], `\"add\"` \\| `\"remove\"` \\| `\"toggle\"`\\>\n\n\nObject allowing to manipulate the classes of the element.\n\n***\n\n#### style\n\n> **style**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C[`StyleKey`](#stylekey), [`StyleValue`](#stylevalue)\\>\\>\n\n\nObject allowing to manipulate the style of the element.\n","SSRHTMLElement",{"source":61,"name":62},"## type alias_StyleKey\n> **StyleKey** = [`Exclude`](https://www.typescriptlang.org/docs/handbook/utility-types.html#excludeuniontype-excludedmembers)\\\u003Ckeyof [`CSSStyleDeclaration`](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration), `\"length\"` \\| `\"item\"` \\| `\"parentRule\"` \\| `\"getPropertyValue\"` \\| `\"getPropertyPriority\"` \\| `\"setProperty\"` \\| `\"removeProperty\"` \\| *typeof* [`Symbol.iterator`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) \\| `number` \\| `\"cssText\"`\\>\n\n\nRepresents a key of the CSSStyleDeclaration interface, excluding certain properties and methods.\n\nThis is useful for scenarios where you need to work with CSS properties directly without\ndealing with the methods and other non-style properties of CSSStyleDeclaration.\n","StyleKey",{"source":64,"name":65},"## type alias_StyleValue\n> **StyleValue** = `string` \\| `undefined` \\| `null`\n\n\nRepresents a value that can be used for styling purposes.\n\n### Remarks\n\nThis type can be a string representing a style value, or it can be undefined or null.\nIt is useful for scenarios where a style value might be optional or not set.\n","StyleValue",{"source":67,"name":68},"## type alias_ValuesOrReadableSignals\n> **ValuesOrReadableSignals**\\\u003C`T`\\> = \\{ \\[K in keyof T\\]?: ReadableSignal\\\u003CT\\[K\\] \\| undefined\\> \\| T\\[K\\] \\}\n\n\nA type that maps each property of an object type `T` to either a `ReadableSignal` of that property type or the property type itself.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `object`\n\nThe object type whose properties are being mapped.\n","ValuesOrReadableSignals",{"source":70,"name":71},"## type alias_ValuesOrWritableSignals\n> **ValuesOrWritableSignals**\\\u003C`T`\\> = \\{ \\[K in keyof T\\]?: WritableSignal\\\u003CT\\[K\\] \\| undefined\\> \\| T\\[K\\] \\}\n\n\nA type that maps the properties of an object type `T` to either a `WritableSignal` of the property type or the property type itself.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `object`\n\nThe object type whose properties are being mapped.\n","ValuesOrWritableSignals",{"source":73,"name":74},"## interface_Widget\n\nRepresents a generic widget with reactive state, stores, and various functionalities.\n\n### Template\n\nThe type of the action handlers for user interactions.\n\n### Type Parameters\n\n#### Props\n\n`Props` *extends* `object` = `object`\n\nThe type of the properties that can be passed to the widget.\n\n#### State\n\n`State` *extends* `object` = `object`\n\nThe type of the state managed by the widget.\n\n#### Api\n\n`Api` *extends* `object` = `object`\n\nThe type of the API functions available for interacting with the widget.\n\n#### Directives\n\n`Directives` *extends* `object` = `object`\n\nThe type of the directives used in the widget's template.\n\n### Properties\n\n#### api\n\n> **api**: `Api`\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: `Directives`\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state$\n\n> **state$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`State`\\>\n\n\nthe reactive state of the widget, combining all the values served by the stores\n\n***\n\n#### stores\n\n> **stores**: \\{ \\[K in string \\| number \\| symbol as \\`$\\{K & string\\}$\\`\\]: ReadableSignal\\\u003CState\\[K\\]\\> \\}\n\n\nthe different stores of the widget, all reactive\n\n### Methods\n\n#### patch\n\n> **patch**(`parameters`): `void`\n\n\nModify the parameter values, and recalculate the stores accordingly\n\n##### Parameters\n\n###### parameters\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`Props`\\>\n\n##### Returns\n\n`void`\n","Widget",{"source":76,"name":77},"## type alias_WidgetFactory\n> **WidgetFactory**\\\u003C`W`, `T`\\> = `T` & `object`\n\n\nA factory function type for creating instances of a widget.\n\n### Type Declaration\n\n#### \\[FACTORY\\_WIDGET_NAME\\]?\n\n> `optional` **\\[FACTORY\\_WIDGET\\_NAME\\]**: `string`\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](#widget)\n\nThe type of the widget that extends the base Widget type.\n\n#### T\n\n`T` *extends* (`props?`) => `W` = (`props?`) => `W`\n\nThe type of the factory function that creates the widget. Useful when the factory function has a generic\n\n### Param\n\nOptional configuration properties for the widget.\n\n### Returns\n\nAn instance of the widget.\n","WidgetFactory",{"source":79,"name":80},"## type alias_WidgetProps\n> **WidgetProps**\\\u003C`T`\\> = `T` *extends* `object` ? `U` : `never`\n\n\nExtracts the type of the argument expected by the `patch` method of a given type `T`.\n\nThis utility type takes a generic type `T` which must have a `patch` method. The `patch` method\nshould accept an argument that is a partial of some object type `U`. If `T` meets this condition,\n`WidgetProps` will resolve to the type `U`. Otherwise, it will resolve to `never`.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `object`\n\nA type that includes a `patch` method accepting a partial object.\n","WidgetProps",{"source":82,"name":83},"## interface_WidgetSlotContext\n\nRepresents the context for a widget slot, providing access to the widget and its state.\n\n### Extended by\n\n- [`AccordionItemContext`](./components/accordion#accordionitemcontext)\n- [`AlertContext`](./components/alert#alertcontext)\n- [`ModalContext`](./components/modal#modalcontext)\n- [`PaginationContext`](./components/pagination#paginationcontext)\n- [`ProgressbarContext`](./components/progressbar#progressbarcontext)\n- [`SelectContext`](./components/select#selectcontext)\n- [`SliderContext`](./components/slider#slidercontext)\n- [`ToastContext`](./components/toast#toastcontext)\n\n### Type Parameters\n\n#### W\n\n`W` *extends* [`Widget`](#widget)\n\nThe type of the widget.\n\n### Properties\n\n#### api\n\n> **api**: `W`\\[`\"api\"`\\]\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: `W`\\[`\"directives\"`\\]\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](#angularstate)\\\u003C`W`\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","WidgetSlotContext",{"source":85,"name":86},"## type alias_WidgetState\n> **WidgetState**\\\u003C`T`\\> = `T` *extends* `object` ? `U` : `never`\n\n\nExtracts the state type from a widget type that contains a `state$` property.\n\n### Type Parameters\n\n#### T\n\n`T` *extends* `object`\n\nA type that extends an object with a `state$` property of type `SubscribableStore\u003Cany>`.\n\n### Returns\n\nThe type of the state contained within the `state$` property if it extends an object, otherwise `never`.\n","WidgetState",{"source":88,"name":89},"## interface_WritableWithDefaultOptions\n\nInterface representing options for a writable store with default values.\n\n### Type Parameters\n\n#### T\n\n`T`\n\nThe type of the value stored.\n\n### Properties\n\n#### equal()?\n\n> `optional` **equal**: (`a`, `b`) => `boolean`\n\n\nthe equal function, allowing to compare two values. used to check if a previous and current values are equals.\n\n##### Parameters\n\n###### a\n\n`T`\n\n###### b\n\n`T`\n\n##### Returns\n\n`boolean`\n\n***\n\n#### normalizeValue?\n\n> `optional` **normalizeValue**: [`NormalizeValue`](#normalizevalue)\\\u003C`T`\\>\n\n\nthe normalize value function. should return the [INVALID\\_VALUE](#invalid_value) symbol when the provided value is invalid\n","WritableWithDefaultOptions","API types","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","type","slug"]}}]}
