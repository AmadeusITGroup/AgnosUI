const G=`import { getAccordionDefaultConfig, createAccordionItem, createAccordion, factoryCreateAccordion } from '@agnos-ui/core-bootstrap/components/accordion';
/**
 * Retrieve a shallow copy of the default accordion config
 * @returns the default accordion config
 */
const export_getAccordionDefaultConfig = getAccordionDefaultConfig;
export { export_getAccordionDefaultConfig as getAccordionDefaultConfig };
/**
 * Create an AccordionItemWidget with given config props
 * @param config - an optional AccordionItem config
 * @returns an AccordionItemWidget
 */
const export_createAccordionItem = createAccordionItem;
export { export_createAccordionItem as createAccordionItem };
/**
 * Create an AccordionWidget with given config props
 * @param config - an optional accordion config
 * @returns an AccordionWidget
 */
const export_createAccordion = createAccordion;
export { export_createAccordion as createAccordion };
/**
 * Create an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion
 *
 * @param itemFactory - the item factory
 * @param accordionItemProps - the list of item props
 * @param accordionConfig - the default accordion config
 * @param accordionValidator - the validator of props
 * @returns the accordion widget factory
 */
const export_factoryCreateAccordion = factoryCreateAccordion;
export { export_factoryCreateAccordion as factoryCreateAccordion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmdlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2FjY29yZGlvbi9hY2NvcmRpb24uZ2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyx5QkFBeUIsRUFBRSxtQkFBbUIsRUFBRSxlQUFlLEVBQUUsc0JBQXNCLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUt0Sjs7O0dBR0c7QUFDSCxNQUFNLGdDQUFnQyxHQUF5Qix5QkFBZ0MsQ0FBQztBQUNoRyxPQUFPLEVBQUMsZ0NBQWdDLElBQUkseUJBQXlCLEVBQUMsQ0FBQztBQTZWdkU7Ozs7R0FJRztBQUNILE1BQU0sMEJBQTBCLEdBQXVDLG1CQUEwQixDQUFDO0FBQ2xHLE9BQU8sRUFBQywwQkFBMEIsSUFBSSxtQkFBbUIsRUFBQyxDQUFDO0FBSTNEOzs7O0dBSUc7QUFDSCxNQUFNLHNCQUFzQixHQUFtQyxlQUFzQixDQUFDO0FBQ3RGLE9BQU8sRUFBQyxzQkFBc0IsSUFBSSxlQUFlLEVBQUMsQ0FBQztBQUluRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sNkJBQTZCLEdBQWdOLHNCQUE2QixDQUFDO0FBQ2pSLE9BQU8sRUFBQyw2QkFBNkIsSUFBSSxzQkFBc0IsRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtnZXRBY2NvcmRpb25EZWZhdWx0Q29uZmlnLCBjcmVhdGVBY2NvcmRpb25JdGVtLCBjcmVhdGVBY2NvcmRpb24sIGZhY3RvcnlDcmVhdGVBY2NvcmRpb259IGZyb20gJ0BhZ25vcy11aS9jb3JlLWJvb3RzdHJhcC9jb21wb25lbnRzL2FjY29yZGlvbic7XG5pbXBvcnQgdHlwZSB7V2lkZ2V0U2xvdENvbnRleHQsIFNsb3RDb250ZW50LCBUcmFuc2l0aW9uRm4sIFdpZGdldCwgV2lkZ2V0RmFjdG9yeSwgQ29uZmlnVmFsaWRhdG9yLCBQcm9wc0NvbmZpZywgRGlyZWN0aXZlfSBmcm9tICdAYWdub3MtdWkvYW5ndWxhci1oZWFkbGVzcyc7XG5cblxuXG4vKipcbiAqIFJldHJpZXZlIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBkZWZhdWx0IGFjY29yZGlvbiBjb25maWdcbiAqIEByZXR1cm5zIHRoZSBkZWZhdWx0IGFjY29yZGlvbiBjb25maWdcbiAqL1xuY29uc3QgZXhwb3J0X2dldEFjY29yZGlvbkRlZmF1bHRDb25maWc6ICgpID0+IEFjY29yZGlvblByb3BzID0gZ2V0QWNjb3JkaW9uRGVmYXVsdENvbmZpZyBhcyBhbnk7XG5leHBvcnQge2V4cG9ydF9nZXRBY2NvcmRpb25EZWZhdWx0Q29uZmlnIGFzIGdldEFjY29yZGlvbkRlZmF1bHRDb25maWd9O1xuXG5cblxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25JdGVtQ29udGV4dCBleHRlbmRzIFdpZGdldFNsb3RDb250ZXh0PEFjY29yZGlvbkl0ZW1XaWRnZXQ+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3JkaW9uU3RhdGUge1xuXHRcblx0LyoqXG5cdCAqIEFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBhY2NvcmRpb24taXRlbXMgY29udGFpbmVkIGluIHRoZSBhY2NvcmRpb24uXG5cdCAqL1xuXHRpdGVtV2lkZ2V0czogQWNjb3JkaW9uSXRlbVdpZGdldFtdO1xuXHRcblx0LyoqXG5cdCAqIENTUyBjbGFzc2VzIHRvIGJlIGFwcGxpZWQgb24gdGhlIHdpZGdldCBtYWluIGNvbnRhaW5lclxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnJ2Bcblx0ICovXG5cdGNsYXNzTmFtZTogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIFN0cnVjdHVyZSBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uIFRoZSBkZWZhdWx0IGl0ZW0gc3RydWN0dXJlIGlzOiBhY2NvcmRpb24taXRlbVxuXHQgKiBjb250YWlucyBhY2NvcmRpb24gaGVhZGVyIGFuZCBhY2NvcmRpb24taXRlbSBib2R5IGNvbnRhaW5lcjsgdGhlIGFjY29yZGlvbiBoZWFkZXIgY29udGFpbnMgdGhlIGFjY29yZGlvbiBidXR0b25cblx0ICogKHRoYXQgY29udGFpbnMgYGhlYWRlcmApLCB3aGlsZSB0aGUgYWNjb3JkaW9uLWl0ZW0gYm9keSBjb250YWluZXIgY29udGFpbnMgdGhlIGFjY29yZGlvbiBib2R5ICh0aGF0IGNvbnRhaW5zIGBjaGlsZHJlbmApLlxuXHQgKiBUaGUgaXRlbVRyYW5zaXRpb24gaXMgYXBwbGllZCBvbiB0aGlzIGVsZW1lbnQuXG5cdCAqXG5cdCAqIEl0IGlzIGEgcHJvcCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRpdGVtU3RydWN0dXJlOiBTbG90Q29udGVudDxBY2NvcmRpb25JdGVtQ29udGV4dD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3JkaW9uUHJvcHMge1xuXHRcblx0LyoqXG5cdCAqIFRoZSB0cmFuc2l0aW9uIHRvIHVzZSBmb3IgdGhlIGFjY29yZGlvbi1pdGVtIGJvZHktY29udGFpbmVyIHdoZW4gdGhlIGFjY29yZGlvbi1pdGVtIGlzIHRvZ2dsZWQuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWVcblx0ICogYGBgdHNcblx0ICogY29sbGFwc2VWZXJ0aWNhbFRyYW5zaXRpb25cblx0ICogYGBgXG5cdCAqL1xuXHRpdGVtVHJhbnNpdGlvbjogVHJhbnNpdGlvbkZuO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgb25seSBvbmUgYWNjb3JkaW9uLWl0ZW0gYXQgdGhlIHRpbWUgY2FuIHN0YXkgb3Blbi5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG5cdCAqL1xuXHRjbG9zZU90aGVyczogYm9vbGVhbjtcblx0XG5cdC8qKlxuXHQgKiBBbiBldmVudCBmaXJlZCB3aGVuIGFuIGl0ZW0gaXMgc2hvd24uXG5cdCAqXG5cdCAqIEV2ZW50IHBheWxvYWQgaXMgdGhlIGlkIG9mIHRoZSBpdGVtLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlXG5cdCAqIGBgYHRzXG5cdCAqICgpID0+IHt9XG5cdCAqIGBgYFxuXHQgKi9cblx0b25JdGVtU2hvd246IChpdGVtSWQ6IHN0cmluZykgPT4gdm9pZDtcblx0XG5cdC8qKlxuXHQgKiBBbiBldmVudCBmaXJlZCB3aGVuIGFuIGl0ZW0gaXMgaGlkZGVuLlxuXHQgKlxuXHQgKiBFdmVudCBwYXlsb2FkIGlzIHRoZSBpZCBvZiB0aGUgaXRlbS5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZVxuXHQgKiBgYGB0c1xuXHQgKiAoKSA9PiB7fVxuXHQgKiBgYGBcblx0ICovXG5cdG9uSXRlbUhpZGRlbjogKGl0ZW1JZDogc3RyaW5nKSA9PiB2b2lkO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET00gd2hlbiB0aGUgYWNjb3JkaW9uLWl0ZW0gaXMgY29sbGFwc2VkLiBJdCB3aWxsIGJlIGp1c3QgaGlkZGVuIG90aGVyd2lzZS5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgdHJ1ZWBcblx0ICovXG5cdGl0ZW1EZXN0cm95T25IaWRlOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgYWNjb3JkaW9uLWl0ZW0gd2lsbCBiZSBhbmltYXRlZC5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgdHJ1ZWBcblx0ICovXG5cdGl0ZW1BbmltYXRlZDogYm9vbGVhbjtcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIERPTSBlbGVtZW50LlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnJ2Bcblx0ICovXG5cdGl0ZW1DbGFzc05hbWU6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGhlYWRlciBET00gZWxlbWVudC5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgJydgXG5cdCAqL1xuXHRpdGVtSGVhZGVyQ2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYWRkIG9uIHRoZSBhY2NvcmRpb24taXRlbSB0b2dnbGUgYnV0dG9uIERPTSBlbGVtZW50LlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnJ2Bcblx0ICovXG5cdGl0ZW1CdXR0b25DbGFzc05hbWU6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyIERPTSBlbGVtZW50LlxuXHQgKiBUaGUgYWNjb3JkaW9uLWl0ZW0gYm9keSBjb250YWluZXIgaXMgdGhlIERPTSBlbGVtZW50IG9uIHdoYXQgdGhlIGl0ZW1UcmFuc2l0aW9uIGlzIGFwcGxpZWQuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYCcnYFxuXHQgKi9cblx0aXRlbUJvZHlDb250YWluZXJDbGFzc05hbWU6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkgRE9NIGVsZW1lbnQuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYCcnYFxuXHQgKi9cblx0aXRlbUJvZHlDbGFzc05hbWU6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBUaGUgaHRtbCB0YWcgdG8gdXNlIGZvciB0aGUgYWNjb3JkaW9uLWl0ZW0taGVhZGVyLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnJ2Bcblx0ICovXG5cdGl0ZW1IZWFkaW5nVGFnOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYmUgYXBwbGllZCBvbiB0aGUgd2lkZ2V0IG1haW4gY29udGFpbmVyXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYCcnYFxuXHQgKi9cblx0Y2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogU3RydWN0dXJlIG9mIHRoZSBhY2NvcmRpb24taXRlbS4gVGhlIGRlZmF1bHQgaXRlbSBzdHJ1Y3R1cmUgaXM6IGFjY29yZGlvbi1pdGVtXG5cdCAqIGNvbnRhaW5zIGFjY29yZGlvbiBoZWFkZXIgYW5kIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyOyB0aGUgYWNjb3JkaW9uIGhlYWRlciBjb250YWlucyB0aGUgYWNjb3JkaW9uIGJ1dHRvblxuXHQgKiAodGhhdCBjb250YWlucyBgaGVhZGVyYCksIHdoaWxlIHRoZSBhY2NvcmRpb24taXRlbSBib2R5IGNvbnRhaW5lciBjb250YWlucyB0aGUgYWNjb3JkaW9uIGJvZHkgKHRoYXQgY29udGFpbnMgYGNoaWxkcmVuYCkuXG5cdCAqIFRoZSBpdGVtVHJhbnNpdGlvbiBpcyBhcHBsaWVkIG9uIHRoaXMgZWxlbWVudC5cblx0ICpcblx0ICogSXQgaXMgYSBwcm9wIG9mIHRoZSBhY2NvcmRpb24taXRlbS5cblx0ICovXG5cdGl0ZW1TdHJ1Y3R1cmU6IFNsb3RDb250ZW50PEFjY29yZGlvbkl0ZW1Db250ZXh0Pjtcbn1cblxuXG5cbmV4cG9ydCB0eXBlIEFjY29yZGlvbldpZGdldCA9IFdpZGdldDxBY2NvcmRpb25Qcm9wcywgQWNjb3JkaW9uU3RhdGUsIEFjY29yZGlvbkFwaSwgQWNjb3JkaW9uRGlyZWN0aXZlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3JkaW9uSXRlbVN0YXRlIHtcblx0XG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAgdGhlIGNvbnRlbnQgb2YgdGhlIGFjY29yZGlvbi1pdGVtIGNvbGxhcHNlIHNob3VsZCBiZSBpbiBET00uIEl0cyB2YWx1ZSBkZXBlbmRzIG9uIHRoZVxuXHQgKiB2YWx1ZSBvZiB0aGUgYHZpc2libGVgIGFuZCBgZGVzdHJveU9uSGlkZWAuXG5cdCAqL1xuXHRzaG91bGRCZUluRE9NOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgdGhlIGFjY29yZGlvbi1pdGVtIHdpbGwgYmUgdmlzaWJsZSAoZXhwYW5kZWQpLiBPdGhlcndpc2UsIGl0IHdpbGwgYmUgaGlkZGVuIChjb2xsYXBzZWQpLlxuXHQgKi9cblx0dmlzaWJsZTogYm9vbGVhbjtcblx0XG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHRoZSBhY2NvcmRpb24taXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuXHQgKiBJdCB3aWxsIG5vdCByZWFjdCB0byB1c2VyJ3MgY2xpY2tzLCBidXQgc3RpbGwgd2lsbCBiZSBwb3NzaWJsZSB0byB0b2dnbGUgcHJvZ3JhbW1hdGljYWxseS5cblx0ICovXG5cdGRpc2FibGVkOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBpZCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uIEl0IGNhbiBiZSB1c2VkIGZvciBjb250cm9sbGluZyB0aGUgYWNjb3JkaW9uLWl0ZW0gdmlhIHRoZSBhY2NvcmRpb24gYXBpLlxuXHQgKi9cblx0aWQ6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGhlYWRlciBET00gZWxlbWVudC5cblx0ICovXG5cdGhlYWRlckNsYXNzTmFtZTogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIENTUyBjbGFzc2VzIHRvIGFkZCBvbiB0aGUgYWNjb3JkaW9uLWl0ZW0gY29sbGFwc2UgRE9NIGVsZW1lbnQuXG5cdCAqL1xuXHRidXR0b25DbGFzc05hbWU6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyIERPTSBlbGVtZW50LlxuXHQgKiBUaGUgYWNjb3JkaW9uLWl0ZW0gYm9keSBjb250YWluZXIgaXMgdGhlIERPTSBlbGVtZW50IG9uIHdoYXQgdGhlIGl0ZW1UcmFuc2l0aW9uIGlzIGFwcGxpZWQuXG5cdCAqL1xuXHRib2R5Q29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYWRkIG9uIHRoZSBhY2NvcmRpb24taXRlbSBib2R5IERPTSBlbGVtZW50LlxuXHQgKi9cblx0Ym9keUNsYXNzTmFtZTogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBodG1sIHRhZyB0byB1c2UgZm9yIHRoZSBhY2NvcmRpb24taXRlbS1oZWFkZXIuXG5cdCAqL1xuXHRoZWFkaW5nVGFnOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYmUgYXBwbGllZCBvbiB0aGUgd2lkZ2V0IG1haW4gY29udGFpbmVyXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYCcnYFxuXHQgKi9cblx0Y2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogU3RydWN0dXJlIG9mIHRoZSBhY2NvcmRpb24taXRlbS4gVGhlIGRlZmF1bHQgaXRlbSBzdHJ1Y3R1cmUgaXM6IGFjY29yZGlvbi1pdGVtXG5cdCAqIGNvbnRhaW5zIGFjY29yZGlvbiBoZWFkZXIgYW5kIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyOyB0aGUgYWNjb3JkaW9uIGhlYWRlciBjb250YWlucyB0aGUgYWNjb3JkaW9uIGJ1dHRvblxuXHQgKiAodGhhdCBjb250YWlucyBgaGVhZGVyYCksIHdoaWxlIHRoZSBhY2NvcmRpb24taXRlbSBib2R5IGNvbnRhaW5lciBjb250YWlucyB0aGUgYWNjb3JkaW9uIGJvZHkgKHRoYXQgY29udGFpbnMgYGNoaWxkcmVuYCkuXG5cdCAqIFRoZSBpdGVtVHJhbnNpdGlvbiBpcyBhcHBsaWVkIG9uIHRoaXMgZWxlbWVudC5cblx0ICpcblx0ICogSXQgaXMgYSBwcm9wIG9mIHRoZSBhY2NvcmRpb24taXRlbS5cblx0ICovXG5cdHN0cnVjdHVyZTogU2xvdENvbnRlbnQ8QWNjb3JkaW9uSXRlbUNvbnRleHQ+O1xuXHRcblx0LyoqXG5cdCAqIENvbnRlbnQgcHJlc2VudCBpbiB0aGUgYWNjb3JkaW9uIGJvZHkuXG5cdCAqXG5cdCAqIEl0IGlzIGEgcHJvcCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRjaGlsZHJlbjogU2xvdENvbnRlbnQ8QWNjb3JkaW9uSXRlbUNvbnRleHQ+O1xuXHRcblx0LyoqXG5cdCAqIENvbnRlbnQgcHJlc2VudCBpbiB0aGUgYWNjb3JkaW9uIGJ1dHRvbiBpbnNpZGUgdGhlIGFjY29yZGlvbiBoZWFkZXIuXG5cdCAqXG5cdCAqIEl0IGlzIGEgcHJvcCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRoZWFkZXI6IFNsb3RDb250ZW50PEFjY29yZGlvbkl0ZW1Db250ZXh0Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25JdGVtUHJvcHMge1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgYWNjb3JkaW9uLWl0ZW0gd2lsbCBiZSBhbmltYXRlZC5cblx0ICovXG5cdGFuaW1hdGVkOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIFRoZSB0cmFuc2l0aW9uIHRvIHVzZSBmb3IgdGhlIGFjY29yZGlvbi1pdGVtIGJvZHktY29udGFpbmVyIHdoZW4gdGhlIGFjY29yZGlvbi1pdGVtIGlzIHRvZ2dsZWQuXG5cdCAqL1xuXHR0cmFuc2l0aW9uOiBUcmFuc2l0aW9uRm47XG5cdFxuXHQvKipcblx0ICogSWYgYHRydWVgLCB0aGUgYWNjb3JkaW9uLWl0ZW0gYm9keSBjb250YWluZXIgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTSB3aGVuIHRoZSBhY2NvcmRpb24taXRlbSBpcyBjb2xsYXBzZWQuIEl0IHdpbGwgYmUganVzdCBoaWRkZW4gb3RoZXJ3aXNlLlxuXHQgKi9cblx0ZGVzdHJveU9uSGlkZTogYm9vbGVhbjtcblx0XG5cdC8qKlxuXHQgKiBBbiBldmVudCBmaXJlZCB3aGVuIGFuIGl0ZW0gaXMgc2hvd24uXG5cdCAqL1xuXHRvblNob3duOiAoKSA9PiB2b2lkO1xuXHRcblx0LyoqXG5cdCAqIEFuIGV2ZW50IGZpcmVkIHdoZW4gYW4gaXRlbSBpcyBoaWRkZW4uXG5cdCAqL1xuXHRvbkhpZGRlbjogKCkgPT4gdm9pZDtcblx0XG5cdC8qKlxuXHQgKiBBbiBldmVudCBmaXJlZCB3aGVuIHRoZSBgdmlzaWJsZWAgdmFsdWUgY2hhbmdlcy5cblx0ICpcblx0ICogRXZlbnQgcGF5bG9hZCBpcyB0aGUgbmV3IHZhbHVlIG9mIHZpc2libGUuXG5cdCAqL1xuXHRvblZpc2libGVDaGFuZ2U6ICh2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgdGhlIGFjY29yZGlvbi1pdGVtIHdpbGwgYmUgdmlzaWJsZSAoZXhwYW5kZWQpLiBPdGhlcndpc2UsIGl0IHdpbGwgYmUgaGlkZGVuIChjb2xsYXBzZWQpLlxuXHQgKi9cblx0dmlzaWJsZTogYm9vbGVhbjtcblx0XG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHRoZSBhY2NvcmRpb24taXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuXHQgKiBJdCB3aWxsIG5vdCByZWFjdCB0byB1c2VyJ3MgY2xpY2tzLCBidXQgc3RpbGwgd2lsbCBiZSBwb3NzaWJsZSB0byB0b2dnbGUgcHJvZ3JhbW1hdGljYWxseS5cblx0ICovXG5cdGRpc2FibGVkOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBpZCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uIEl0IGNhbiBiZSB1c2VkIGZvciBjb250cm9sbGluZyB0aGUgYWNjb3JkaW9uLWl0ZW0gdmlhIHRoZSBhY2NvcmRpb24gYXBpLlxuXHQgKi9cblx0aWQ6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGhlYWRlciBET00gZWxlbWVudC5cblx0ICovXG5cdGhlYWRlckNsYXNzTmFtZTogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIENTUyBjbGFzc2VzIHRvIGFkZCBvbiB0aGUgYWNjb3JkaW9uLWl0ZW0gY29sbGFwc2UgRE9NIGVsZW1lbnQuXG5cdCAqL1xuXHRidXR0b25DbGFzc05hbWU6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDU1MgY2xhc3NlcyB0byBhZGQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyIERPTSBlbGVtZW50LlxuXHQgKiBUaGUgYWNjb3JkaW9uLWl0ZW0gYm9keSBjb250YWluZXIgaXMgdGhlIERPTSBlbGVtZW50IG9uIHdoYXQgdGhlIGl0ZW1UcmFuc2l0aW9uIGlzIGFwcGxpZWQuXG5cdCAqL1xuXHRib2R5Q29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYWRkIG9uIHRoZSBhY2NvcmRpb24taXRlbSBib2R5IERPTSBlbGVtZW50LlxuXHQgKi9cblx0Ym9keUNsYXNzTmFtZTogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBodG1sIHRhZyB0byB1c2UgZm9yIHRoZSBhY2NvcmRpb24taXRlbS1oZWFkZXIuXG5cdCAqL1xuXHRoZWFkaW5nVGFnOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYmUgYXBwbGllZCBvbiB0aGUgd2lkZ2V0IG1haW4gY29udGFpbmVyXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYCcnYFxuXHQgKi9cblx0Y2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogU3RydWN0dXJlIG9mIHRoZSBhY2NvcmRpb24taXRlbS4gVGhlIGRlZmF1bHQgaXRlbSBzdHJ1Y3R1cmUgaXM6IGFjY29yZGlvbi1pdGVtXG5cdCAqIGNvbnRhaW5zIGFjY29yZGlvbiBoZWFkZXIgYW5kIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyOyB0aGUgYWNjb3JkaW9uIGhlYWRlciBjb250YWlucyB0aGUgYWNjb3JkaW9uIGJ1dHRvblxuXHQgKiAodGhhdCBjb250YWlucyBgaGVhZGVyYCksIHdoaWxlIHRoZSBhY2NvcmRpb24taXRlbSBib2R5IGNvbnRhaW5lciBjb250YWlucyB0aGUgYWNjb3JkaW9uIGJvZHkgKHRoYXQgY29udGFpbnMgYGNoaWxkcmVuYCkuXG5cdCAqIFRoZSBpdGVtVHJhbnNpdGlvbiBpcyBhcHBsaWVkIG9uIHRoaXMgZWxlbWVudC5cblx0ICpcblx0ICogSXQgaXMgYSBwcm9wIG9mIHRoZSBhY2NvcmRpb24taXRlbS5cblx0ICovXG5cdHN0cnVjdHVyZTogU2xvdENvbnRlbnQ8QWNjb3JkaW9uSXRlbUNvbnRleHQ+O1xuXHRcblx0LyoqXG5cdCAqIENvbnRlbnQgcHJlc2VudCBpbiB0aGUgYWNjb3JkaW9uIGJvZHkuXG5cdCAqXG5cdCAqIEl0IGlzIGEgcHJvcCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRjaGlsZHJlbjogU2xvdENvbnRlbnQ8QWNjb3JkaW9uSXRlbUNvbnRleHQ+O1xuXHRcblx0LyoqXG5cdCAqIENvbnRlbnQgcHJlc2VudCBpbiB0aGUgYWNjb3JkaW9uIGJ1dHRvbiBpbnNpZGUgdGhlIGFjY29yZGlvbiBoZWFkZXIuXG5cdCAqXG5cdCAqIEl0IGlzIGEgcHJvcCBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRoZWFkZXI6IFNsb3RDb250ZW50PEFjY29yZGlvbkl0ZW1Db250ZXh0Pjtcbn1cblxuXG5cbmV4cG9ydCB0eXBlIEFjY29yZGlvbkl0ZW1XaWRnZXQgPSBXaWRnZXQ8QWNjb3JkaW9uSXRlbVByb3BzLCBBY2NvcmRpb25JdGVtU3RhdGUsIEFjY29yZGlvbkl0ZW1BcGksIEFjY29yZGlvbkl0ZW1EaXJlY3RpdmVzPjtcblxuXG5cbi8qKlxuICogQ3JlYXRlIGFuIEFjY29yZGlvbkl0ZW1XaWRnZXQgd2l0aCBnaXZlbiBjb25maWcgcHJvcHNcbiAqIEBwYXJhbSBjb25maWcgLSBhbiBvcHRpb25hbCBBY2NvcmRpb25JdGVtIGNvbmZpZ1xuICogQHJldHVybnMgYW4gQWNjb3JkaW9uSXRlbVdpZGdldFxuICovXG5jb25zdCBleHBvcnRfY3JlYXRlQWNjb3JkaW9uSXRlbTogV2lkZ2V0RmFjdG9yeTxBY2NvcmRpb25JdGVtV2lkZ2V0PiA9IGNyZWF0ZUFjY29yZGlvbkl0ZW0gYXMgYW55O1xuZXhwb3J0IHtleHBvcnRfY3JlYXRlQWNjb3JkaW9uSXRlbSBhcyBjcmVhdGVBY2NvcmRpb25JdGVtfTtcblxuXG5cbi8qKlxuICogQ3JlYXRlIGFuIEFjY29yZGlvbldpZGdldCB3aXRoIGdpdmVuIGNvbmZpZyBwcm9wc1xuICogQHBhcmFtIGNvbmZpZyAtIGFuIG9wdGlvbmFsIGFjY29yZGlvbiBjb25maWdcbiAqIEByZXR1cm5zIGFuIEFjY29yZGlvbldpZGdldFxuICovXG5jb25zdCBleHBvcnRfY3JlYXRlQWNjb3JkaW9uOiBXaWRnZXRGYWN0b3J5PEFjY29yZGlvbldpZGdldD4gPSBjcmVhdGVBY2NvcmRpb24gYXMgYW55O1xuZXhwb3J0IHtleHBvcnRfY3JlYXRlQWNjb3JkaW9uIGFzIGNyZWF0ZUFjY29yZGlvbn07XG5cblxuXG4vKipcbiAqIENyZWF0ZSBhbiBhY2NvcmRpb24gV2lkZ2V0RmFjdG9yeSBiYXNlZCBvbiBhIGl0ZW0gZmFjdG9yeSBhbmQgdGhlIGxpc3Qgb2YgaXRlbSBwcm9wcyB0aGF0IHNob3VsZCBpbmhlcml0IGZyb20gdGhlIHBhcmVudCBhY2NvcmRpb25cbiAqXG4gKiBAcGFyYW0gaXRlbUZhY3RvcnkgLSB0aGUgaXRlbSBmYWN0b3J5XG4gKiBAcGFyYW0gYWNjb3JkaW9uSXRlbVByb3BzIC0gdGhlIGxpc3Qgb2YgaXRlbSBwcm9wc1xuICogQHBhcmFtIGFjY29yZGlvbkNvbmZpZyAtIHRoZSBkZWZhdWx0IGFjY29yZGlvbiBjb25maWdcbiAqIEBwYXJhbSBhY2NvcmRpb25WYWxpZGF0b3IgLSB0aGUgdmFsaWRhdG9yIG9mIHByb3BzXG4gKiBAcmV0dXJucyB0aGUgYWNjb3JkaW9uIHdpZGdldCBmYWN0b3J5XG4gKi9cbmNvbnN0IGV4cG9ydF9mYWN0b3J5Q3JlYXRlQWNjb3JkaW9uOiAoaXRlbUZhY3Rvcnk/OiBXaWRnZXRGYWN0b3J5PEFjY29yZGlvbkl0ZW1XaWRnZXQ+LCBhY2NvcmRpb25JdGVtUHJvcHM/OiBzdHJpbmdbXSwgYWNjb3JkaW9uQ29uZmlnPzogQWNjb3JkaW9uUHJvcHMsIGFjY29yZGlvblZhbGlkYXRvcj86IENvbmZpZ1ZhbGlkYXRvcjxBY2NvcmRpb25Qcm9wcz4pID0+IFdpZGdldEZhY3Rvcnk8QWNjb3JkaW9uV2lkZ2V0PiA9IGZhY3RvcnlDcmVhdGVBY2NvcmRpb24gYXMgYW55O1xuZXhwb3J0IHtleHBvcnRfZmFjdG9yeUNyZWF0ZUFjY29yZGlvbiBhcyBmYWN0b3J5Q3JlYXRlQWNjb3JkaW9ufTtcblxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25BcGkge1xuXHRcblx0LyoqXG5cdCAqIEdpdmVuIHRoZSBpdGVtSWQsIHdpbGwgZXhwYW5kIHRoZSBjb3JyZXNwb25kaW5nIGFjY29yZGlvbi1pdGVtLlxuXHQgKlxuXHQgKiBJZiB0aGUgaXRlbUlkIGlzIG5vdCB2YWxpZCwgbm90aGluZyB3aWxsIGhhcHBlbi5cblx0ICovXG5cdGV4cGFuZChpdGVtSWQ6IHN0cmluZyk6IHZvaWQ7XG5cdFxuXHQvKipcblx0ICogR2l2ZW4gdGhlIGl0ZW1JZCwgd2lsbCBjb2xsYXBzZSB0aGUgY29ycmVzcG9uZGluZyBhY2NvcmRpb24taXRlbS5cblx0ICpcblx0ICogSWYgdGhlIGl0ZW1JZCBpcyBub3QgdmFsaWQsIG5vdGhpbmcgd2lsbCBoYXBwZW4uXG5cdCAqL1xuXHRjb2xsYXBzZShpdGVtSWQ6IHN0cmluZyk6IHZvaWQ7XG5cdFxuXHQvKipcblx0ICogR2l2ZW4gdGhlIGl0ZW1JZCwgd2lsbCB0b2dnbGUgdGhlIGNvcnJlc3BvbmRpbmcgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqXG5cdCAqIElmIHRoZSBpdGVtSWQgaXMgbm90IHZhbGlkLCBub3RoaW5nIHdpbGwgaGFwcGVuLlxuXHQgKi9cblx0dG9nZ2xlKGl0ZW1JZDogc3RyaW5nKTogdm9pZDtcblx0XG5cdC8qKlxuXHQgKiBJdCB3aWxsIGV4cGFuZCBhbGwgdGhlIGl0ZW1zIGluIHRoZSBhY2NvcmRpb24uXG5cdCAqXG5cdCAqIElmIGBjbG9zZU90aGVyc2AgaXMgYHRydWVgIGl0IHdpbGwgZXhwYW5kIG9ubHkgdGhlIGxhc3QgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRleHBhbmRBbGwoKTogdm9pZDtcblx0XG5cdC8qKlxuXHQgKiBJdCB3aWxsIGNvbGxhcHNlIGFsbCB0aGUgYWNjb3JkaW9uLWl0ZW1zIGluIHRoZSBhY2NvcmRpb24uXG5cdCAqL1xuXHRjb2xsYXBzZUFsbCgpOiB2b2lkO1xuXHRcblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgYWNjb3JkaW9uSXRlbS5cblx0ICovXG5cdHJlZ2lzdGVySXRlbShpdGVtQ29uZmlnPzogUHJvcHNDb25maWc8QWNjb3JkaW9uSXRlbVByb3BzPik6IEFjY29yZGlvbkl0ZW1XaWRnZXQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3JkaW9uRGlyZWN0aXZlcyB7XG5cdFxuXHQvKipcblx0ICogRGlyZWN0aXZlIHRvIHB1dCBvbiB0aGUgYWNjb3JkaW9uIERPTSBlbGVtZW50XG5cdCAqL1xuXHRhY2NvcmRpb25EaXJlY3RpdmU6IERpcmVjdGl2ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25JdGVtQXBpIHtcblx0XG5cdC8qKlxuXHQgKiBJdCB3aWxsIGNvbGxhcHNlIHRoZSBhY2NvcmRpb24taXRlbS5cblx0ICovXG5cdGNvbGxhcHNlKCk6IHZvaWQ7XG5cdFxuXG5cdC8qKlxuXHQgKiBJdCB3aWxsIGV4cGFuZCB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRleHBhbmQoKTogdm9pZDtcblx0XG5cdC8qKlxuXHQgKiBJdCB3aWxsIHRvZ2dsZSB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHR0b2dnbGUoKTogdm9pZDtcblx0XG5cdC8qKlxuXHQgKiBNZXRob2QgdG8gYmUgY2FsbGVkIGFmdGVyIHRoZSBpbml0aWFsaXphdGlvbiB0byBhbGxvdyBhbmltYXRpb25zLlxuXHQgKi9cblx0aW5pdERvbmUoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25JdGVtRGlyZWN0aXZlcyB7XG5cdFxuXHQvKipcblx0ICogRGlyZWN0aXZlIHRvIHVzZSBpbiBzcGVjaWFsIGNhc2VzLCBpZiB0aGUgYWNjb3JkaW9uIGhlYWRlciBkb2VzIG5vdCB1c2UgYSBidXR0b24gZWxlbWVudCB0byBjb250cm9sIHRoZSBjb2xsYXBzaW5nLlxuXHQgKi9cblx0dG9nZ2xlRGlyZWN0aXZlOiBEaXJlY3RpdmU7XG5cdFxuXG5cdC8qKlxuXHQgKiBEaXJlY3RpdmUgdG8gcHV0IG9uIHRoZSBidXR0b24gZWxlbWVudCB0aGF0IHdpbGwgY29udHJvbCB0aGUgY29sbGFwc2luZyBvZiB0aGUgYWNjb3JkaW9uLWl0ZW0uXG5cdCAqL1xuXHRidXR0b25EaXJlY3RpdmU6IERpcmVjdGl2ZTtcblx0XG5cblx0LyoqXG5cdCAqIERpcmVjdGl2ZSB0byBwdXQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGhlYWRlciB0aGF0IHdpbGwgY29udGFpbiB0aGUgYnV0dG9uIGVsZW1lbnQuXG5cdCAqL1xuXHRoZWFkZXJEaXJlY3RpdmU6IERpcmVjdGl2ZTtcblx0XG5cblx0LyoqXG5cdCAqIERpcmVjdGl2ZSB0byBwdXQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkuXG5cdCAqL1xuXHRib2R5RGlyZWN0aXZlOiBEaXJlY3RpdmU7XG5cdFxuXHQvKipcblx0ICogRGlyZWN0aXZlIHRvIGFwcGx5IHRoZSBpdGVtVHJhbnNpdGlvblxuXHQgKi9cblx0dHJhbnNpdGlvbkRpcmVjdGl2ZTogRGlyZWN0aXZlO1xuXHRcblx0LyoqXG5cdCAqIERpcmVjdGl2ZSB0byBhcHBseSBhcmlhIGF0dHJpYnV0ZXMgdG8gdGhlIGV4cGFuZGVkIGJvZHkgcGFuZWxcblx0ICovXG5cdGJvZHlDb250YWluZXJBdHRyc0RpcmVjdGl2ZTogRGlyZWN0aXZlO1xuXHRcblx0LyoqXG5cdCAqIERpcmVjdGl2ZSB0byBiZSBwdXQgb24gdGhlIGFjY29yZGlvbi1pdGVtIGJvZHkgY29udGFpbmVyLiBJdCB3aWxsIGhhbmRsZSB0aGUgYW5pbWF0aW9uLlxuXHQgKi9cblx0Ym9keUNvbnRhaW5lckRpcmVjdGl2ZTogRGlyZWN0aXZlO1xuXHRcblx0LyoqXG5cdCAqIERpcmVjdGl2ZSB0byBiZSBwdXQgb24gdGhlIGFjY29yZGlvbi1pdGVtLiBJdCB3aWxsIGhhbmRsZSBhZGRpbmcgdGhlIGFjY29yZGlvbi1pdGVtIHRvIHRoZSBhY2NvcmRpb24uXG5cdCAqL1xuXHRpdGVtRGlyZWN0aXZlOiBEaXJlY3RpdmU7XG59XG5cbiJdfQ==`;export{G as default};
