const G=`import { getSliderDefaultConfig, createSlider } from '@agnos-ui/core-bootstrap/components/slider';
/**
 * Retrieve a shallow copy of the default Slider config
 * @returns the default Slider config
 */
const export_getSliderDefaultConfig = getSliderDefaultConfig;
export { export_getSliderDefaultConfig as getSliderDefaultConfig };
/**
 * Create a Slider with given config props
 * @param config - an optional slider config
 * @returns a SliderWidget
 */
const export_createSlider = createSlider;
export { export_createSlider as createSlider };
//# sourceMappingURL=data:application/json;base64,`;export{G as default};
