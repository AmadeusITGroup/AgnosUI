import{n as e}from"./stores.a5890d32.js";import{c as i}from"./collapse.166f4271.js";const t={closeOthers:!1,onShown:e,onHidden:e,className:"",itemId:"",itemDestroyOnHide:!0,itemDisabled:!1,itemVisible:!1,itemAnimation:!0,itemTransition:i,itemHeadingTag:"",onItemShown:e,onItemHidden:e,onItemVisibleChange:e,slotItemStructure:void 0,slotItemBody:void 0,slotItemHeader:void 0,itemClass:"",itemHeaderClass:"",itemButtonClass:"",itemCollapseClass:"",itemBodyClass:""};function s(){return{...t}}const o=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"closeOthers",description:"If `true`, only one item at the time can stay open.",fileName:"core/lib/accordion.ts",start:{line:57,character:2,position:1787},end:{line:57,character:23,position:1808},type:"boolean",defaultValue:"false"},{name:"itemAnimation",description:"If `true`, accordion-item will be animated.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:101,character:2,position:2991},end:{line:101,character:25,position:3014},type:"boolean",defaultValue:"true"},{name:"itemBodyClass",description:`Classes to add on the accordion-item body DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:177,character:2,position:5053},end:{line:177,character:24,position:5075},type:"string",defaultValue:"''"},{name:"itemButtonClass",description:`Classes to add on the accordion-item toggle button DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:165,character:2,position:4769},end:{line:165,character:26,position:4793},type:"string",defaultValue:"''"},{name:"itemClass",description:`Classes to add on the accordion-item DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:153,character:2,position:4486},end:{line:153,character:20,position:4504},type:"string",defaultValue:"''"},{name:"itemCollapseClass",description:`Classes to add on the accordion-item collapse DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:171,character:2,position:4912},end:{line:171,character:28,position:4938},type:"string",defaultValue:"''"},{name:"itemDestroyOnHide",description:"If `true`, the content of the accordion-item collapse will be removed from the DOM. It will be just hidden otherwise.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:82,character:2,position:2454},end:{line:82,character:29,position:2481},type:"boolean",defaultValue:"true"},{name:"itemDisabled",description:`If \`true\`, the accordion-item will be disabled.
It will not react to user's clicks, but still will be possible to toggle programmatically.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:89,character:2,position:2684},end:{line:89,character:24,position:2706},type:"boolean",defaultValue:"false"},{name:"itemHeaderClass",description:`Classes to add on the accordion-item header DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:159,character:2,position:4621},end:{line:159,character:26,position:4645},type:"string",defaultValue:"''"},{name:"itemHeadingTag",description:`The html tag to use for the accordion-item-header.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:183,character:2,position:5186},end:{line:183,character:25,position:5209},type:"string",defaultValue:"''"},{name:"itemId",description:`The id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:76,character:2,position:2261},end:{line:76,character:17,position:2276},type:"string",defaultValue:"''"},{name:"itemTransition",description:`The transition to use for the accordion-item collapse when is toggled.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:107,character:2,position:3145},end:{line:107,character:31,position:3174},type:"TransitionFn",defaultValue:"collapseVerticalTransition"},{name:"itemVisible",description:"If `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:95,character:2,position:2866},end:{line:95,character:23,position:2887},type:"boolean",defaultValue:"false"},{name:"onHidden",description:`An event fired when an item is hidden.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:69,character:2,position:2041},end:{line:69,character:37,position:2076},type:"(itemId: string) => void",defaultValue:"noop"},{name:"onItemHidden",description:`An event fired when an item is hidden.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:119,character:2,position:3395},end:{line:119,character:27,position:3420},type:"() => void",defaultValue:"noop"},{name:"onItemShown",description:`An event fired when an item is shown.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:113,character:2,position:3272},end:{line:113,character:26,position:3296},type:"() => void",defaultValue:"noop"},{name:"onItemVisibleChange",description:`An event fired when the \`visible\` value changes.

Event payload is the new value of visible.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:127,character:2,position:3580},end:{line:127,character:50,position:3628},type:"(visible: boolean) => void",defaultValue:"noop"},{name:"onShown",description:`An event fired when an item is shown.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:63,character:2,position:1907},end:{line:63,character:36,position:1941},type:"(itemId: string) => void",defaultValue:"noop"},{name:"slotItemBody",description:`Content present in the accordion body.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:141,character:2,position:4149},end:{line:141,character:50,position:4197},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemHeader",description:`Content present in the accordion button inside the accordion header.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:147,character:2,position:4326},end:{line:147,character:52,position:4376},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemStructure",description:`Structure of the accordion-item. The default item structure is: accordion-item
contains accordion header and accordion collapse; the accordion header contains the accordion button
(that contains \`slotItemHeader\`), while the accordion collapse contains the accordion body (that contains slotItemBody).

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:135,character:2,position:3997},end:{line:135,character:55,position:4050},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"}],n=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"itemsWidget",description:"Array containing all the accordion-items contained in the accordion.",fileName:"core/lib/accordion.ts",start:{line:190,character:2,position:5366},end:{line:190,character:37,position:5401},type:"AccordionItemWidget[]"}],a=[{name:"collapse",description:`Given the itemId, will collapse the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:211,character:2,position:5933},end:{line:211,character:33,position:5964},type:"(itemId: string) => void"},{name:"collapseAll",description:"It will collapse all the accordion-items in the accordion.",fileName:"core/lib/accordion.ts",start:{line:227,character:2,position:6366},end:{line:227,character:22,position:6386},type:"() => void"},{name:"expand",description:`Given the itemId, will expand the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:205,character:2,position:5765},end:{line:205,character:31,position:5794},type:"(itemId: string) => void"},{name:"expandAll",description:"It will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.",fileName:"core/lib/accordion.ts",start:{line:223,character:2,position:6273},end:{line:223,character:20,position:6291},type:"() => void"},{name:"isExpanded",description:"Given the itemId, it will return if such item is visible (expanded) or not.\n\nIf the itemId is not a valid id it will return `false`.",fileName:"core/lib/accordion.ts",start:{line:199,character:2,position:5592},end:{line:199,character:38,position:5628},type:"(itemId: string) => boolean"},{name:"registerItem",description:"Creates a new accordionItem.",fileName:"core/lib/accordion.ts",start:{line:231,character:2,position:6431},end:{line:231,character:82,position:6511},type:"(itemConfig?: PropsConfig<AccordionItemProps>) => AccordionItemWidget"},{name:"toggle",description:`Given the itemId, will toggle the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:217,character:2,position:6101},end:{line:217,character:31,position:6130},type:"(itemId: string) => void"}],l={props:o,state:n,api:a};export{l as d,s as g};
