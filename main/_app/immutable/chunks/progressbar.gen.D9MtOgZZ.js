const c=`import { getProgressbarDefaultConfig, createProgressbar } from '@agnos-ui/core-bootstrap/components/progressbar';
/**
 * Retrieve a shallow copy of the default Progressbar config
 * @returns the default Progressbar config
 */
const export_getProgressbarDefaultConfig = getProgressbarDefaultConfig;
export { export_getProgressbarDefaultConfig as getProgressbarDefaultConfig };
/**
 * Create a Progressbar with given config props
 * @param config - an optional progressbar config
 * @returns a ProgressbarWidget
 */
const export_createProgressbar = createProgressbar;
export { export_createProgressbar as createProgressbar };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuZ2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuZ2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQywyQkFBMkIsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGlEQUFpRCxDQUFDO0FBTS9HOzs7R0FHRztBQUNILE1BQU0sa0NBQWtDLEdBQTJCLDJCQUFrQyxDQUFDO0FBQ3RHLE9BQU8sRUFBQyxrQ0FBa0MsSUFBSSwyQkFBMkIsRUFBQyxDQUFDO0FBa04zRTs7OztHQUlHO0FBRUgsTUFBTSx3QkFBd0IsR0FBcUMsaUJBQXdCLENBQUM7QUFDNUYsT0FBTyxFQUFDLHdCQUF3QixJQUFJLGlCQUFpQixFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFByb2dyZXNzYmFyRGVmYXVsdENvbmZpZywgY3JlYXRlUHJvZ3Jlc3NiYXJ9IGZyb20gJ0BhZ25vcy11aS9jb3JlLWJvb3RzdHJhcC9jb21wb25lbnRzL3Byb2dyZXNzYmFyJztcbmltcG9ydCB0eXBlIHtXaWRnZXRTbG90Q29udGV4dCwgU2xvdENvbnRlbnQsIFdpZGdldCwgV2lkZ2V0RmFjdG9yeSwgRGlyZWN0aXZlfSBmcm9tICdAYWdub3MtdWkvYW5ndWxhci1oZWFkbGVzcyc7XG5pbXBvcnQgdHlwZSB7QlNDb250ZXh0dWFsQ2xhc3N9IGZyb20gJ0BhZ25vcy11aS9jb3JlLWJvb3RzdHJhcC90eXBlcyc7XG5cblxuXG4vKipcbiAqIFJldHJpZXZlIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBkZWZhdWx0IFByb2dyZXNzYmFyIGNvbmZpZ1xuICogQHJldHVybnMgdGhlIGRlZmF1bHQgUHJvZ3Jlc3NiYXIgY29uZmlnXG4gKi9cbmNvbnN0IGV4cG9ydF9nZXRQcm9ncmVzc2JhckRlZmF1bHRDb25maWc6ICgpID0+IFByb2dyZXNzYmFyUHJvcHMgPSBnZXRQcm9ncmVzc2JhckRlZmF1bHRDb25maWcgYXMgYW55O1xuZXhwb3J0IHtleHBvcnRfZ2V0UHJvZ3Jlc3NiYXJEZWZhdWx0Q29uZmlnIGFzIGdldFByb2dyZXNzYmFyRGVmYXVsdENvbmZpZ307XG5cblxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGNvbnRleHQgZm9yIGEgUHJvZ3Jlc3NiYXIgd2lkZ2V0LlxuICogVGhpcyBpbnRlcmZhY2UgaXMgdXNlZCB0byBkZWZpbmUgdGhlIGNvbnRleHQgb2JqZWN0IHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBQcm9ncmVzc2JhciB3aWRnZXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NiYXJDb250ZXh0IGV4dGVuZHMgV2lkZ2V0U2xvdENvbnRleHQ8UHJvZ3Jlc3NiYXJXaWRnZXQ+IHt9XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgYSBQcm9ncmVzc2JhciBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NiYXJTdGF0ZSB7XG5cdFxuXHQvKipcblx0ICogUGVyY2VudGFnZSBvZiBjb21wbGV0aW9uLlxuXHQgKi9cblx0cGVyY2VudGFnZTogbnVtYmVyO1xuXHRcblx0LyoqXG5cdCAqIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYWJvdmUgaXRzIG1pbmltdW0gdmFsdWUuXG5cdCAqL1xuXHRzdGFydGVkOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIGB0cnVlYCBpZiB0aGUgdmFsdWUgaGFzIHJlYWNoZWQgaXRzIG1heGltdW0gdmFsdWUuXG5cdCAqL1xuXHRmaW5pc2hlZDogYm9vbGVhbjtcblx0XG5cdC8qKlxuXHQgKiBUaGUgYXJpYSB2YWx1ZSB0ZXh0LlxuXHQgKi9cblx0YXJpYVZhbHVlVGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBtaW5pbXVtIHZhbHVlLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAwYFxuXHQgKi9cblx0bWluOiBudW1iZXI7XG5cdFxuXHQvKipcblx0ICogVGhlIG1heGltdW0gdmFsdWUuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYDEwMGBcblx0ICovXG5cdG1heDogbnVtYmVyO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBjdXJyZW50IHZhbHVlLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAwYFxuXHQgKi9cblx0dmFsdWU6IG51bWJlcjtcblx0XG5cdC8qKlxuXHQgKiBUaGUgYXJpYSBsYWJlbC5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgJ1Byb2dyZXNzYmFyJ2Bcblx0ICovXG5cdGFyaWFMYWJlbDogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIENTUyBjbGFzc2VzIHRvIGJlIGFwcGxpZWQgb24gdGhlIHdpZGdldCBtYWluIGNvbnRhaW5lclxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnJ2Bcblx0ICovXG5cdGNsYXNzTmFtZTogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIEdsb2JhbCB0ZW1wbGF0ZSBmb3IgdGhlIFByb2dyZXNzYmFyLlxuXHQgKi9cblx0c3RydWN0dXJlOiBTbG90Q29udGVudDxQcm9ncmVzc2JhckNvbnRleHQ+O1xuXHRcblx0LyoqXG5cdCAqIExhYmVsIG9mIHRoZSBwcm9ncmVzcy5cblx0ICovXG5cdGNoaWxkcmVuOiBTbG90Q29udGVudDxQcm9ncmVzc2JhckNvbnRleHQ+O1xuXHRcblx0LyoqXG5cdCAqIEhlaWdodCBvZiB0aGUgcHJvZ3Jlc3NiYXIsIGNhbiBiZSBhbnkgdmFsaWQgY3NzIGhlaWdodCB2YWx1ZS5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgJydgXG5cdCAqL1xuXHRoZWlnaHQ6IHN0cmluZztcblx0XG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHNob3dzIGEgc3RyaXBlZCBwcm9ncmVzc2Jhci5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG5cdCAqL1xuXHRzdHJpcGVkOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgYW5pbWF0ZXMgYSBzdHJpcGVkIHByb2dyZXNzYmFyLlxuXHQgKiBUYWtlcyBlZmZlY3Qgb25seSBmb3IgYnJvd3NlcnMgc3VwcG9ydGluZyBDU1MzIGFuaW1hdGlvbnMsIGFuZCBpZiBgc3RyaXBlZGAgaXMgYHRydWVgLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcblx0ICovXG5cdGFuaW1hdGVkOiBib29sZWFuO1xuXHRcblx0LyoqXG5cdCAqIFR5cGUgb2YgdGhlIHByb2dyZXNzYmFyLCBmb2xsb3dpbmcgYm9vdHN0cmFwIHR5cGVzLlxuXHQgKi9cblx0dHlwZTogQlNDb250ZXh0dWFsQ2xhc3MgfCB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgcHJvcGVydGllcyBmb3IgdGhlIFByb2dyZXNzYmFyIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9ncmVzc2JhclByb3BzIHtcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm4gdGhlIHZhbHVlIGZvciB0aGUgJ2FyaWEtdmFsdWV0ZXh0JyBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB2YWx1ZSAtIGN1cnJlbnQgdmFsdWVcblx0ICogQHBhcmFtIG1pbmltdW0gLSBtaW5pbXVtIHZhbHVlXG5cdCAqIEBwYXJhbSBtYXhpbXVtIC0gbWF4aW11bSB2YWx1ZVxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlXG5cdCAqIGBgYHRzXG5cdCAqICgpID0+IHVuZGVmaW5lZFxuXHQgKiBgYGBcblx0ICovXG5cdGFyaWFWYWx1ZVRleHRGbjogKHZhbHVlOiBudW1iZXIsIG1pbmltdW06IG51bWJlciwgbWF4aW11bTogbnVtYmVyKSA9PiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdFxuXHQvKipcblx0ICogVGhlIG1pbmltdW0gdmFsdWUuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYDBgXG5cdCAqL1xuXHRtaW46IG51bWJlcjtcblx0XG5cdC8qKlxuXHQgKiBUaGUgbWF4aW11bSB2YWx1ZS5cblx0ICpcblx0ICogQGRlZmF1bHRWYWx1ZSBgMTAwYFxuXHQgKi9cblx0bWF4OiBudW1iZXI7XG5cdFxuXHQvKipcblx0ICogVGhlIGN1cnJlbnQgdmFsdWUuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYDBgXG5cdCAqL1xuXHR2YWx1ZTogbnVtYmVyO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBhcmlhIGxhYmVsLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnUHJvZ3Jlc3NiYXInYFxuXHQgKi9cblx0YXJpYUxhYmVsOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ1NTIGNsYXNzZXMgdG8gYmUgYXBwbGllZCBvbiB0aGUgd2lkZ2V0IG1haW4gY29udGFpbmVyXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYCcnYFxuXHQgKi9cblx0Y2xhc3NOYW1lOiBzdHJpbmc7XG5cdFxuXHQvKipcblx0ICogR2xvYmFsIHRlbXBsYXRlIGZvciB0aGUgUHJvZ3Jlc3NiYXIuXG5cdCAqL1xuXHRzdHJ1Y3R1cmU6IFNsb3RDb250ZW50PFByb2dyZXNzYmFyQ29udGV4dD47XG5cdFxuXHQvKipcblx0ICogTGFiZWwgb2YgdGhlIHByb2dyZXNzLlxuXHQgKi9cblx0Y2hpbGRyZW46IFNsb3RDb250ZW50PFByb2dyZXNzYmFyQ29udGV4dD47XG5cdFxuXHQvKipcblx0ICogSGVpZ2h0IG9mIHRoZSBwcm9ncmVzc2JhciwgY2FuIGJlIGFueSB2YWxpZCBjc3MgaGVpZ2h0IHZhbHVlLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGAnJ2Bcblx0ICovXG5cdGhlaWdodDogc3RyaW5nO1xuXHRcblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgc2hvd3MgYSBzdHJpcGVkIHByb2dyZXNzYmFyLlxuXHQgKlxuXHQgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcblx0ICovXG5cdHN0cmlwZWQ6IGJvb2xlYW47XG5cdFxuXHQvKipcblx0ICogSWYgYHRydWVgLCBhbmltYXRlcyBhIHN0cmlwZWQgcHJvZ3Jlc3NiYXIuXG5cdCAqIFRha2VzIGVmZmVjdCBvbmx5IGZvciBicm93c2VycyBzdXBwb3J0aW5nIENTUzMgYW5pbWF0aW9ucywgYW5kIGlmIGBzdHJpcGVkYCBpcyBgdHJ1ZWAuXG5cdCAqXG5cdCAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuXHQgKi9cblx0YW5pbWF0ZWQ6IGJvb2xlYW47XG5cdFxuXHQvKipcblx0ICogVHlwZSBvZiB0aGUgcHJvZ3Jlc3NiYXIsIGZvbGxvd2luZyBib290c3RyYXAgdHlwZXMuXG5cdCAqL1xuXHR0eXBlOiBCU0NvbnRleHR1YWxDbGFzcyB8IHVuZGVmaW5lZDtcbn1cblxuXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFByb2dyZXNzYmFyIHdpZGdldC5cbiAqXG4gKiBUaGlzIHR5cGUgZGVmaW5lcyB0aGUgc3RydWN0dXJlIG9mIGEgUHJvZ3Jlc3NiYXIgd2lkZ2V0LCBpbmNsdWRpbmcgaXRzIHByb3BlcnRpZXMsIHN0YXRlLCBhbmQgZGlyZWN0aXZlcy5cbiAqL1xuZXhwb3J0IHR5cGUgUHJvZ3Jlc3NiYXJXaWRnZXQgPSBXaWRnZXQ8UHJvZ3Jlc3NiYXJQcm9wcywgUHJvZ3Jlc3NiYXJTdGF0ZSwgb2JqZWN0LCBQcm9ncmVzc2JhckRpcmVjdGl2ZXM+O1xuXG5cblxuLyoqXG4gKiBDcmVhdGUgYSBQcm9ncmVzc2JhciB3aXRoIGdpdmVuIGNvbmZpZyBwcm9wc1xuICogQHBhcmFtIGNvbmZpZyAtIGFuIG9wdGlvbmFsIHByb2dyZXNzYmFyIGNvbmZpZ1xuICogQHJldHVybnMgYSBQcm9ncmVzc2JhcldpZGdldFxuICovXG5cbmNvbnN0IGV4cG9ydF9jcmVhdGVQcm9ncmVzc2JhcjogV2lkZ2V0RmFjdG9yeTxQcm9ncmVzc2JhcldpZGdldD4gPSBjcmVhdGVQcm9ncmVzc2JhciBhcyBhbnk7XG5leHBvcnQge2V4cG9ydF9jcmVhdGVQcm9ncmVzc2JhciBhcyBjcmVhdGVQcm9ncmVzc2Jhcn07XG5cbi8qKlxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyBkaXJlY3RpdmVzIGZvciBhIHByb2dyZXNzIGJhciBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NiYXJEaXJlY3RpdmVzIHtcblx0XG5cdC8qKlxuXHQgKiBBIGRpcmVjdGl2ZSB0byBiZSBhcHBsaWVkIHRvIHRoZSBtYWluIGNvbnRhaW5lciB0aGF0IGhhbmRsZXMgYXJpYSBhdHRyaWJ1dGVzLlxuXHQgKi9cblx0YXJpYURpcmVjdGl2ZTogRGlyZWN0aXZlO1xufVxuXG4iXX0=`;export{c as default};
