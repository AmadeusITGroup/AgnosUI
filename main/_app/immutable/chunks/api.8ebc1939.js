import{c as u,r as t,b as l,d as h,n as r}from"./stores.a36d03c4.js";const I=({dimension:i="height",showClasses:o,hideClasses:n,animationPendingClasses:s}={})=>u((e,d,f,p)=>{if(f){let{maxSize:a,minSize:c}=p;a||(t(e,s),t(e,n),l(e,o),a=e.getBoundingClientRect()[i]+"px",p.maxSize=a),c||(t(e,s),t(e,o),l(e,n),c=e.getBoundingClientRect()[i]+"px",p.minSize=c),t(e,o),t(e,n);const m=d==="show"?[c,a]:[a,c];e.style[i]=m[0],h(e),l(e,s),h(e),e.style[i]=m[1]}else t(e,d==="show"?n:o);return()=>{t(e,s),l(e,d==="show"?o:n),e.style[i]=""}}),b={dimension:"height",hideClasses:["collapse"],showClasses:["collapse","show"],animationPendingClasses:["collapsing"]},g=I(b),y={closeOthers:!1,onShown:r,onHidden:r,className:"",itemId:"",itemDestroyOnHide:!1,itemDisabled:!1,itemCollapsed:!0,itemAnimation:!0,itemTransition:g,onItemShown:r,onItemHidden:r,onItemCollapsedChange:r,slotItemStructure:void 0,slotItemBody:void 0,slotItemHeader:void 0,itemClass:"",itemHeaderClass:"",itemButtonClass:"",itemCollapseClass:"",itemBodyClass:""};function V(){return{...y}}const w=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"closeOthers",description:"If `true`, only one item at the time can stay open.",fileName:"core/lib/accordion.ts",start:{line:57,character:2,position:1841},end:{line:57,character:23,position:1862},type:"boolean",defaultValue:"false"},{name:"itemAnimation",description:"If `true`, accordion-item will be animated.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:101,character:2,position:3028},end:{line:101,character:25,position:3051},type:"boolean",defaultValue:"true"},{name:"itemBodyClass",description:`Classes to add on the accordion-item body DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:177,character:2,position:5098},end:{line:177,character:24,position:5120},type:"string",defaultValue:"''"},{name:"itemButtonClass",description:`Classes to add on the accordion-item toggle button DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:165,character:2,position:4814},end:{line:165,character:26,position:4838},type:"string",defaultValue:"''"},{name:"itemClass",description:`Classes to add on the accordion-item DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:153,character:2,position:4531},end:{line:153,character:20,position:4549},type:"string",defaultValue:"''"},{name:"itemCollapseClass",description:`Classes to add on the accordion-item collapse DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:171,character:2,position:4957},end:{line:171,character:28,position:4983},type:"string",defaultValue:"''"},{name:"itemCollapsed",description:"If `true`, the accordion-item will be collapsed. Otherwise, it will be expanded.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:95,character:2,position:2901},end:{line:95,character:25,position:2924},type:"boolean",defaultValue:"true"},{name:"itemDestroyOnHide",description:"If `true`, the content of the accordion-item collapse will be removed from the DOM. It will be just hidden otherwise.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:82,character:2,position:2508},end:{line:82,character:29,position:2535},type:"boolean",defaultValue:"false"},{name:"itemDisabled",description:`If \`true\`, the accordion-item will be disabled.
It will not react to user's clicks, but still will be possible to toggle programmatically.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:89,character:2,position:2738},end:{line:89,character:24,position:2760},type:"boolean",defaultValue:"false"},{name:"itemHeaderClass",description:`Classes to add on the accordion-item header DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:159,character:2,position:4666},end:{line:159,character:26,position:4690},type:"string",defaultValue:"''"},{name:"itemId",description:`The id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:76,character:2,position:2315},end:{line:76,character:17,position:2330},type:"string",defaultValue:"''"},{name:"itemTransition",description:`The transition to use for the accordion-item collapse when is toggled.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:107,character:2,position:3182},end:{line:107,character:31,position:3211},type:"TransitionFn",defaultValue:"collapseVerticalTransition"},{name:"onHidden",description:`An event fired when an item is hidden.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:69,character:2,position:2095},end:{line:69,character:37,position:2130},type:"(itemId: string) => void",defaultValue:"noop"},{name:"onItemCollapsedChange",description:`An event fired when the \`collapsed\` value changes.

Event payload is the new value of collapsed.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:127,character:2,position:3621},end:{line:127,character:54,position:3673},type:"(collapsed: boolean) => void",defaultValue:"noop"},{name:"onItemHidden",description:`An event fired when an item is hidden.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:119,character:2,position:3432},end:{line:119,character:27,position:3457},type:"() => void",defaultValue:"noop"},{name:"onItemShown",description:`An event fired when an item is shown.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:113,character:2,position:3309},end:{line:113,character:26,position:3333},type:"() => void",defaultValue:"noop"},{name:"onShown",description:`An event fired when an item is shown.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:63,character:2,position:1961},end:{line:63,character:36,position:1995},type:"(itemId: string) => void",defaultValue:"noop"},{name:"slotItemBody",description:`Content present in the accordion body.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:141,character:2,position:4194},end:{line:141,character:50,position:4242},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemHeader",description:`Content present in the accordion button inside the accordion header.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:147,character:2,position:4371},end:{line:147,character:52,position:4421},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemStructure",description:`Structure of the accordion-item. The default item structure is: accordion-item
contains accordion header and accordion collapse; the accordion header contains the accordion button
(that contains \`slotItemHeader\`), while the accordion collapse contains the accordion body (that contains slotItemBody).

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:135,character:2,position:4042},end:{line:135,character:55,position:4095},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"}],C=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"itemsWidget",description:"Array containing all the accordion-items contained in the accordion.",fileName:"core/lib/accordion.ts",start:{line:184,character:2,position:5277},end:{line:184,character:37,position:5312},type:"AccordionItemWidget[]"}],v=[{name:"collapse",description:`Given the itemId, will collapse the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:205,character:2,position:5834},end:{line:205,character:33,position:5865},type:"(itemId: string) => void"},{name:"collapseAll",description:"It will collapse all the accordion-items in the accordion.",fileName:"core/lib/accordion.ts",start:{line:221,character:2,position:6267},end:{line:221,character:22,position:6287},type:"() => void"},{name:"expand",description:`Given the itemId, will expand the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:199,character:2,position:5666},end:{line:199,character:31,position:5695},type:"(itemId: string) => void"},{name:"expandAll",description:"It will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.",fileName:"core/lib/accordion.ts",start:{line:217,character:2,position:6174},end:{line:217,character:20,position:6192},type:"() => void"},{name:"isExpanded",description:"Given the itemId, it will return if such item is expanded or not.\n\nIf the itemId is not a valid id it will return `false`.",fileName:"core/lib/accordion.ts",start:{line:193,character:2,position:5493},end:{line:193,character:38,position:5529},type:"(itemId: string) => boolean"},{name:"registerItem",description:"Creates a new in accordionItem.",fileName:"core/lib/accordion.ts",start:{line:225,character:2,position:6335},end:{line:225,character:82,position:6415},type:"(itemConfig?: PropsConfig<AccordionItemProps>) => AccordionItemWidget"},{name:"toggle",description:`Given the itemId, will toggle the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:211,character:2,position:6002},end:{line:211,character:31,position:6031},type:"(itemId: string) => void"}],S={props:w,state:C,api:v};export{S as d,V as g};
