const e=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/lib/slider.ts",start:{line:64,character:2,position:1470},end:{line:64,character:20,position:1488},type:"boolean",defaultValue:"false"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/lib/slider.ts",start:{line:49,character:2,position:1191},end:{line:49,character:14,position:1203},type:"number",defaultValue:"100"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/lib/slider.ts",start:{line:44,character:2,position:1113},end:{line:44,character:14,position:1125},type:"number",defaultValue:"0"},{name:"onValuesChange",description:`An event emitted when slider values are changed

Event payload equals to the updated slider values`,fileName:"core/lib/slider.ts",start:{line:130,character:2,position:2744},end:{line:130,character:45,position:2787},type:"(values: number[]) => void",defaultValue:"noop"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/lib/slider.ts",start:{line:59,character:2,position:1361},end:{line:59,character:20,position:1379},type:"boolean",defaultValue:"false"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/lib/slider.ts",start:{line:54,character:2,position:1252},end:{line:54,character:19,position:1269},type:"number",defaultValue:"1"},{name:"values",description:"Current slider values",fileName:"core/lib/slider.ts",start:{line:74,character:2,position:1624},end:{line:74,character:19,position:1641},type:"number[]",defaultValue:"[0]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/lib/slider.ts",start:{line:69,character:2,position:1567},end:{line:69,character:20,position:1585},type:"boolean",defaultValue:"false"}],i=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"combinedLabelDisplay",description:"If true, the label when the handles are close is visible",fileName:"core/lib/slider.ts",start:{line:106,character:2,position:2187},end:{line:106,character:32,position:2217},type:"boolean"},{name:"combinedLabelPositionLeft",description:"Combined label left offset in %",fileName:"core/lib/slider.ts",start:{line:86,character:2,position:1818},end:{line:86,character:36,position:1852},type:"number"},{name:"combinedLabelPositionTop",description:"Combined label top offset in %",fileName:"core/lib/slider.ts",start:{line:91,character:2,position:1900},end:{line:91,character:35,position:1933},type:"number"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/lib/slider.ts",start:{line:64,character:2,position:1470},end:{line:64,character:20,position:1488},type:"boolean"},{name:"handleDisplayOptions",description:"Array of objects representing handle display options",fileName:"core/lib/slider.ts",start:{line:121,character:2,position:2509},end:{line:121,character:47,position:2554},type:"HandleDisplayOptions[]"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/lib/slider.ts",start:{line:49,character:2,position:1191},end:{line:49,character:14,position:1203},type:"number"},{name:"maxValueLabelDisplay",description:"If true, the maximum label will be visible",fileName:"core/lib/slider.ts",start:{line:101,character:2,position:2083},end:{line:101,character:32,position:2113},type:"boolean"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/lib/slider.ts",start:{line:44,character:2,position:1113},end:{line:44,character:14,position:1125},type:"number"},{name:"minValueLabelDisplay",description:"If true, the minimum label will be visible",fileName:"core/lib/slider.ts",start:{line:96,character:2,position:1993},end:{line:96,character:32,position:2023},type:"boolean"},{name:"progressDisplayOptions",description:"Array of objects representing progress display options",fileName:"core/lib/slider.ts",start:{line:116,character:2,position:2390},end:{line:116,character:51,position:2439},type:"ProgressDisplayOptions[]"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/lib/slider.ts",start:{line:59,character:2,position:1361},end:{line:59,character:20,position:1379},type:"boolean"},{name:"sortedHandles",description:"Array of the sorted handles to display",fileName:"core/lib/slider.ts",start:{line:111,character:2,position:2273},end:{line:111,character:47,position:2318},type:"{value: number; id: number}[]"},{name:"sortedValues",description:"Sorted slider values",fileName:"core/lib/slider.ts",start:{line:81,character:2,position:1746},end:{line:81,character:25,position:1769},type:"number[]"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/lib/slider.ts",start:{line:54,character:2,position:1252},end:{line:54,character:19,position:1269},type:"number"},{name:"values",description:"Current slider values",fileName:"core/lib/slider.ts",start:{line:74,character:2,position:1624},end:{line:74,character:19,position:1641},type:"number[]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/lib/slider.ts",start:{line:69,character:2,position:1567},end:{line:69,character:20,position:1585},type:"boolean"}],t=[],a={props:e,state:i,api:t};export{a as d};
