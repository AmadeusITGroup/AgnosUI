const l=`import { getSelectDefaultConfig, createSelect } from '@agnos-ui/core-bootstrap/components/select';
/**
 * Retrieve a shallow copy of the default Select config
 * @returns the default Select config
 */
const export_getSelectDefaultConfig = getSelectDefaultConfig;
export { export_getSelectDefaultConfig as getSelectDefaultConfig };
/**
 * Creates a new select widget instance.
 * @param config - config of the modal, either as a store or as an object containing values or stores.
 * @returns a new select widget instance
 */
const export_createSelect = createSelect;
export { export_createSelect as createSelect };
//# sourceMappingURL=data:application/json;base64,`;export{l as default};
