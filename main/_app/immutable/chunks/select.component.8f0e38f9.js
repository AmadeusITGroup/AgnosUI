const t=`import { UseDirective, callWidgetFactory, createSelect, patchSimpleChanges } from '@agnos-ui/angular-headless';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class SelectComponent {
    constructor() {
        /**
         * Callback called when the text filter change
         */
        this.filterTextChange = new EventEmitter();
        this._widget = callWidgetFactory(createSelect, 'select');
        this.api = this._widget.api;
        this.state$ = toSignal(this._widget.state$, { requireSync: true });
        this._widget.patch({
            onFilterTextChange: (event) => this.filterTextChange.emit(event),
        });
    }
    ngOnChanges(changes) {
        patchSimpleChanges(this._widget.patch, changes);
    }
    itemCtxTrackBy(_, itemCtx) {
        return itemCtx.id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: SelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.8", type: SelectComponent, isStandalone: true, selector: "[auSelect]", inputs: { items: ["auItems", "items"], opened: ["auOpened", "opened"], filterText: ["auFilterText", "filterText"], className: ["auClassName", "className"], disabled: ["auDisabled", "disabled"], matchFn: ["auMatchFn", "matchFn"], itemId: ["auItemId", "itemId"], selected: ["auSelected", "selected"], loading: ["auLoading", "loading"] }, outputs: { filterTextChange: "auFilterTextChange" }, host: { properties: { "class": "\\"au-select dropdown input-group input-group-sm mb-3 d-block\\" + state$().className" } }, usesOnChanges: true, ngImport: i0, template: "<ng-container>\\n\\t<div [auUse]=\\"_widget.directives.hasFocusDirective\\" role=\\"combobox\\" class=\\"input-group\\" aria-haspopup=\\"listbox\\" aria-expanded=\\"true\\">\\n\\t\\t<ng-container *ngIf=\\"state$().selected as selected\\">\\n\\t\\t\\t<div *ngIf=\\"selected.length\\" class=\\"input-group-text\\" (mousedown)=\\"$event.preventDefault()\\">\\n\\t\\t\\t\\t<div *ngFor=\\"let item of selected\\" class=\\"badge rounded-pill text-bg-primary d-inline-flex align-items-center m-1\\">\\n\\t\\t\\t\\t\\t<div class=\\"me-1\\">{{ item }}</div>\\n\\t\\t\\t\\t\\t<span role=\\"button\\" tabindex=\\"-1\\" aria-label=\\"Close\\" (click)=\\"api.unselect(item)\\">x</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</ng-container>\\n\\t\\t<input\\n\\t\\t\\ttype=\\"text\\"\\n\\t\\t\\tclass=\\"form-control\\"\\n\\t\\t\\t[value]=\\"state$().filterText\\"\\n\\t\\t\\taria-autocomplete=\\"list\\"\\n\\t\\t\\tautoCorrect=\\"off\\"\\n\\t\\t\\tautoCapitalize=\\"none\\"\\n\\t\\t\\tautoComplete=\\"off\\"\\n\\t\\t\\t(keydown)=\\"_widget.actions.onInputKeydown($event)\\"\\n\\t\\t\\t(input)=\\"_widget.actions.onInput($event)\\"\\n\\t\\t/>\\n\\t</div>\\n\\t<ul\\n\\t\\t*ngIf=\\"state$().opened && state$().visible.length\\"\\n\\t\\t[auUse]=\\"_widget.directives.hasFocusDirective\\"\\n\\t\\tclass=\\"dropdown-menu show w-100\\"\\n\\t\\tdata-popper-placement=\\"bottom-start\\"\\n\\t\\t(mousedown)=\\"$event.preventDefault()\\"\\n\\t>\\n\\t\\t<li\\n\\t\\t\\t*ngFor=\\"let itemCtx of state$().visible; trackBy: itemCtxTrackBy\\"\\n\\t\\t\\tclass=\\"dropdown-item position-relative\\"\\n\\t\\t\\t[class.bg-light]=\\"itemCtx === state$().highlighted\\"\\n\\t\\t>\\n\\t\\t\\t<div class=\\"form-check\\">\\n\\t\\t\\t\\t<input type=\\"checkbox\\" tabindex=\\"-1\\" class=\\"form-check-input\\" [id]=\\"itemCtx.id\\" [checked]=\\"itemCtx.selected\\" (change)=\\"itemCtx.toggle()\\" />\\n\\t\\t\\t\\t<label [for]=\\"itemCtx.id\\" class=\\"form-check-label stretched-link\\" (click)=\\"itemCtx.toggle(); $event.preventDefault()\\">\\n\\t\\t\\t\\t\\t{{ itemCtx.item }}\\n\\t\\t\\t\\t</label>\\n\\t\\t\\t</div>\\n\\t\\t</li>\\n\\t</ul>\\n</ng-container>\\n<style>\\n\\t.input-group-text {\\n\\t\\tbackground-color: transparent;\\n\\t}\\n\\t.dropdown-menu {\\n\\t\\tposition: absolute;\\n\\t\\tinset: 0px auto auto 0px;\\n\\t\\tmargin: 0px;\\n\\t\\ttransform: translate3d(0px, 45px, 0px);\\n\\t}\\n</style>\\n", styles: ["\\n\\t.input-group-text {\\n\\t\\tbackground-color: transparent;\\n\\t}\\n\\t.dropdown-menu {\\n\\t\\tposition: absolute;\\n\\t\\tinset: 0px auto auto 0px;\\n\\t\\tmargin: 0px;\\n\\t\\ttransform: translate3d(0px, 45px, 0px);\\n\\t}\\n"], dependencies: [{ kind: "directive", type: UseDirective, selector: "[auUse]", inputs: ["auUse", "auUseParams"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: SelectComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, imports: [UseDirective, CommonModule], changeDetection: ChangeDetectionStrategy.OnPush, selector: '[auSelect]', host: {
                        '[class]': '"au-select dropdown input-group input-group-sm mb-3 d-block" + state$().className',
                    }, template: "<ng-container>\\n\\t<div [auUse]=\\"_widget.directives.hasFocusDirective\\" role=\\"combobox\\" class=\\"input-group\\" aria-haspopup=\\"listbox\\" aria-expanded=\\"true\\">\\n\\t\\t<ng-container *ngIf=\\"state$().selected as selected\\">\\n\\t\\t\\t<div *ngIf=\\"selected.length\\" class=\\"input-group-text\\" (mousedown)=\\"$event.preventDefault()\\">\\n\\t\\t\\t\\t<div *ngFor=\\"let item of selected\\" class=\\"badge rounded-pill text-bg-primary d-inline-flex align-items-center m-1\\">\\n\\t\\t\\t\\t\\t<div class=\\"me-1\\">{{ item }}</div>\\n\\t\\t\\t\\t\\t<span role=\\"button\\" tabindex=\\"-1\\" aria-label=\\"Close\\" (click)=\\"api.unselect(item)\\">x</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</ng-container>\\n\\t\\t<input\\n\\t\\t\\ttype=\\"text\\"\\n\\t\\t\\tclass=\\"form-control\\"\\n\\t\\t\\t[value]=\\"state$().filterText\\"\\n\\t\\t\\taria-autocomplete=\\"list\\"\\n\\t\\t\\tautoCorrect=\\"off\\"\\n\\t\\t\\tautoCapitalize=\\"none\\"\\n\\t\\t\\tautoComplete=\\"off\\"\\n\\t\\t\\t(keydown)=\\"_widget.actions.onInputKeydown($event)\\"\\n\\t\\t\\t(input)=\\"_widget.actions.onInput($event)\\"\\n\\t\\t/>\\n\\t</div>\\n\\t<ul\\n\\t\\t*ngIf=\\"state$().opened && state$().visible.length\\"\\n\\t\\t[auUse]=\\"_widget.directives.hasFocusDirective\\"\\n\\t\\tclass=\\"dropdown-menu show w-100\\"\\n\\t\\tdata-popper-placement=\\"bottom-start\\"\\n\\t\\t(mousedown)=\\"$event.preventDefault()\\"\\n\\t>\\n\\t\\t<li\\n\\t\\t\\t*ngFor=\\"let itemCtx of state$().visible; trackBy: itemCtxTrackBy\\"\\n\\t\\t\\tclass=\\"dropdown-item position-relative\\"\\n\\t\\t\\t[class.bg-light]=\\"itemCtx === state$().highlighted\\"\\n\\t\\t>\\n\\t\\t\\t<div class=\\"form-check\\">\\n\\t\\t\\t\\t<input type=\\"checkbox\\" tabindex=\\"-1\\" class=\\"form-check-input\\" [id]=\\"itemCtx.id\\" [checked]=\\"itemCtx.selected\\" (change)=\\"itemCtx.toggle()\\" />\\n\\t\\t\\t\\t<label [for]=\\"itemCtx.id\\" class=\\"form-check-label stretched-link\\" (click)=\\"itemCtx.toggle(); $event.preventDefault()\\">\\n\\t\\t\\t\\t\\t{{ itemCtx.item }}\\n\\t\\t\\t\\t</label>\\n\\t\\t\\t</div>\\n\\t\\t</li>\\n\\t</ul>\\n</ng-container>\\n<style>\\n\\t.input-group-text {\\n\\t\\tbackground-color: transparent;\\n\\t}\\n\\t.dropdown-menu {\\n\\t\\tposition: absolute;\\n\\t\\tinset: 0px auto auto 0px;\\n\\t\\tmargin: 0px;\\n\\t\\ttransform: translate3d(0px, 45px, 0px);\\n\\t}\\n</style>\\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { items: [{
                type: Input,
                args: ['auItems']
            }], opened: [{
                type: Input,
                args: ['auOpened']
            }], filterText: [{
                type: Input,
                args: ['auFilterText']
            }], className: [{
                type: Input,
                args: ['auClassName']
            }], filterTextChange: [{
                type: Output,
                args: ['auFilterTextChange']
            }], disabled: [{
                type: Input,
                args: ['auDisabled']
            }], matchFn: [{
                type: Input,
                args: ['auMatchFn']
            }], itemId: [{
                type: Input,
                args: ['auItemId']
            }], selected: [{
                type: Input,
                args: ['auSelected']
            }], loading: [{
                type: Input,
                args: ['auLoading']
            }] } });
//# sourceMappingURL=data:application/json;base64,`;export{t as default};
