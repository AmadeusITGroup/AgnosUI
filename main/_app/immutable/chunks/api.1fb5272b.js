import{c as u,r as i,a as l,b as m,n as r}from"./modal.5f303882.js";const I=({dimension:t="height",showClasses:o,hideClasses:n,animationPendingClasses:s}={})=>u((e,d,f,p)=>{if(f){let{maxSize:a,minSize:c}=p;a||(i(e,s),i(e,n),l(e,o),a=e.getBoundingClientRect()[t]+"px",p.maxSize=a),c||(i(e,s),i(e,o),l(e,n),c=e.getBoundingClientRect()[t]+"px",p.minSize=c),i(e,o),i(e,n);const h=d==="show"?[c,a]:[a,c];e.style[t]=h[0],m(e),l(e,s),m(e),e.style[t]=h[1]}else i(e,d==="show"?n:o);return()=>{i(e,s),l(e,d==="show"?o:n),e.style[t]=""}}),b={dimension:"height",hideClasses:["collapse"],showClasses:["collapse","show"],animationPendingClasses:["collapsing"]},g=I(b),y={closeOthers:!1,onShown:r,onHidden:r,accordionClass:"",itemId:"",itemDestroyOnHide:!1,itemDisabled:!1,itemCollapsed:!0,itemAnimation:!0,itemTransition:g,onItemShown:r,onItemHidden:r,onItemCollapsedChange:r,slotItemStructure:void 0,slotItemBody:void 0,slotItemHeader:void 0,itemClass:"",itemHeaderClass:"",itemButtonClass:"",itemCollapseClass:"",itemBodyClass:""};function V(){return{...y}}const C=[{name:"accordionClass",description:"Classes to add on the accordion DOM element.",fileName:"core/lib/accordion.ts",start:{line:56,character:2,position:1750},end:{line:56,character:25,position:1773},type:"string",defaultValue:"''"},{name:"closeOthers",description:"If `true`, only one item at the time can stay open.",fileName:"core/lib/accordion.ts",start:{line:63,character:2,position:1915},end:{line:63,character:23,position:1936},type:"boolean",defaultValue:"false"},{name:"itemAnimation",description:"If `true`, accordion-item will be animated.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:107,character:2,position:3102},end:{line:107,character:25,position:3125},type:"boolean",defaultValue:"true"},{name:"itemBodyClass",description:`Classes to add on the accordion-item body DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:183,character:2,position:5172},end:{line:183,character:24,position:5194},type:"string",defaultValue:"''"},{name:"itemButtonClass",description:`Classes to add on the accordion-item toggle button DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:171,character:2,position:4888},end:{line:171,character:26,position:4912},type:"string",defaultValue:"''"},{name:"itemClass",description:`Classes to add on the accordion-item DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:159,character:2,position:4605},end:{line:159,character:20,position:4623},type:"string",defaultValue:"''"},{name:"itemCollapseClass",description:`Classes to add on the accordion-item collapse DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:177,character:2,position:5031},end:{line:177,character:28,position:5057},type:"string",defaultValue:"''"},{name:"itemCollapsed",description:"If `true`, the accordion-item will be collapsed. Otherwise, it will be expanded.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:101,character:2,position:2975},end:{line:101,character:25,position:2998},type:"boolean",defaultValue:"true"},{name:"itemDestroyOnHide",description:"If `true`, the content of the accordion-item collapse will be removed from the DOM. It will be just hidden otherwise.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:88,character:2,position:2582},end:{line:88,character:29,position:2609},type:"boolean",defaultValue:"false"},{name:"itemDisabled",description:`If \`true\`, the accordion-item will be disabled.
It will not react to user's clicks, but still will be possible to toggle programmatically.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:95,character:2,position:2812},end:{line:95,character:24,position:2834},type:"boolean",defaultValue:"false"},{name:"itemHeaderClass",description:`Classes to add on the accordion-item header DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:165,character:2,position:4740},end:{line:165,character:26,position:4764},type:"string",defaultValue:"''"},{name:"itemId",description:`The id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:82,character:2,position:2389},end:{line:82,character:17,position:2404},type:"string",defaultValue:"''"},{name:"itemTransition",description:`The transition to use for the accordion-item collapse when is toggled.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:113,character:2,position:3256},end:{line:113,character:31,position:3285},type:"TransitionFn",defaultValue:"collapseVerticalTransition"},{name:"onHidden",description:`An event fired when an item is hidden.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:75,character:2,position:2169},end:{line:75,character:37,position:2204},type:"(itemId: string) => void",defaultValue:"noop"},{name:"onItemCollapsedChange",description:`An event fired when the \`collapsed\` value changes.

Event payload is the new value of collapsed.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:133,character:2,position:3695},end:{line:133,character:54,position:3747},type:"(collapsed: boolean) => void",defaultValue:"noop"},{name:"onItemHidden",description:`An event fired when an item is hidden.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:125,character:2,position:3506},end:{line:125,character:27,position:3531},type:"() => void",defaultValue:"noop"},{name:"onItemShown",description:`An event fired when an item is shown.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:119,character:2,position:3383},end:{line:119,character:26,position:3407},type:"() => void",defaultValue:"noop"},{name:"onShown",description:`An event fired when an item is shown.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:69,character:2,position:2035},end:{line:69,character:36,position:2069},type:"(itemId: string) => void",defaultValue:"noop"},{name:"slotItemBody",description:`Content present in the accordion body.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:147,character:2,position:4268},end:{line:147,character:50,position:4316},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemHeader",description:`Content present in the accordion button inside the accordion header.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:153,character:2,position:4445},end:{line:153,character:52,position:4495},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemStructure",description:`Structure of the accordion-item. The default item structure is: accordion-item
contains accordion header and accordion collapse; the accordion header contains the accordion button
(that contains \`slotItemHeader\`), while the accordion collapse contains the accordion body (that contains slotItemBody).

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:141,character:2,position:4116},end:{line:141,character:55,position:4169},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"}],w=[{name:"accordionClass",description:"Classes to add on the accordion DOM element.",fileName:"core/lib/accordion.ts",start:{line:56,character:2,position:1750},end:{line:56,character:25,position:1773},type:"string"},{name:"itemsWidget",description:"Array containing all the accordion-items contained in the accordion.",fileName:"core/lib/accordion.ts",start:{line:190,character:2,position:5353},end:{line:190,character:37,position:5388},type:"AccordionItemWidget[]"}],v=[{name:"collapse",description:`Given the itemId, will collapse the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:211,character:2,position:5910},end:{line:211,character:33,position:5941},type:"(itemId: string) => void"},{name:"collapseAll",description:"It will collapse all the accordion-items in the accordion.",fileName:"core/lib/accordion.ts",start:{line:227,character:2,position:6343},end:{line:227,character:22,position:6363},type:"() => void"},{name:"expand",description:`Given the itemId, will expand the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:205,character:2,position:5742},end:{line:205,character:31,position:5771},type:"(itemId: string) => void"},{name:"expandAll",description:"It will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.",fileName:"core/lib/accordion.ts",start:{line:223,character:2,position:6250},end:{line:223,character:20,position:6268},type:"() => void"},{name:"isExpanded",description:"Given the itemId, it will return if such item is expanded or not.\n\nIf the itemId is not a valid id it will return `false`.",fileName:"core/lib/accordion.ts",start:{line:199,character:2,position:5569},end:{line:199,character:38,position:5605},type:"(itemId: string) => boolean"},{name:"registerItem",description:"Creates a new in accordionItem.",fileName:"core/lib/accordion.ts",start:{line:231,character:2,position:6411},end:{line:231,character:82,position:6491},type:"(itemConfig?: PropsConfig<AccordionItemProps>) => AccordionItemWidget"},{name:"toggle",description:`Given the itemId, will toggle the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:217,character:2,position:6078},end:{line:217,character:31,position:6107},type:"(itemId: string) => void"}],A={props:C,state:w,api:v};export{A as d,V as g};
