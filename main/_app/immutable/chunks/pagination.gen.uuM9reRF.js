const G=`import { getPaginationDefaultConfig, createPagination } from '@agnos-ui/core-bootstrap/components/pagination';
/**
 * Retrieve a shallow copy of the default Pagination config
 * @returns the default Pagination config
 */
const export_getPaginationDefaultConfig = getPaginationDefaultConfig;
export { export_getPaginationDefaultConfig as getPaginationDefaultConfig };
/**
 * Create a PaginationWidget with given config props
 * @param config - an optional alert config
 * @returns a PaginationWidget
 */
const export_createPagination = createPagination;
export { export_createPagination as createPagination };
//# sourceMappingURL=data:application/json;base64,`;export{G as default};
