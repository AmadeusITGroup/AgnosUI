import{c as u,r as i,a as l,b as m,n as r}from"./modal.becd5ecb.js";import"./index.es.5c333286.js";const I=({dimension:t="height",showClasses:o,hideClasses:n,animationPendingClasses:s}={})=>u((e,d,f,p)=>{if(f){let{maxSize:a,minSize:c}=p;a||(i(e,s),i(e,n),l(e,o),a=e.getBoundingClientRect()[t]+"px",p.maxSize=a),c||(i(e,s),i(e,o),l(e,n),c=e.getBoundingClientRect()[t]+"px",p.minSize=c),i(e,o),i(e,n);const h=d==="show"?[c,a]:[a,c];e.style[t]=h[0],m(e),l(e,s),m(e),e.style[t]=h[1]}else i(e,d==="show"?n:o);return()=>{i(e,s),l(e,d==="show"?o:n),e.style[t]=""}}),b={dimension:"height",hideClasses:["collapse"],showClasses:["collapse","show"],animationPendingClasses:["collapsing"]},g=I(b),y={closeOthers:!1,onShown:r,onHidden:r,accordionClass:"",itemId:"",itemDestroyOnHide:!1,itemDisabled:!1,itemCollapsed:!0,itemAnimation:!0,itemTransition:g,onItemShown:r,onItemHidden:r,onItemCollapsedChange:r,slotItemStructure:void 0,slotItemBody:void 0,slotItemHeader:void 0,itemClass:"",itemHeaderClass:"",itemButtonClass:"",itemCollapseClass:"",itemBodyClass:""};function A(){return{...y}}const C=[{name:"accordionClass",description:"Classes to add on the accordion DOM element.",fileName:"core/lib/accordion.ts",start:{line:55,character:2,position:1722},end:{line:55,character:25,position:1745},type:"string",defaultValue:"''"},{name:"closeOthers",description:"If `true`, only one item at the time can stay open.",fileName:"core/lib/accordion.ts",start:{line:62,character:2,position:1887},end:{line:62,character:23,position:1908},type:"boolean",defaultValue:"false"},{name:"itemAnimation",description:"If `true`, accordion-item will be animated.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:106,character:2,position:3074},end:{line:106,character:25,position:3097},type:"boolean",defaultValue:"true"},{name:"itemBodyClass",description:`Classes to add on the accordion-item body DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:182,character:2,position:5144},end:{line:182,character:24,position:5166},type:"string",defaultValue:"''"},{name:"itemButtonClass",description:`Classes to add on the accordion-item toggle button DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:170,character:2,position:4860},end:{line:170,character:26,position:4884},type:"string",defaultValue:"''"},{name:"itemClass",description:`Classes to add on the accordion-item DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:158,character:2,position:4577},end:{line:158,character:20,position:4595},type:"string",defaultValue:"''"},{name:"itemCollapseClass",description:`Classes to add on the accordion-item collapse DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:176,character:2,position:5003},end:{line:176,character:28,position:5029},type:"string",defaultValue:"''"},{name:"itemCollapsed",description:"If `true`, the accordion-item will be collapsed. Otherwise, it will be expanded.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:100,character:2,position:2947},end:{line:100,character:25,position:2970},type:"boolean",defaultValue:"true"},{name:"itemDestroyOnHide",description:"If `true`, the content of the accordion-item collapse will be removed from the DOM. It will be just hidden otherwise.\n\nIt is a prop of the accordion-item.",fileName:"core/lib/accordion.ts",start:{line:87,character:2,position:2554},end:{line:87,character:29,position:2581},type:"boolean",defaultValue:"false"},{name:"itemDisabled",description:`If \`true\`, the accordion-item will be disabled.
It will not react to user's clicks, but still will be possible to toggle programmatically.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:94,character:2,position:2784},end:{line:94,character:24,position:2806},type:"boolean",defaultValue:"false"},{name:"itemHeaderClass",description:`Classes to add on the accordion-item header DOM element.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:164,character:2,position:4712},end:{line:164,character:26,position:4736},type:"string",defaultValue:"''"},{name:"itemId",description:`The id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:81,character:2,position:2361},end:{line:81,character:17,position:2376},type:"string",defaultValue:"''"},{name:"itemTransition",description:`The transition to use for the accordion-item collapse when is toggled.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:112,character:2,position:3228},end:{line:112,character:31,position:3257},type:"TransitionFn",defaultValue:"collapseVerticalTransition"},{name:"onHidden",description:`An event fired when an item is hidden.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:74,character:2,position:2141},end:{line:74,character:37,position:2176},type:"(itemId: string) => void",defaultValue:"noop"},{name:"onItemCollapsedChange",description:`An event fired when the \`collapsed\` value changes.

Event payload is the new value of collapsed.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:132,character:2,position:3667},end:{line:132,character:54,position:3719},type:"(collapsed: boolean) => void",defaultValue:"noop"},{name:"onItemHidden",description:`An event fired when an item is hidden.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:124,character:2,position:3478},end:{line:124,character:27,position:3503},type:"() => void",defaultValue:"noop"},{name:"onItemShown",description:`An event fired when an item is shown.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:118,character:2,position:3355},end:{line:118,character:26,position:3379},type:"() => void",defaultValue:"noop"},{name:"onShown",description:`An event fired when an item is shown.

Event payload is the id of the item.`,fileName:"core/lib/accordion.ts",start:{line:68,character:2,position:2007},end:{line:68,character:36,position:2041},type:"(itemId: string) => void",defaultValue:"noop"},{name:"slotItemBody",description:`Content present in the accordion body.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:146,character:2,position:4240},end:{line:146,character:50,position:4288},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemHeader",description:`Content present in the accordion button inside the accordion header.

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:152,character:2,position:4417},end:{line:152,character:52,position:4467},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"},{name:"slotItemStructure",description:`Structure of the accordion-item. The default item structure is: accordion-item
contains accordion header and accordion collapse; the accordion header contains the accordion button
(that contains \`slotItemHeader\`), while the accordion collapse contains the accordion body (that contains slotItemBody).

It is a prop of the accordion-item.`,fileName:"core/lib/accordion.ts",start:{line:140,character:2,position:4088},end:{line:140,character:55,position:4141},type:"SlotContent<AccordionItemContext>",defaultValue:"undefined"}],w=[{name:"accordionClass",description:"Classes to add on the accordion DOM element.",fileName:"core/lib/accordion.ts",start:{line:55,character:2,position:1722},end:{line:55,character:25,position:1745},type:"string"},{name:"itemsWidget",description:"Array containing all the accordion-items contained in the accordion.",fileName:"core/lib/accordion.ts",start:{line:189,character:2,position:5325},end:{line:189,character:37,position:5360},type:"AccordionItemWidget[]"}],v=[{name:"collapse",description:`Given the itemId, will collapse the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:210,character:2,position:5882},end:{line:210,character:33,position:5913},type:"(itemId: string) => void"},{name:"collapseAll",description:"It will collapse all the accordion-items in the accordion.",fileName:"core/lib/accordion.ts",start:{line:226,character:2,position:6315},end:{line:226,character:22,position:6335},type:"() => void"},{name:"expand",description:`Given the itemId, will expand the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:204,character:2,position:5714},end:{line:204,character:31,position:5743},type:"(itemId: string) => void"},{name:"expandAll",description:"It will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.",fileName:"core/lib/accordion.ts",start:{line:222,character:2,position:6222},end:{line:222,character:20,position:6240},type:"() => void"},{name:"isExpanded",description:"Given the itemId, it will return if such item is expanded or not.\n\nIf the itemId is not a valid id it will return `false`.",fileName:"core/lib/accordion.ts",start:{line:198,character:2,position:5541},end:{line:198,character:38,position:5577},type:"(itemId: string) => boolean"},{name:"registerItem",description:"Creates a new in accordionItem.",fileName:"core/lib/accordion.ts",start:{line:230,character:2,position:6383},end:{line:230,character:82,position:6463},type:"(itemConfig?: PropsConfig<AccordionItemProps>) => AccordionItemWidget"},{name:"toggle",description:`Given the itemId, will toggle the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/lib/accordion.ts",start:{line:216,character:2,position:6050},end:{line:216,character:31,position:6079},type:"(itemId: string) => void"}],S={props:C,state:w,api:v};export{S as d,A as g};
