import{s as r,n as o}from"../chunks/scheduler.DDKLfDno.js";import{S as s,i as c,c as l,b as p,m,t as d,a as g,e as h}from"../chunks/index.DMnRV_Lo.js";import{A as u}from"../chunks/ApiDoc.SaGW8YxA.js";const f=[{name:"ariaLabel",description:"The aria label",fileName:"core/src/components/rating/rating.ts",start:{line:60,character:2,position:1587},end:{line:60,character:20,position:1605},type:"string",defaultValue:"'Rating'"},{name:"ariaLabelledBy",description:"The aria labelled by",fileName:"core/src/components/rating/rating.ts",start:{line:65,character:2,position:1643},end:{line:65,character:25,position:1666},type:"string",defaultValue:"''"},{name:"ariaValueTextFn",description:"Return the value for the 'aria-valuetext' attribute.",fileName:"core/src/components/rating/rating.ts",start:{line:74,character:2,position:1885},end:{line:74,character:65,position:1948},type:"(rating: number, maxRating: number) => string",defaultValue:"(rating: number, maxRating: number) => `${rating} out of ${maxRating}`"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"disabled",description:"If `true`, the rating is disabled.",fileName:"core/src/components/rating/rating.ts",start:{line:37,character:2,position:1141},end:{line:37,character:20,position:1159},type:"boolean",defaultValue:"false"},{name:"maxRating",description:"The maximum rating that can be given.",fileName:"core/src/components/rating/rating.ts",start:{line:32,character:2,position:1071},end:{line:32,character:20,position:1089},type:"number",defaultValue:"10"},{name:"onHover",description:`An event emitted when the user is hovering over a given rating.

Event payload is equal to the rating being hovered over.`,fileName:"core/src/components/rating/rating.ts",start:{line:88,character:2,position:2258},end:{line:88,character:36,position:2292},type:"(rating: number) => void",defaultValue:"() => {}"},{name:"onLeave",description:`An event emitted when the user stops hovering over a given rating.

Event payload is equal to the rating of the last item being hovered over.`,fileName:"core/src/components/rating/rating.ts",start:{line:95,character:2,position:2458},end:{line:95,character:36,position:2492},type:"(rating: number) => void",defaultValue:"() => {}"},{name:"onRatingChange",description:`An event emitted when the rating is changed.

Event payload is equal to the newly selected rating.`,fileName:"core/src/components/rating/rating.ts",start:{line:81,character:2,position:2071},end:{line:81,character:43,position:2112},type:"(rating: number) => void",defaultValue:"() => {}"},{name:"rating",description:"The current rating. Could be a decimal value like `3.75`.",fileName:"core/src/components/rating/rating.ts",start:{line:27,character:2,position:1001},end:{line:27,character:17,position:1016},type:"number",defaultValue:"0"},{name:"readonly",description:"If `true`, the rating can't be changed.",fileName:"core/src/components/rating/rating.ts",start:{line:42,character:2,position:1216},end:{line:42,character:20,position:1234},type:"boolean",defaultValue:"false"},{name:"resettable",description:`Define if the rating can be reset.

If set to true, the user can 'unset' the rating value by cliking on the current rating value.`,fileName:"core/src/components/rating/rating.ts",start:{line:49,character:2,position:1388},end:{line:49,character:22,position:1408},type:"boolean",defaultValue:"true"},{name:"slotStar",description:"The template to override the way each star is displayed.",fileName:"core-bootstrap/src/components/rating/rating.ts",start:{line:18,character:2,position:594},end:{line:18,character:37,position:629},type:"SlotContent<StarContext>",defaultValue:"({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)"},{name:"tabindex",description:"Allows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.",fileName:"core/src/components/rating/rating.ts",start:{line:55,character:2,position:1538},end:{line:55,character:19,position:1555},type:"number",defaultValue:"0"}],b=[{name:"ariaLabel",description:"The aria label",fileName:"core/src/components/rating/rating.ts",start:{line:60,character:2,position:1587},end:{line:60,character:20,position:1605},type:"string"},{name:"ariaLabelledBy",description:"The aria labelled by",fileName:"core/src/components/rating/rating.ts",start:{line:65,character:2,position:1643},end:{line:65,character:25,position:1666},type:"string"},{name:"ariaValueText",description:"the aria value of the rating",fileName:"core/src/components/rating/rating.ts",start:{line:115,character:2,position:2919},end:{line:115,character:24,position:2941},type:"string"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"disabled",description:"If `true`, the rating is disabled.",fileName:"core/src/components/rating/rating.ts",start:{line:37,character:2,position:1141},end:{line:37,character:20,position:1159},type:"boolean"},{name:"interactive",description:"is the rating interactive i.e. listening to hover, click and keyboard events",fileName:"core/src/components/rating/rating.ts",start:{line:123,character:2,position:3189},end:{line:123,character:23,position:3210},type:"boolean"},{name:"maxRating",description:"The maximum rating that can be given.",fileName:"core/src/components/rating/rating.ts",start:{line:32,character:2,position:1071},end:{line:32,character:20,position:1089},type:"number"},{name:"rating",description:"The current rating. Could be a decimal value like `3.75`.",fileName:"core/src/components/rating/rating.ts",start:{line:27,character:2,position:1001},end:{line:27,character:17,position:1016},type:"number"},{name:"readonly",description:"If `true`, the rating can't be changed.",fileName:"core/src/components/rating/rating.ts",start:{line:42,character:2,position:1216},end:{line:42,character:20,position:1234},type:"boolean"},{name:"resettable",description:`Define if the rating can be reset.

If set to true, the user can 'unset' the rating value by cliking on the current rating value.`,fileName:"core/src/components/rating/rating.ts",start:{line:49,character:2,position:1388},end:{line:49,character:22,position:1408},type:"boolean"},{name:"slotStar",description:"The template to override the way each star is displayed.",fileName:"core-bootstrap/src/components/rating/rating.ts",start:{line:18,character:2,position:594},end:{line:18,character:37,position:629},type:"SlotContent<StarContext>"},{name:"stars",description:"the list of stars",fileName:"core/src/components/rating/rating.ts",start:{line:127,character:2,position:3244},end:{line:127,character:23,position:3265},type:"StarContext[]"},{name:"tabindex",description:"Allows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.",fileName:"core/src/components/rating/rating.ts",start:{line:55,character:2,position:1538},end:{line:55,character:19,position:1555},type:"number"},{name:"visibleRating",description:"the visible value of the rating (it changes when hovering over the rating even though the real value did not change)",fileName:"core/src/components/rating/rating.ts",start:{line:119,character:2,position:3074},end:{line:119,character:24,position:3096},type:"number"}],v=[],y={props:f,state:b,api:v};function N(a){let e,n;return e=new u({props:{doc:y}}),{c(){l(e.$$.fragment)},l(t){p(e.$$.fragment,t)},m(t,i){m(e,t,i),n=!0},p:o,i(t){n||(d(e.$$.fragment,t),n=!0)},o(t){g(e.$$.fragment,t),n=!1},d(t){h(e,t)}}}class S extends s{constructor(e){super(),c(this,e,null,N,r,{})}}export{S as component};
