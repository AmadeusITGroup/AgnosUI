import{s as a,n as s}from"../chunks/scheduler.DDKLfDno.js";import{S as o,i as l,c,b as d,m as p,t as m,a as h,e as u}from"../chunks/index.DMnRV_Lo.js";import{A as f}from"../chunks/ApiDoc.s8XDI-Ch.js";const b=[{name:"ariaLabelHandle",description:"Return the value for the 'aria-label' attribute for the handle",fileName:"core/src/components/slider/slider.ts",start:{line:180,character:2,position:3892},end:{line:180,character:81,position:3971},type:"(value: number, sortedIndex: number, index: number) => string",defaultValue:"(value: number) => '' + value"},{name:"ariaValueText",description:"Return the value for the 'aria-valuetext' attribute for the handle",fileName:"core/src/components/slider/slider.ts",start:{line:188,character:2,position:4218},end:{line:188,character:79,position:4295},type:"(value: number, sortedIndex: number, index: number) => string",defaultValue:"(value: number) => '' + value"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/src/components/slider/slider.ts",start:{line:93,character:2,position:2132},end:{line:93,character:20,position:2150},type:"boolean",defaultValue:"false"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:78,character:2,position:1853},end:{line:78,character:14,position:1865},type:"number",defaultValue:"100"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:73,character:2,position:1775},end:{line:73,character:14,position:1787},type:"number",defaultValue:"0"},{name:"onValuesChange",description:`An event emitted when slider values are changed

Event payload equals to the updated slider values`,fileName:"core/src/components/slider/slider.ts",start:{line:195,character:2,position:4418},end:{line:195,character:45,position:4461},type:"(values: number[]) => void",defaultValue:"() => {}"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/src/components/slider/slider.ts",start:{line:88,character:2,position:2023},end:{line:88,character:20,position:2041},type:"boolean",defaultValue:"false"},{name:"rtl",description:"It `true` slider display is inversed",fileName:"core/src/components/slider/slider.ts",start:{line:118,character:2,position:2558},end:{line:118,character:15,position:2571},type:"boolean",defaultValue:"false"},{name:"showMinMaxLabels",description:"If `true` the min and max labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:113,character:2,position:2478},end:{line:113,character:28,position:2504},type:"boolean",defaultValue:"true"},{name:"showValueLabels",description:"If `true` the value labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:108,character:2,position:2375},end:{line:108,character:27,position:2400},type:"boolean",defaultValue:"true"},{name:"slotHandle",description:"Slot to change the handlers",fileName:"core-bootstrap/src/components/slider/slider.ts",start:{line:33,character:2,position:1026},end:{line:33,character:51,position:1075},type:"SlotContent<SliderSlotHandleContext>",defaultValue:"undefined"},{name:"slotLabel",description:"Slot to change the default labels of the slider",fileName:"core-bootstrap/src/components/slider/slider.ts",start:{line:28,character:2,position:933},end:{line:28,character:49,position:980},type:"SlotContent<SliderSlotLabelContext>",defaultValue:"({value}: SliderSlotLabelContext) => '' + value"},{name:"slotStructure",description:"Slot to change the default display of the slider",fileName:"core-bootstrap/src/components/slider/slider.ts",start:{line:23,character:2,position:826},end:{line:23,character:44,position:868},type:"SlotContent<SliderContext>",defaultValue:"undefined"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/src/components/slider/slider.ts",start:{line:83,character:2,position:1914},end:{line:83,character:19,position:1931},type:"number",defaultValue:"1"},{name:"values",description:"Current slider values",fileName:"core/src/components/slider/slider.ts",start:{line:103,character:2,position:2286},end:{line:103,character:19,position:2303},type:"number[]",defaultValue:"[0]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/src/components/slider/slider.ts",start:{line:98,character:2,position:2229},end:{line:98,character:20,position:2247},type:"boolean",defaultValue:"false"}],y=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"combinedLabelDisplay",description:"If true, the label when the handles are close is visible",fileName:"core/src/components/slider/slider.ts",start:{line:150,character:2,position:3117},end:{line:150,character:32,position:3147},type:"boolean"},{name:"combinedLabelPositionLeft",description:"Combined label left offset in %",fileName:"core/src/components/slider/slider.ts",start:{line:130,character:2,position:2748},end:{line:130,character:36,position:2782},type:"number"},{name:"combinedLabelPositionTop",description:"Combined label top offset in %",fileName:"core/src/components/slider/slider.ts",start:{line:135,character:2,position:2830},end:{line:135,character:35,position:2863},type:"number"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/src/components/slider/slider.ts",start:{line:93,character:2,position:2132},end:{line:93,character:20,position:2150},type:"boolean"},{name:"handleDisplayOptions",description:"Array of objects representing handle display options",fileName:"core/src/components/slider/slider.ts",start:{line:165,character:2,position:3424},end:{line:165,character:47,position:3469},type:"HandleDisplayOptions[]"},{name:"interactive",description:"Check if the slider is interactive, meaning it is not disabled or readonly",fileName:"core/src/components/slider/slider.ts",start:{line:170,character:2,position:3561},end:{line:170,character:23,position:3582},type:"boolean"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:78,character:2,position:1853},end:{line:78,character:14,position:1865},type:"number"},{name:"maxValueLabelDisplay",description:"If true, the maximum label will be visible",fileName:"core/src/components/slider/slider.ts",start:{line:145,character:2,position:3013},end:{line:145,character:32,position:3043},type:"boolean"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:73,character:2,position:1775},end:{line:73,character:14,position:1787},type:"number"},{name:"minValueLabelDisplay",description:"If true, the minimum label will be visible",fileName:"core/src/components/slider/slider.ts",start:{line:140,character:2,position:2923},end:{line:140,character:32,position:2953},type:"boolean"},{name:"progressDisplayOptions",description:"Array of objects representing progress display options",fileName:"core/src/components/slider/slider.ts",start:{line:160,character:2,position:3305},end:{line:160,character:51,position:3354},type:"ProgressDisplayOptions[]"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/src/components/slider/slider.ts",start:{line:88,character:2,position:2023},end:{line:88,character:20,position:2041},type:"boolean"},{name:"rtl",description:"It `true` slider display is inversed",fileName:"core/src/components/slider/slider.ts",start:{line:118,character:2,position:2558},end:{line:118,character:15,position:2571},type:"boolean"},{name:"showMinMaxLabels",description:"If `true` the min and max labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:113,character:2,position:2478},end:{line:113,character:28,position:2504},type:"boolean"},{name:"showValueLabels",description:"If `true` the value labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:108,character:2,position:2375},end:{line:108,character:27,position:2400},type:"boolean"},{name:"slotHandle",description:"Slot to change the handlers",fileName:"core-bootstrap/src/components/slider/slider.ts",start:{line:33,character:2,position:1026},end:{line:33,character:51,position:1075},type:"SlotContent<SliderSlotHandleContext>"},{name:"slotLabel",description:"Slot to change the default labels of the slider",fileName:"core-bootstrap/src/components/slider/slider.ts",start:{line:28,character:2,position:933},end:{line:28,character:49,position:980},type:"SlotContent<SliderSlotLabelContext>"},{name:"slotStructure",description:"Slot to change the default display of the slider",fileName:"core-bootstrap/src/components/slider/slider.ts",start:{line:23,character:2,position:826},end:{line:23,character:44,position:868},type:"SlotContent<SliderContext>"},{name:"sortedHandles",description:"Array of the sorted handles to display",fileName:"core/src/components/slider/slider.ts",start:{line:155,character:2,position:3203},end:{line:155,character:32,position:3233},type:"SliderHandle[]"},{name:"sortedValues",description:"Sorted slider values",fileName:"core/src/components/slider/slider.ts",start:{line:125,character:2,position:2676},end:{line:125,character:25,position:2699},type:"number[]"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/src/components/slider/slider.ts",start:{line:83,character:2,position:1914},end:{line:83,character:19,position:1931},type:"number"},{name:"values",description:"Current slider values",fileName:"core/src/components/slider/slider.ts",start:{line:103,character:2,position:2286},end:{line:103,character:19,position:2303},type:"number[]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/src/components/slider/slider.ts",start:{line:98,character:2,position:2229},end:{line:98,character:20,position:2247},type:"boolean"}],v=[],N={props:b,state:y,api:v};function S(n){let e,i;return e=new f({props:{doc:N}}),{c(){c(e.$$.fragment)},l(t){d(e.$$.fragment,t)},m(t,r){p(e,t,r),i=!0},p:s,i(t){i||(m(e.$$.fragment,t),i=!0)},o(t){h(e.$$.fragment,t),i=!1},d(t){u(e,t)}}}class C extends o{constructor(e){super(),l(this,e,null,S,a,{})}}export{C as component};
