import{s,n as o}from"../chunks/scheduler.BCoUmZgo.js";import{S as l,i as c,c as d,b as p,m,t as u,a as h,e as f}from"../chunks/index.Dun_Df-H.js";import{P as b}from"../chunks/Playground.IRVuBf1R.js";import{_ as a}from"../chunks/preload-helper.Dch09mLN.js";import{n as y}from"../chunks/stores.DEOtweby.js";const v={min:0,max:100,stepSize:1,readonly:!1,disabled:!1,vertical:!1,className:"",ariaLabelHandle:e=>""+e,ariaValueText:e=>""+e,onValuesChange:y,values:[0],showValueLabels:!0,showMinMaxLabels:!0,rtl:!1};function g(){return{...v}}const N={structure:void 0,label:({value:e})=>""+e,handle:void 0};function V(){return{...g(),...N}}const _=V,x={componentName:"slider",style:"bootstrap",sampleName:"playground",files:{angular:{complementaryUrl:"/bootstrap",entryPoint:"playground.component.ts",files:{"playground.component.ts":()=>a(()=>import("../chunks/playground.route.D84sOAPn.js"),[],import.meta.url).then(e=>e.default)}},react:{complementaryUrl:"/bootstrap",entryPoint:"playground.tsx",files:{"playground.tsx":()=>a(()=>import("../chunks/Playground.route.DY2m3dEh.js"),[],import.meta.url).then(e=>e.default)}},svelte:{complementaryUrl:"/bootstrap",entryPoint:"playground.svelte",files:{"playground.svelte":()=>a(()=>import("../chunks/Playground.route.BgFZWu1_.js"),[],import.meta.url).then(e=>e.default)}}}},I=[{name:"ariaLabelHandle",description:"Return the value for the 'aria-label' attribute for the handle",fileName:"core/src/components/slider/slider.ts",start:{line:205,character:2,position:4245},end:{line:205,character:81,position:4324},type:"(value: number, sortedIndex: number, index: number) => string",defaultValue:"(value: number) => '' + value"},{name:"ariaValueText",description:"Return the value for the 'aria-valuetext' attribute for the handle",fileName:"core/src/components/slider/slider.ts",start:{line:218,character:2,position:4645},end:{line:218,character:79,position:4722},type:"(value: number, sortedIndex: number, index: number) => string",defaultValue:"(value: number) => '' + value"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:7,character:2,position:143},end:{line:7,character:20,position:161},type:"string",defaultValue:"''"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/src/components/slider/slider.ts",start:{line:103,character:2,position:2265},end:{line:103,character:20,position:2283},type:"boolean",defaultValue:"false"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:82,character:2,position:1900},end:{line:82,character:14,position:1912},type:"number",defaultValue:"100"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:75,character:2,position:1794},end:{line:75,character:14,position:1806},type:"number",defaultValue:"0"},{name:"onValuesChange",description:`An event emitted when slider values are changed

Event payload equals to the updated slider values`,fileName:"core/src/components/slider/slider.ts",start:{line:230,character:2,position:4898},end:{line:230,character:45,position:4941},type:"(values: number[]) => void",defaultValue:"() => {}"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/src/components/slider/slider.ts",start:{line:96,character:2,position:2126},end:{line:96,character:20,position:2144},type:"boolean",defaultValue:"false"},{name:"rtl",description:"It `true` slider display is inversed",fileName:"core/src/components/slider/slider.ts",start:{line:138,character:2,position:2837},end:{line:138,character:15,position:2850},type:"boolean",defaultValue:"false"},{name:"showMinMaxLabels",description:"If `true` the min and max labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:131,character:2,position:2727},end:{line:131,character:28,position:2753},type:"boolean",defaultValue:"true"},{name:"showValueLabels",description:"If `true` the value labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:124,character:2,position:2595},end:{line:124,character:27,position:2620},type:"boolean",defaultValue:"true"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/src/components/slider/slider.ts",start:{line:89,character:2,position:1987},end:{line:89,character:19,position:2004},type:"number",defaultValue:"1"},{name:"values",description:"Current slider values",fileName:"core/src/components/slider/slider.ts",start:{line:117,character:2,position:2477},end:{line:117,character:19,position:2494},type:"number[]",defaultValue:"[0]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/src/components/slider/slider.ts",start:{line:110,character:2,position:2392},end:{line:110,character:20,position:2410},type:"boolean",defaultValue:"false"}],L=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:7,character:2,position:143},end:{line:7,character:20,position:161},type:"string"},{name:"combinedLabelDisplay",description:"If true, the label when the handles are close is visible",fileName:"core/src/components/slider/slider.ts",start:{line:170,character:2,position:3396},end:{line:170,character:32,position:3426},type:"boolean"},{name:"combinedLabelPositionLeft",description:"Combined label left offset in %",fileName:"core/src/components/slider/slider.ts",start:{line:150,character:2,position:3027},end:{line:150,character:36,position:3061},type:"number"},{name:"combinedLabelPositionTop",description:"Combined label top offset in %",fileName:"core/src/components/slider/slider.ts",start:{line:155,character:2,position:3109},end:{line:155,character:35,position:3142},type:"number"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/src/components/slider/slider.ts",start:{line:103,character:2,position:2265},end:{line:103,character:20,position:2283},type:"boolean"},{name:"handleDisplayOptions",description:"Array of objects representing handle display options",fileName:"core/src/components/slider/slider.ts",start:{line:185,character:2,position:3703},end:{line:185,character:47,position:3748},type:"HandleDisplayOptions[]"},{name:"interactive",description:"Check if the slider is interactive, meaning it is not disabled or readonly",fileName:"core/src/components/slider/slider.ts",start:{line:190,character:2,position:3840},end:{line:190,character:23,position:3861},type:"boolean"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:82,character:2,position:1900},end:{line:82,character:14,position:1912},type:"number"},{name:"maxValueLabelDisplay",description:"If true, the maximum label will be visible",fileName:"core/src/components/slider/slider.ts",start:{line:165,character:2,position:3292},end:{line:165,character:32,position:3322},type:"boolean"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:75,character:2,position:1794},end:{line:75,character:14,position:1806},type:"number"},{name:"minValueLabelDisplay",description:"If true, the minimum label will be visible",fileName:"core/src/components/slider/slider.ts",start:{line:160,character:2,position:3202},end:{line:160,character:32,position:3232},type:"boolean"},{name:"progressDisplayOptions",description:"Array of objects representing progress display options",fileName:"core/src/components/slider/slider.ts",start:{line:180,character:2,position:3584},end:{line:180,character:51,position:3633},type:"ProgressDisplayOptions[]"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/src/components/slider/slider.ts",start:{line:96,character:2,position:2126},end:{line:96,character:20,position:2144},type:"boolean"},{name:"rtl",description:"It `true` slider display is inversed",fileName:"core/src/components/slider/slider.ts",start:{line:138,character:2,position:2837},end:{line:138,character:15,position:2850},type:"boolean"},{name:"showMinMaxLabels",description:"If `true` the min and max labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:131,character:2,position:2727},end:{line:131,character:28,position:2753},type:"boolean"},{name:"showValueLabels",description:"If `true` the value labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:124,character:2,position:2595},end:{line:124,character:27,position:2620},type:"boolean"},{name:"sortedHandles",description:"Array of the sorted handles to display",fileName:"core/src/components/slider/slider.ts",start:{line:175,character:2,position:3482},end:{line:175,character:32,position:3512},type:"SliderHandle[]"},{name:"sortedValues",description:"Sorted slider values",fileName:"core/src/components/slider/slider.ts",start:{line:145,character:2,position:2955},end:{line:145,character:25,position:2978},type:"number[]"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/src/components/slider/slider.ts",start:{line:89,character:2,position:1987},end:{line:89,character:19,position:2004},type:"number"},{name:"values",description:"Current slider values",fileName:"core/src/components/slider/slider.ts",start:{line:117,character:2,position:2477},end:{line:117,character:19,position:2494},type:"number[]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/src/components/slider/slider.ts",start:{line:110,character:2,position:2392},end:{line:110,character:20,position:2410},type:"boolean"}],P=[],w={props:I,state:L,api:P};function C(e){let t,r;return t=new b({props:{sample:x,config:_(),doc:w,listPropsValues:e[0]}}),{c(){d(t.$$.fragment)},l(i){p(t.$$.fragment,i)},m(i,n){m(t,i,n),r=!0},p:o,i(i){r||(u(t.$$.fragment,i),r=!0)},o(i){h(t.$$.fragment,i),r=!1},d(i){f(t,i)}}}function S(e){return[{ariaLabelHandle:["sliderLabelHandleDefault"],ariaValueText:["sliderValueTextUnits"]}]}class A extends l{constructor(t){super(),c(this,t,S,C,s,{})}}export{A as component};
