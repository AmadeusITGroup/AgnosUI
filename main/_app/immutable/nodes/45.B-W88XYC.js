import{s as a,n as s}from"../chunks/scheduler.DHbooxev.js";import{S as o,i as l,c,b as d,m as p,t as m,a as h,e as u}from"../chunks/index.BK_xdHAZ.js";import{A as f}from"../chunks/ApiDoc.BCFGjNmL.js";const b=[{name:"ariaLabelHandle",description:"Return the value for the 'aria-label' attribute for the handle",fileName:"core/src/components/slider/slider.ts",start:{line:199,character:2,position:4447},end:{line:199,character:81,position:4526},type:"(value: number, sortedIndex: number, index: number) => string",defaultValue:"(value: number) => '' + value"},{name:"ariaValueText",description:"Return the value for the 'aria-valuetext' attribute for the handle",fileName:"core/src/components/slider/slider.ts",start:{line:207,character:2,position:4773},end:{line:207,character:79,position:4850},type:"(value: number, sortedIndex: number, index: number) => string",defaultValue:"(value: number) => '' + value"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/src/components/slider/slider.ts",start:{line:97,character:2,position:2372},end:{line:97,character:20,position:2390},type:"boolean",defaultValue:"false"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:82,character:2,position:2093},end:{line:82,character:14,position:2105},type:"number",defaultValue:"100"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:77,character:2,position:2015},end:{line:77,character:14,position:2027},type:"number",defaultValue:"0"},{name:"onValuesChange",description:`An event emitted when slider values are changed

Event payload equals to the updated slider values`,fileName:"core/src/components/slider/slider.ts",start:{line:214,character:2,position:4973},end:{line:214,character:45,position:5016},type:"(values: number[]) => void",defaultValue:"() => {}"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/src/components/slider/slider.ts",start:{line:92,character:2,position:2263},end:{line:92,character:20,position:2281},type:"boolean",defaultValue:"false"},{name:"rtl",description:"It `true` slider display is inversed",fileName:"core/src/components/slider/slider.ts",start:{line:122,character:2,position:2798},end:{line:122,character:15,position:2811},type:"boolean",defaultValue:"false"},{name:"showMinMaxLabels",description:"If `true` the min and max labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:117,character:2,position:2718},end:{line:117,character:28,position:2744},type:"boolean",defaultValue:"true"},{name:"showValueLabels",description:"If `true` the value labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:112,character:2,position:2615},end:{line:112,character:27,position:2640},type:"boolean",defaultValue:"true"},{name:"slotHandle",description:"Slot to change the handlers",fileName:"core/src/components/slider/slider.ts",start:{line:137,character:2,position:3077},end:{line:137,character:51,position:3126},type:"SlotContent<SliderSlotHandleContext>",defaultValue:"undefined"},{name:"slotLabel",description:"Slot to change the default labels of the slider",fileName:"core/src/components/slider/slider.ts",start:{line:132,character:2,position:2984},end:{line:132,character:49,position:3031},type:"SlotContent<SliderSlotLabelContext>",defaultValue:"({value}: SliderSlotLabelContext) => '' + value"},{name:"slotStructure",description:"Slot to change the default display of the slider",fileName:"core/src/components/slider/slider.ts",start:{line:127,character:2,position:2877},end:{line:127,character:44,position:2919},type:"SlotContent<SliderContext>",defaultValue:"undefined"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/src/components/slider/slider.ts",start:{line:87,character:2,position:2154},end:{line:87,character:19,position:2171},type:"number",defaultValue:"1"},{name:"values",description:"Current slider values",fileName:"core/src/components/slider/slider.ts",start:{line:107,character:2,position:2526},end:{line:107,character:19,position:2543},type:"number[]",defaultValue:"[0]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/src/components/slider/slider.ts",start:{line:102,character:2,position:2469},end:{line:102,character:20,position:2487},type:"boolean",defaultValue:"false"}],y=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"combinedLabelDisplay",description:"If true, the label when the handles are close is visible",fileName:"core/src/components/slider/slider.ts",start:{line:169,character:2,position:3672},end:{line:169,character:32,position:3702},type:"boolean"},{name:"combinedLabelPositionLeft",description:"Combined label left offset in %",fileName:"core/src/components/slider/slider.ts",start:{line:149,character:2,position:3303},end:{line:149,character:36,position:3337},type:"number"},{name:"combinedLabelPositionTop",description:"Combined label top offset in %",fileName:"core/src/components/slider/slider.ts",start:{line:154,character:2,position:3385},end:{line:154,character:35,position:3418},type:"number"},{name:"disabled",description:"If `true` slider value cannot be changed and the slider cannot be focused",fileName:"core/src/components/slider/slider.ts",start:{line:97,character:2,position:2372},end:{line:97,character:20,position:2390},type:"boolean"},{name:"handleDisplayOptions",description:"Array of objects representing handle display options",fileName:"core/src/components/slider/slider.ts",start:{line:184,character:2,position:3979},end:{line:184,character:47,position:4024},type:"HandleDisplayOptions[]"},{name:"interactive",description:"Check if the slider is interactive, meaning it is not disabled or readonly",fileName:"core/src/components/slider/slider.ts",start:{line:189,character:2,position:4116},end:{line:189,character:23,position:4137},type:"boolean"},{name:"max",description:"Maximum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:82,character:2,position:2093},end:{line:82,character:14,position:2105},type:"number"},{name:"maxValueLabelDisplay",description:"If true, the maximum label will be visible",fileName:"core/src/components/slider/slider.ts",start:{line:164,character:2,position:3568},end:{line:164,character:32,position:3598},type:"boolean"},{name:"min",description:"Minimum value that can be assigned to the slider",fileName:"core/src/components/slider/slider.ts",start:{line:77,character:2,position:2015},end:{line:77,character:14,position:2027},type:"number"},{name:"minValueLabelDisplay",description:"If true, the minimum label will be visible",fileName:"core/src/components/slider/slider.ts",start:{line:159,character:2,position:3478},end:{line:159,character:32,position:3508},type:"boolean"},{name:"progressDisplayOptions",description:"Array of objects representing progress display options",fileName:"core/src/components/slider/slider.ts",start:{line:179,character:2,position:3860},end:{line:179,character:51,position:3909},type:"ProgressDisplayOptions[]"},{name:"readonly",description:"If `true` slider value cannot be changed but the slider is still focusable",fileName:"core/src/components/slider/slider.ts",start:{line:92,character:2,position:2263},end:{line:92,character:20,position:2281},type:"boolean"},{name:"rtl",description:"It `true` slider display is inversed",fileName:"core/src/components/slider/slider.ts",start:{line:122,character:2,position:2798},end:{line:122,character:15,position:2811},type:"boolean"},{name:"showMinMaxLabels",description:"If `true` the min and max labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:117,character:2,position:2718},end:{line:117,character:28,position:2744},type:"boolean"},{name:"showValueLabels",description:"If `true` the value labels are displayed on the slider",fileName:"core/src/components/slider/slider.ts",start:{line:112,character:2,position:2615},end:{line:112,character:27,position:2640},type:"boolean"},{name:"slotHandle",description:"Slot to change the handlers",fileName:"core/src/components/slider/slider.ts",start:{line:137,character:2,position:3077},end:{line:137,character:51,position:3126},type:"SlotContent<SliderSlotHandleContext>"},{name:"slotLabel",description:"Slot to change the default labels of the slider",fileName:"core/src/components/slider/slider.ts",start:{line:132,character:2,position:2984},end:{line:132,character:49,position:3031},type:"SlotContent<SliderSlotLabelContext>"},{name:"slotStructure",description:"Slot to change the default display of the slider",fileName:"core/src/components/slider/slider.ts",start:{line:127,character:2,position:2877},end:{line:127,character:44,position:2919},type:"SlotContent<SliderContext>"},{name:"sortedHandles",description:"Array of the sorted handles to display",fileName:"core/src/components/slider/slider.ts",start:{line:174,character:2,position:3758},end:{line:174,character:32,position:3788},type:"SliderHandle[]"},{name:"sortedValues",description:"Sorted slider values",fileName:"core/src/components/slider/slider.ts",start:{line:144,character:2,position:3231},end:{line:144,character:25,position:3254},type:"number[]"},{name:"stepSize",description:"Unit value between slider steps",fileName:"core/src/components/slider/slider.ts",start:{line:87,character:2,position:2154},end:{line:87,character:19,position:2171},type:"number"},{name:"values",description:"Current slider values",fileName:"core/src/components/slider/slider.ts",start:{line:107,character:2,position:2526},end:{line:107,character:19,position:2543},type:"number[]"},{name:"vertical",description:"If `true` is vertically positioned otherwise it is horizontal",fileName:"core/src/components/slider/slider.ts",start:{line:102,character:2,position:2469},end:{line:102,character:20,position:2487},type:"boolean"}],v=[],N={props:b,state:y,api:v};function S(n){let e,i;return e=new f({props:{doc:N}}),{c(){c(e.$$.fragment)},l(t){d(e.$$.fragment,t)},m(t,r){p(e,t,r),i=!0},p:s,i(t){i||(m(e.$$.fragment,t),i=!0)},o(t){h(e.$$.fragment,t),i=!1},d(t){u(e,t)}}}class C extends o{constructor(e){super(),l(this,e,null,S,a,{})}}export{C as component};
