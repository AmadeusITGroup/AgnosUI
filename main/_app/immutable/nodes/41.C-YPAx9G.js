import{s as r,n as o}from"../chunks/scheduler.Hr4oCa1m.js";import{S as s,i as c,c as l,b as p,m,t as d,a as g,e as h}from"../chunks/index.DS88fdNR.js";import{A as u}from"../chunks/ApiDoc.1MwL_izX.js";const f=[{name:"ariaLabel",description:"The aria label",fileName:"core/src/components/rating/rating.ts",start:{line:74,character:2,position:1788},end:{line:74,character:20,position:1806},type:"string",defaultValue:"'Rating'"},{name:"ariaLabelledBy",description:"The aria labelled by",fileName:"core/src/components/rating/rating.ts",start:{line:81,character:2,position:1871},end:{line:81,character:25,position:1894},type:"string",defaultValue:"''"},{name:"ariaValueTextFn",description:"Return the value for the 'aria-valuetext' attribute.",fileName:"core/src/components/rating/rating.ts",start:{line:95,character:2,position:2228},end:{line:95,character:65,position:2291},type:"(rating: number, maxRating: number) => string",defaultValue:"(rating: number, maxRating: number) => `${rating} out of ${maxRating}`"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:7,character:2,position:143},end:{line:7,character:20,position:161},type:"string",defaultValue:"''"},{name:"disabled",description:"If `true`, the rating is disabled.",fileName:"core/src/components/rating/rating.ts",start:{line:43,character:2,position:1224},end:{line:43,character:20,position:1242},type:"boolean",defaultValue:"false"},{name:"maxRating",description:"The maximum rating that can be given.",fileName:"core/src/components/rating/rating.ts",start:{line:36,character:2,position:1124},end:{line:36,character:20,position:1142},type:"number",defaultValue:"10"},{name:"onHover",description:`An event emitted when the user is hovering over a given rating.

Event payload is equal to the rating being hovered over.`,fileName:"core/src/components/rating/rating.ts",start:{line:119,character:2,position:2707},end:{line:119,character:36,position:2741},type:"(rating: number) => void",defaultValue:"() => {}"},{name:"onLeave",description:`An event emitted when the user stops hovering over a given rating.

Event payload is equal to the rating of the last item being hovered over.`,fileName:"core/src/components/rating/rating.ts",start:{line:131,character:2,position:2960},end:{line:131,character:36,position:2994},type:"(rating: number) => void",defaultValue:"() => {}"},{name:"onRatingChange",description:`An event emitted when the rating is changed.

Event payload is equal to the newly selected rating.`,fileName:"core/src/components/rating/rating.ts",start:{line:107,character:2,position:2467},end:{line:107,character:43,position:2508},type:"(rating: number) => void",defaultValue:"() => {}"},{name:"rating",description:"The current rating. Could be a decimal value like `3.75`.",fileName:"core/src/components/rating/rating.ts",start:{line:29,character:2,position:1027},end:{line:29,character:17,position:1042},type:"number",defaultValue:"0"},{name:"readonly",description:"If `true`, the rating can't be changed.",fileName:"core/src/components/rating/rating.ts",start:{line:50,character:2,position:1329},end:{line:50,character:20,position:1347},type:"boolean",defaultValue:"false"},{name:"resettable",description:`Define if the rating can be reset.

If set to true, the user can 'unset' the rating value by cliking on the current rating value.`,fileName:"core/src/components/rating/rating.ts",start:{line:59,character:2,position:1530},end:{line:59,character:22,position:1550},type:"boolean",defaultValue:"true"},{name:"star",description:"The template to override the way each star is displayed.",fileName:"core-bootstrap/src/components/rating/rating.ts",start:{line:23,character:2,position:711},end:{line:23,character:33,position:742},type:"SlotContent<StarContext>",defaultValue:"({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)"},{name:"tabindex",description:"Allows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.",fileName:"core/src/components/rating/rating.ts",start:{line:67,character:2,position:1706},end:{line:67,character:19,position:1723},type:"number",defaultValue:"0"}],b=[{name:"ariaLabel",description:"The aria label",fileName:"core/src/components/rating/rating.ts",start:{line:74,character:2,position:1788},end:{line:74,character:20,position:1806},type:"string"},{name:"ariaLabelledBy",description:"The aria labelled by",fileName:"core/src/components/rating/rating.ts",start:{line:81,character:2,position:1871},end:{line:81,character:25,position:1894},type:"string"},{name:"ariaValueText",description:"the aria value of the rating",fileName:"core/src/components/rating/rating.ts",start:{line:151,character:2,position:3421},end:{line:151,character:24,position:3443},type:"string"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:7,character:2,position:143},end:{line:7,character:20,position:161},type:"string"},{name:"disabled",description:"If `true`, the rating is disabled.",fileName:"core/src/components/rating/rating.ts",start:{line:43,character:2,position:1224},end:{line:43,character:20,position:1242},type:"boolean"},{name:"interactive",description:"is the rating interactive i.e. listening to hover, click and keyboard events",fileName:"core/src/components/rating/rating.ts",start:{line:159,character:2,position:3691},end:{line:159,character:23,position:3712},type:"boolean"},{name:"maxRating",description:"The maximum rating that can be given.",fileName:"core/src/components/rating/rating.ts",start:{line:36,character:2,position:1124},end:{line:36,character:20,position:1142},type:"number"},{name:"rating",description:"The current rating. Could be a decimal value like `3.75`.",fileName:"core/src/components/rating/rating.ts",start:{line:29,character:2,position:1027},end:{line:29,character:17,position:1042},type:"number"},{name:"readonly",description:"If `true`, the rating can't be changed.",fileName:"core/src/components/rating/rating.ts",start:{line:50,character:2,position:1329},end:{line:50,character:20,position:1347},type:"boolean"},{name:"resettable",description:`Define if the rating can be reset.

If set to true, the user can 'unset' the rating value by cliking on the current rating value.`,fileName:"core/src/components/rating/rating.ts",start:{line:59,character:2,position:1530},end:{line:59,character:22,position:1550},type:"boolean"},{name:"star",description:"The template to override the way each star is displayed.",fileName:"core-bootstrap/src/components/rating/rating.ts",start:{line:23,character:2,position:711},end:{line:23,character:33,position:742},type:"SlotContent<StarContext>"},{name:"stars",description:"the list of stars",fileName:"core/src/components/rating/rating.ts",start:{line:163,character:2,position:3746},end:{line:163,character:23,position:3767},type:"StarContext[]"},{name:"tabindex",description:"Allows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.",fileName:"core/src/components/rating/rating.ts",start:{line:67,character:2,position:1706},end:{line:67,character:19,position:1723},type:"number"},{name:"visibleRating",description:"the visible value of the rating (it changes when hovering over the rating even though the real value did not change)",fileName:"core/src/components/rating/rating.ts",start:{line:155,character:2,position:3576},end:{line:155,character:24,position:3598},type:"number"}],v=[],y={props:f,state:b,api:v};function N(a){let e,n;return e=new u({props:{doc:y}}),{c(){l(e.$$.fragment)},l(t){p(e.$$.fragment,t)},m(t,i){m(e,t,i),n=!0},p:o,i(t){n||(d(e.$$.fragment,t),n=!0)},o(t){g(e.$$.fragment,t),n=!1},d(t){h(e,t)}}}class C extends s{constructor(e){super(),c(this,e,null,N,r,{})}}export{C as component};
