import{s as l}from"../chunks/scheduler.DDKLfDno.js";import{S as d,i as m,c as p,b as h,m as f,t as u,a as g,e as y}from"../chunks/index.DMnRV_Lo.js";import{P as I}from"../chunks/Playground.DiqqZoJd.js";import{_ as c}from"../chunks/preload-helper.Dch09mLN.js";import{n as r}from"../chunks/stores.CWFrDatY.js";import{c as b}from"../chunks/collapse-CVjUhnIz.D-v8-FGs.js";const e={closeOthers:!1,onShown:r,onHidden:r,className:"",itemId:"",itemDestroyOnHide:!0,itemDisabled:!1,itemVisible:!1,itemAnimated:!0,itemTransition:async()=>{},itemHeadingTag:"",onItemShown:r,onItemHidden:r,onItemVisibleChange:r,itemClass:"",itemHeaderClass:"",itemButtonClass:"",itemBodyContainerClass:"",itemBodyClass:""};e.itemId,e.itemDestroyOnHide,e.itemDisabled,e.itemVisible,e.itemAnimated,e.itemTransition,e.onItemShown,e.onItemHidden,e.onItemVisibleChange,e.itemClass,e.itemHeaderClass,e.itemButtonClass,e.itemBodyContainerClass,e.itemBodyClass,e.itemHeadingTag;function v(){return{...e}}const C={slotItemStructure:void 0,slotItemBody:void 0,slotItemHeader:void 0},w={...v(),...C},V={itemTransition:b};function N(){return{...w,...V}}const S={componentName:"accordion",style:"bootstrap",sampleName:"playground",files:{angular:{complementaryUrl:"/bootstrap",entryPoint:"playground.component.ts",files:{"playground.component.ts":()=>c(()=>import("../chunks/playground.route.BdgXIs_S.js"),[],import.meta.url).then(i=>i.default)}},react:{complementaryUrl:"/bootstrap",entryPoint:"playground.tsx",files:{"playground.tsx":()=>c(()=>import("../chunks/Playground.route.Czqvs7sJ.js"),[],import.meta.url).then(i=>i.default)}},svelte:{complementaryUrl:"/bootstrap",entryPoint:"playground.svelte",files:{"playground.svelte":()=>c(()=>import("../chunks/Playground.route.ZD0HxjwP.js"),[],import.meta.url).then(i=>i.default)}}}},_=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"closeOthers",description:"If `true`, only one accordion-item at the time can stay open.",fileName:"core/src/components/accordion/accordion.ts",start:{line:39,character:2,position:1764},end:{line:39,character:23,position:1785},type:"boolean",defaultValue:"false"},{name:"itemAnimated",description:"If `true`, accordion-item will be animated.\n\nIt is a prop of the accordion-item.",fileName:"core/src/components/accordion/accordion.ts",start:{line:83,character:2,position:2996},end:{line:83,character:24,position:3018},type:"boolean",defaultValue:"true"},{name:"itemBodyClass",description:`CSS classes to add on the accordion-item body DOM element.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:140,character:2,position:4461},end:{line:140,character:24,position:4483},type:"string",defaultValue:"''"},{name:"itemBodyContainerClass",description:`CSS classes to add on the accordion-item body container DOM element.
The accordion-item body container is the DOM element on what the itemTransition is applied.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:134,character:2,position:4311},end:{line:134,character:33,position:4342},type:"string",defaultValue:"''"},{name:"itemButtonClass",description:`CSS classes to add on the accordion-item toggle button DOM element.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:127,character:2,position:4062},end:{line:127,character:26,position:4086},type:"string",defaultValue:"''"},{name:"itemClass",description:`CSS classes to add on the accordion-item DOM element.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:115,character:2,position:3771},end:{line:115,character:20,position:3789},type:"string",defaultValue:"''"},{name:"itemDestroyOnHide",description:"If `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\nIt is a prop of the accordion-item.",fileName:"core/src/components/accordion/accordion.ts",start:{line:64,character:2,position:2459},end:{line:64,character:29,position:2486},type:"boolean",defaultValue:"true"},{name:"itemDisabled",description:`If \`true\`, the accordion-item will be disabled.
It will not react to user's clicks, but still will be possible to toggle programmatically.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:71,character:2,position:2689},end:{line:71,character:24,position:2711},type:"boolean",defaultValue:"false"},{name:"itemHeaderClass",description:`CSS classes to add on the accordion-item header DOM element.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:121,character:2,position:3910},end:{line:121,character:26,position:3934},type:"string",defaultValue:"''"},{name:"itemHeadingTag",description:`The html tag to use for the accordion-item-header.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:146,character:2,position:4594},end:{line:146,character:25,position:4617},type:"string",defaultValue:"''"},{name:"itemId",description:`The id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:58,character:2,position:2238},end:{line:58,character:17,position:2253},type:"string",defaultValue:"''"},{name:"itemTransition",description:`The transition to use for the accordion-item body-container when the accordion-item is toggled.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:89,character:2,position:3174},end:{line:89,character:31,position:3203},type:'(element: SSRHTMLElement, direction: "show" | "hide", animated: boolean, signal: AbortSignal, context: object) => Promise<void>',defaultValue:"async () => {}"},{name:"itemVisible",description:"If `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n\nIt is a prop of the accordion-item.",fileName:"core/src/components/accordion/accordion.ts",start:{line:77,character:2,position:2871},end:{line:77,character:23,position:2892},type:"boolean",defaultValue:"false"},{name:"onHidden",description:`An event fired when an item is hidden.

Event payload is the id of the item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:51,character:2,position:2018},end:{line:51,character:37,position:2053},type:"(itemId: string) => void",defaultValue:"() => {}"},{name:"onItemHidden",description:`An event fired when an item is hidden.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:101,character:2,position:3424},end:{line:101,character:27,position:3449},type:"() => void",defaultValue:"() => {}"},{name:"onItemShown",description:`An event fired when an item is shown.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:95,character:2,position:3301},end:{line:95,character:26,position:3325},type:"() => void",defaultValue:"() => {}"},{name:"onItemVisibleChange",description:`An event fired when the \`visible\` value changes.

Event payload is the new value of visible.

It is a prop of the accordion-item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:109,character:2,position:3609},end:{line:109,character:50,position:3657},type:"(visible: boolean) => void",defaultValue:"() => {}"},{name:"onShown",description:`An event fired when an item is shown.

Event payload is the id of the item.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:45,character:2,position:1884},end:{line:45,character:36,position:1918},type:"(itemId: string) => void",defaultValue:"() => {}"}],P=[{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/src/components/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"itemsWidget",description:"Array containing all the accordion-items contained in the accordion.",fileName:"core/src/components/accordion/accordion.ts",start:{line:153,character:2,position:4774},end:{line:153,character:37,position:4809},type:"AccordionItemWidget[]"}],A=[{name:"collapse",description:`Given the itemId, will collapse the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:168,character:2,position:5149},end:{line:168,character:33,position:5180},type:"(itemId: string) => void"},{name:"collapseAll",description:"It will collapse all the accordion-items in the accordion.",fileName:"core/src/components/accordion/accordion.ts",start:{line:184,character:2,position:5582},end:{line:184,character:22,position:5602},type:"() => void"},{name:"expand",description:`Given the itemId, will expand the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:162,character:2,position:4981},end:{line:162,character:31,position:5010},type:"(itemId: string) => void"},{name:"expandAll",description:"It will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.",fileName:"core/src/components/accordion/accordion.ts",start:{line:180,character:2,position:5489},end:{line:180,character:20,position:5507},type:"() => void"},{name:"registerItem",description:"Creates a new accordionItem.",fileName:"core/src/components/accordion/accordion.ts",start:{line:188,character:2,position:5647},end:{line:188,character:82,position:5727},type:"(itemConfig?: PropsConfig<AccordionItemProps>) => AccordionItemWidget"},{name:"toggle",description:`Given the itemId, will toggle the corresponding accordion-item.

If the itemId is not valid, nothing will happen.`,fileName:"core/src/components/accordion/accordion.ts",start:{line:174,character:2,position:5317},end:{line:174,character:31,position:5346},type:"(itemId: string) => void"}],H={props:_,state:P,api:A};function D(i){let o,n;return o=new I({props:{sample:S,config:N(),doc:H,listPropsValues:i[0]}}),{c(){p(o.$$.fragment)},l(t){h(o.$$.fragment,t)},m(t,a){f(o,t,a),n=!0},p(t,[a]){const s={};a&1&&(s.listPropsValues=t[0]),o.$set(s)},i(t){n||(u(o.$$.fragment,t),n=!0)},o(t){g(o.$$.fragment,t),n=!1},d(t){y(o,t)}}}function O(i,o,n){let{listPropsValues:t={onShown:["noop","log"],onHidden:["noop","log"],itemTransition:["collapse","fade"],onItemShown:["noop","log"],onItemHidden:["noop","log"],onItemVisibleChange:["noop","log"]}}=o;return i.$$set=a=>{"listPropsValues"in a&&n(0,t=a.listPropsValues)},[t]}class L extends d{constructor(o){super(),m(this,o,O,D,l,{listPropsValues:0})}}export{L as component};
