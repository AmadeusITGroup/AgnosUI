import{s as n,n as o}from"../chunks/scheduler.3bfaf327.js";import{S as s,i as l,r as c,u as p,v as m,d,t as u,w as b}from"../chunks/index.b4698ddd.js";import{g as h}from"../chunks/progressbar.a37dbfe2.js";import{A as f}from"../chunks/ApiDoc.fa882117.js";const g=[{name:"animated",description:"If `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.",fileName:"core/lib/progressbar.ts",start:{line:51,character:2,position:1370},end:{line:51,character:20,position:1388},type:"boolean",defaultValue:"false"},{name:"ariaLabel",description:"The aria label.",fileName:"core/lib/progressbar.ts",start:{line:30,character:2,position:846},end:{line:30,character:20,position:864},type:"string",defaultValue:"'Progressbar'"},{name:"ariaValueTextFn",description:"Return the value for the 'aria-valuetext' attribute.",fileName:"core/lib/progressbar.ts",start:{line:80,character:2,position:2014},end:{line:80,character:91,position:2103},type:"(value: number, minimum: number, maximum: number) => string | undefined",defaultValue:"() => undefined"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string",defaultValue:"''"},{name:"height",description:"Height of the progressbar, can be any valid css height value.",fileName:"core/lib/progressbar.ts",start:{line:42,character:2,position:1132},end:{line:42,character:17,position:1147},type:"string",defaultValue:"''"},{name:"max",description:"The maximum value.",fileName:"core/lib/progressbar.ts",start:{line:21,character:2,position:733},end:{line:21,character:14,position:745},type:"number",defaultValue:"100"},{name:"min",description:"The minimum value.",fileName:"core/lib/progressbar.ts",start:{line:16,character:2,position:664},end:{line:16,character:14,position:676},type:"number",defaultValue:"0"},{name:"slotContent",description:"Global template for the Progressbar content.",fileName:"core/lib/progressbar.ts",start:{line:34,character:2,position:925},end:{line:34,character:47,position:970},type:"SlotContent<ProgressbarContext>",defaultValue:"undefined"},{name:"slotDefault",description:"Label of the progress.",fileName:"core/lib/progressbar.ts",start:{line:38,character:2,position:1009},end:{line:38,character:47,position:1054},type:"SlotContent<ProgressbarContext>",defaultValue:"undefined"},{name:"striped",description:"If `true`, shows a striped progressbar.",fileName:"core/lib/progressbar.ts",start:{line:46,character:2,position:1203},end:{line:46,character:19,position:1220},type:"boolean",defaultValue:"false"},{name:"value",description:"The current value.",fileName:"core/lib/progressbar.ts",start:{line:26,character:2,position:800},end:{line:26,character:16,position:814},type:"number",defaultValue:"0"}],y=[{name:"animated",description:"If `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.",fileName:"core/lib/progressbar.ts",start:{line:51,character:2,position:1370},end:{line:51,character:20,position:1388},type:"boolean"},{name:"ariaLabel",description:"The aria label.",fileName:"core/lib/progressbar.ts",start:{line:30,character:2,position:846},end:{line:30,character:20,position:864},type:"string"},{name:"ariaValueText",description:"The aria value text.",fileName:"core/lib/progressbar.ts",start:{line:70,character:2,position:1730},end:{line:70,character:36,position:1764},type:"string | undefined"},{name:"className",description:"CSS classes to be applied on the widget main container",fileName:"core/lib/commonProps.ts",start:{line:5,character:2,position:116},end:{line:5,character:20,position:134},type:"string"},{name:"finished",description:"`true` if the value has reached its maximum value.",fileName:"core/lib/progressbar.ts",start:{line:66,character:2,position:1675},end:{line:66,character:20,position:1693},type:"boolean"},{name:"height",description:"Height of the progressbar, can be any valid css height value.",fileName:"core/lib/progressbar.ts",start:{line:42,character:2,position:1132},end:{line:42,character:17,position:1147},type:"string"},{name:"max",description:"The maximum value.",fileName:"core/lib/progressbar.ts",start:{line:21,character:2,position:733},end:{line:21,character:14,position:745},type:"number"},{name:"min",description:"The minimum value.",fileName:"core/lib/progressbar.ts",start:{line:16,character:2,position:664},end:{line:16,character:14,position:676},type:"number"},{name:"percentage",description:"Percentage of completion.",fileName:"core/lib/progressbar.ts",start:{line:58,character:2,position:1508},end:{line:58,character:21,position:1527},type:"number"},{name:"slotContent",description:"Global template for the Progressbar content.",fileName:"core/lib/progressbar.ts",start:{line:34,character:2,position:925},end:{line:34,character:47,position:970},type:"SlotContent<ProgressbarContext>"},{name:"slotDefault",description:"Label of the progress.",fileName:"core/lib/progressbar.ts",start:{line:38,character:2,position:1009},end:{line:38,character:47,position:1054},type:"SlotContent<ProgressbarContext>"},{name:"started",description:"`true` if the value is above its minimum value.",fileName:"core/lib/progressbar.ts",start:{line:62,character:2,position:1591},end:{line:62,character:19,position:1608},type:"boolean"},{name:"striped",description:"If `true`, shows a striped progressbar.",fileName:"core/lib/progressbar.ts",start:{line:46,character:2,position:1203},end:{line:46,character:19,position:1220},type:"boolean"},{name:"value",description:"The current value.",fileName:"core/lib/progressbar.ts",start:{line:26,character:2,position:800},end:{line:26,character:16,position:814},type:"number"}],N=[],v={props:g,state:y,api:N};function x(a){let e,r;return e=new f({props:{doc:v,defaultValues:h()}}),{c(){c(e.$$.fragment)},l(t){p(e.$$.fragment,t)},m(t,i){m(e,t,i),r=!0},p:o,i(t){r||(d(e.$$.fragment,t),r=!0)},o(t){u(e.$$.fragment,t),r=!1},d(t){b(e,t)}}}class P extends s{constructor(e){super(),l(this,e,null,x,n,{})}}export{P as component};
