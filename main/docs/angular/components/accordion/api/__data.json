{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,81,117],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"title":82,"submenu":83},"Bootstrap Components",[84,87,91,94,97,100,103,106,111,114],{"label":7,"status":8,"path":85,"subpath":-1,"slug":86},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":88,"subpath":89,"slug":90},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":92,"subpath":89,"slug":93},"docs/angular/components/alert/","components/alert/",{"label":58,"status":49,"path":95,"subpath":89,"slug":96},"docs/angular/components/modal/","components/modal/",{"label":62,"status":49,"path":98,"subpath":89,"slug":99},"docs/angular/components/pagination/","components/pagination/",{"label":66,"status":49,"path":101,"subpath":89,"slug":102},"docs/angular/components/progressbar/","components/progressbar/",{"label":70,"status":49,"path":104,"subpath":89,"slug":105},"docs/angular/components/rating/","components/rating/",{"label":107,"status":108,"path":109,"subpath":89,"slug":110},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":74,"status":49,"path":112,"subpath":89,"slug":113},"docs/angular/components/slider/","components/slider/",{"label":78,"status":49,"path":115,"subpath":89,"slug":116},"docs/angular/components/toast/","components/toast/",{"title":118,"submenu":119},"Services",[120,123,127,131,135,139],{"label":7,"status":8,"path":121,"subpath":-1,"slug":122},"docs/angular/services/introduction","services/introduction",{"label":124,"status":8,"path":125,"subpath":-1,"slug":126},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":128,"status":8,"path":129,"subpath":-1,"slug":130},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Transition","docs/angular/services/transition","services/transition",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":17,"next":20},"Accordion","stable","v0.1.1",[5,9,13],{"title":6,"key":7,"path":8},"Examples","examples","/components/accordion/examples",{"title":10,"key":11,"path":12},"Api","api","/components/accordion/api",{"title":14,"key":15,"path":16},"Playground","playground","/components/accordion/playground",{"title":18,"slug":19,"subpath":-1},"Bootstrap Components: Introduction","bootstrap-components/introduction",{"title":21,"slug":22,"subpath":7},"Alert","components/alert/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":72,"import":73,"pageMeta":74},"accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69],{"source":4,"name":5},"## interface_AccordionApi\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreates a new accordionItem.\n\n##### Parameters\n\n• **itemConfig?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":7,"name":8},"## class_AccordionBodyDirective\n### Constructors\n\n#### new AccordionBodyDirective\n\n> **new AccordionBodyDirective**(): [`AccordionBodyDirective`](#accordionbodydirective)\n\n##### Returns\n\n[`AccordionBodyDirective`](#accordionbodydirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`_dir`, `context`): `context is AccordionItemContext`\n\n##### Parameters\n\n• **\\_dir**: [`AccordionBodyDirective`](#accordionbodydirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is AccordionItemContext`\n","AccordionBodyDirective",{"source":10,"name":11},"## class_AccordionDirective\n### Constructors\n\n#### new AccordionDirective\n\n> **new AccordionDirective**(): [`AccordionDirective`](#accordiondirective)\n\n##### Returns\n\n[`AccordionDirective`](#accordiondirective)\n\n### Properties\n\n#### _widget\n\n> `readonly` **\\_widget**: [`AngularWidget`](../../../../api/angular/bootstrap/components/accordion/../../types#angularwidget)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `undefined` \\| `boolean`\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `undefined` \\| `boolean`\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `undefined` \\| `string`\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHidden\n\n> **itemHidden**: `EventEmitter`\\\u003C`string`\\>\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### itemShown\n\n> **itemShown**: `EventEmitter`\\\u003C`string`\\>\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: `undefined` \\| [`TransitionFn`](../../../../api/angular/bootstrap/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### state\n\n> `get` **state**(): [`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetstate)\\\u003C`W`\\>\\>\n\nRetrieves the widget state as an Angular Signal\n\n##### Returns\n\n[`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetstate)\\\u003C`W`\\>\\>\n\nthe widget state\n\n***\n\n#### widget\n\n> `get` **widget**(): [`ContextWidget`](../../../../api/angular/bootstrap/components/accordion/../../types#contextwidget)\\\u003C`W`\\>\n\nRetrieves the widget\n\n##### Returns\n\n[`ContextWidget`](../../../../api/angular/bootstrap/components/accordion/../../types#contextwidget)\\\u003C`W`\\>\n\nthe widget\n\n### Methods\n\n#### ngOnChanges\n\n> **ngOnChanges**(`changes`): `void`\n\n##### Parameters\n\n• **changes**: `SimpleChanges`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### ngOnInit\n\n> **ngOnInit**(): `void`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n","AccordionDirective",{"source":13,"name":14},"## interface_AccordionDirectives\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":16,"name":17},"## class_AccordionHeaderDirective\n### Constructors\n\n#### new AccordionHeaderDirective\n\n> **new AccordionHeaderDirective**(): [`AccordionHeaderDirective`](#accordionheaderdirective)\n\n##### Returns\n\n[`AccordionHeaderDirective`](#accordionheaderdirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`_dir`, `context`): `context is AccordionItemContext`\n\n##### Parameters\n\n• **\\_dir**: [`AccordionHeaderDirective`](#accordionheaderdirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is AccordionItemContext`\n","AccordionHeaderDirective",{"source":19,"name":20},"## interface_AccordionItemActions\n### Methods\n\n#### click\n\n> **click**(): `void`\n\nAction to be called when the user clicks on the accordion-item button. If the accordion-item is disabled nothing will happen.\n\n##### Returns\n\n`void`\n","AccordionItemActions",{"source":22,"name":23},"## interface_AccordionItemApi\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":25,"name":26},"## class_AccordionItemComponent\n### Implements\n\n- [`AfterContentChecked`](https://angular.dev/api/core/AfterContentChecked)\n- [`AfterViewInit`](https://angular.dev/api/core/AfterViewInit)\n\n### Constructors\n\n#### new AccordionItemComponent\n\n> **new AccordionItemComponent**(): [`AccordionItemComponent`](#accordionitemcomponent)\n\n##### Returns\n\n[`AccordionItemComponent`](#accordionitemcomponent)\n\n### Properties\n\n#### _widget\n\n> `readonly` **\\_widget**: [`AngularWidget`](../../../../api/angular/bootstrap/components/accordion/../../types#angularwidget)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\n***\n\n#### ad\n\n> `readonly` **ad**: [`AccordionDirective`](#accordiondirective)\n\n***\n\n#### animated\n\n> **animated**: `undefined` \\| `boolean`\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### defaultSlots\n\n> `readonly` **defaultSlots**: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>, [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\\>\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `undefined` \\| `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `undefined` \\| `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### hidden\n\n> **hidden**: `EventEmitter`\\\u003C`void`\\>\n\nAn event fired when an item is hidden.\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shown\n\n> **shown**: `EventEmitter`\\\u003C`void`\\>\n\nAn event fired when an item is shown.\n\n***\n\n#### slotBodyFromContent\n\n> **slotBodyFromContent**: `undefined` \\| [`AccordionBodyDirective`](#accordionbodydirective)\n\n***\n\n#### slotHeaderFromContent\n\n> **slotHeaderFromContent**: `undefined` \\| [`AccordionHeaderDirective`](#accordionheaderdirective)\n\n***\n\n#### slotStructureFromContent\n\n> **slotStructureFromContent**: `undefined` \\| [`AccordionItemStructureDirective`](#accordionitemstructuredirective)\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: `undefined` \\| [`TransitionFn`](../../../../api/angular/bootstrap/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `undefined` \\| `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n\n***\n\n#### visibleChange\n\n> **visibleChange**: `EventEmitter`\\\u003C`boolean`\\>\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### state\n\n> `get` **state**(): [`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetstate)\\\u003C`W`\\>\\>\n\nRetrieves the widget state as an Angular Signal\n\n##### Returns\n\n[`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetstate)\\\u003C`W`\\>\\>\n\nthe widget state\n\n***\n\n#### widget\n\n> `get` **widget**(): [`ContextWidget`](../../../../api/angular/bootstrap/components/accordion/../../types#contextwidget)\\\u003C`W`\\>\n\nRetrieves the widget\n\n##### Returns\n\n[`ContextWidget`](../../../../api/angular/bootstrap/components/accordion/../../types#contextwidget)\\\u003C`W`\\>\n\nthe widget\n\n### Methods\n\n#### ngAfterContentChecked\n\n> **ngAfterContentChecked**(): `void`\n\nA callback method that is invoked immediately after the\ndefault change detector has completed checking all of the directive's\ncontent.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterContentChecked.ngAfterContentChecked`\n\n***\n\n#### ngAfterViewInit\n\n> **ngAfterViewInit**(): `void`\n\nA callback method that is invoked immediately after\nAngular has completed initialization of a component's view.\nIt is invoked only once when the view is instantiated.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterViewInit.ngAfterViewInit`\n\n***\n\n#### ngOnChanges\n\n> **ngOnChanges**(`changes`): `void`\n\n##### Parameters\n\n• **changes**: `SimpleChanges`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### ngOnInit\n\n> **ngOnInit**(): `void`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n","AccordionItemComponent",{"source":28,"name":29},"## type alias_AccordionItemContext\n> **AccordionItemContext**: [`WidgetSlotContext`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetslotcontext)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n","AccordionItemContext",{"source":31,"name":32},"## constant_accordionItemDefaultSlotItemStructure\n> `const` **accordionItemDefaultSlotItemStructure**: [`ComponentTemplate`](../../../../api/angular/bootstrap/components/accordion/../../types#componenttemplate)\\\u003C`unknown`, `\"structure\"`, [`AccordionItemDefaultSlotsComponent`](#accordionitemdefaultslotscomponent)\\>\n","accordionItemDefaultSlotItemStructure",{"source":34,"name":35},"## class_AccordionItemDefaultSlotsComponent\n### Constructors\n\n#### new AccordionItemDefaultSlotsComponent\n\n> **new AccordionItemDefaultSlotsComponent**(): [`AccordionItemDefaultSlotsComponent`](#accordionitemdefaultslotscomponent)\n\n##### Returns\n\n[`AccordionItemDefaultSlotsComponent`](#accordionitemdefaultslotscomponent)\n\n### Properties\n\n#### structure\n\n> **structure**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n","AccordionItemDefaultSlotsComponent",{"source":37,"name":38},"## interface_AccordionItemDirectives\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../../../../api/angular/bootstrap/components/accordion/../../types#directive)\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":40,"name":41},"## interface_AccordionItemProps\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../../../../api/angular/bootstrap/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":43,"name":44},"## interface_AccordionItemState\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":46,"name":47},"## class_AccordionItemStructureDirective\n### Constructors\n\n#### new AccordionItemStructureDirective\n\n> **new AccordionItemStructureDirective**(): [`AccordionItemStructureDirective`](#accordionitemstructuredirective)\n\n##### Returns\n\n[`AccordionItemStructureDirective`](#accordionitemstructuredirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`_dir`, `context`): `context is AccordionItemContext`\n\n##### Parameters\n\n• **\\_dir**: [`AccordionItemStructureDirective`](#accordionitemstructuredirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is AccordionItemContext`\n","AccordionItemStructureDirective",{"source":49,"name":50},"## type alias_AccordionItemWidget\n> **AccordionItemWidget**: [`Widget`](../../../../api/angular/bootstrap/components/accordion/../../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemActions`](#accordionitemactions), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n","AccordionItemWidget",{"source":52,"name":53},"## interface_AccordionProps\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../../../../api/angular/bootstrap/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n• **itemId**: `string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":55,"name":56},"## interface_AccordionState\n### Properties\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../../../../api/angular/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":58,"name":59},"## type alias_AccordionWidget\n> **AccordionWidget**: [`Widget`](../../../../api/angular/bootstrap/components/accordion/../../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), `object`, [`AccordionDirectives`](#accordiondirectives)\\>\n","AccordionWidget",{"source":61,"name":62},"## function_createAccordion\n> **createAccordion**(`props`?): [`AccordionWidget`](#accordionwidget)\n\nCreate an AccordionWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/accordion/../../types#propsconfig)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\n### Returns\n\n[`AccordionWidget`](#accordionwidget)\n\nan AccordionWidget\n","createAccordion",{"source":64,"name":65},"## function_createAccordionItem\n> **createAccordionItem**(`props`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nCreate an AccordionItemWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\nan AccordionItemWidget\n","createAccordionItem",{"source":67,"name":68},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`?, `accordionItemProps`?, `accordionConfig`?, `accordionValidator`?): [`WidgetFactory`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n• **itemFactory?**: [`WidgetFactory`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nthe item factory\n\n• **accordionItemProps?**: `string`[]\n\nthe list of item props\n\n• **accordionConfig?**: [`AccordionProps`](#accordionprops)\n\nthe default accordion config\n\n• **accordionValidator?**: [`ConfigValidator`](../../../../api/angular/bootstrap/components/accordion/../../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../../../../api/angular/bootstrap/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":70,"name":71},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig","Accordion","@agnos-ui/angular-bootstrap",{"description":75},"API Documentation for accordion"],"uses":{"params":["framework","component"]}}]}
