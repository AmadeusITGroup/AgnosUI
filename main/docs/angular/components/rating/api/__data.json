{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,81,117],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"title":82,"submenu":83},"Bootstrap Components",[84,87,91,94,97,100,103,106,111,114],{"label":7,"status":8,"path":85,"subpath":-1,"slug":86},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":88,"subpath":89,"slug":90},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":92,"subpath":89,"slug":93},"docs/angular/components/alert/","components/alert/",{"label":58,"status":49,"path":95,"subpath":89,"slug":96},"docs/angular/components/modal/","components/modal/",{"label":62,"status":49,"path":98,"subpath":89,"slug":99},"docs/angular/components/pagination/","components/pagination/",{"label":66,"status":49,"path":101,"subpath":89,"slug":102},"docs/angular/components/progressbar/","components/progressbar/",{"label":70,"status":49,"path":104,"subpath":89,"slug":105},"docs/angular/components/rating/","components/rating/",{"label":107,"status":108,"path":109,"subpath":89,"slug":110},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":74,"status":49,"path":112,"subpath":89,"slug":113},"docs/angular/components/slider/","components/slider/",{"label":78,"status":49,"path":115,"subpath":89,"slug":116},"docs/angular/components/toast/","components/toast/",{"title":118,"submenu":119},"Services",[120,123,127,131,135,139],{"label":7,"status":8,"path":121,"subpath":-1,"slug":122},"docs/angular/services/introduction","services/introduction",{"label":124,"status":8,"path":125,"subpath":-1,"slug":126},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":128,"status":8,"path":129,"subpath":-1,"slug":130},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Transition","docs/angular/services/transition","services/transition",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":18,"next":21},"Rating","stable","v0.1.1","standalone",[6,10,14],{"title":7,"key":8,"path":9},"Examples","examples","/components/rating/examples",{"title":11,"key":12,"path":13},"Api","api","/components/rating/api",{"title":15,"key":16,"path":17},"Playground","playground","/components/rating/playground#",{"title":19,"slug":20,"subpath":8},"Progressbar","components/progressbar/",{"title":22,"slug":23,"subpath":8},"Select","components/select/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":33,"import":34},"rating",[3,6,9,12,15,18,21,24,27,30],{"source":4,"name":5},"## function_createRating\n> **createRating**(`props`?): [`RatingWidget`](#ratingwidget)\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/rating/../../types#propsconfig)\\\u003C[`RatingProps`](#ratingprops)\\>\n\n### Returns\n\n[`RatingWidget`](#ratingwidget)\n\na RatingWidget\n","createRating",{"source":7,"name":8},"## function_getRatingDefaultConfig\n> **getRatingDefaultConfig**(): [`RatingProps`](#ratingprops)\n\n### Returns\n\n[`RatingProps`](#ratingprops)\n\nthe default Rating config\n","getRatingDefaultConfig",{"source":10,"name":11},"## interface_RatingActions\n### Methods\n\n#### click\n\n> **click**(`index`): `void`\n\nMethod to be used when a star is clicked.\n\nTo be used in the onclick event of a star\n\n##### Parameters\n\n• **index**: `number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n\n***\n\n#### handleKey\n\n> **handleKey**(`event`): `void`\n\nMethod to be used to handle the keyboard.\n\nTo be used in the onkeydown of the rating container\n\n##### Parameters\n\n• **event**: [`KeyboardEvent`](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)\n\n##### Returns\n\n`void`\n\n***\n\n#### hover\n\n> **hover**(`index`): `void`\n\nMethod to be used when the mouse enter in a star.\n\nTo be used in the onmouseenter of a star\n\n##### Parameters\n\n• **index**: `number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n\n***\n\n#### leave\n\n> **leave**(): `void`\n\nMethod to be used when the mouse leave the widget.\n\nTo be used in the onmouseleave of the rating container\n\n##### Returns\n\n`void`\n","RatingActions",{"source":13,"name":14},"## class_RatingComponent\n### Implements\n\n- [`ControlValueAccessor`](https://angular.dev/api/forms/ControlValueAccessor)\n- [`AfterContentChecked`](https://angular.dev/api/core/AfterContentChecked)\n\n### Constructors\n\n#### new RatingComponent\n\n> **new RatingComponent**(): [`RatingComponent`](#ratingcomponent)\n\n##### Returns\n\n[`RatingComponent`](#ratingcomponent)\n\n### Properties\n\n#### _widget\n\n> `readonly` **\\_widget**: [`AngularWidget`](../../../../api/angular/bootstrap/components/rating/../../types#angularwidget)\\\u003C[`RatingWidget`](#ratingwidget)\\>\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `undefined` \\| `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: `undefined` \\| (`rating`, `maxRating`) => `string`\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Param\n\nCurrent rating value.\n\n##### Param\n\nmaxRating value.\n\n##### Default Value\n\n```ts\n(rating: number, maxRating: number) => `${rating} out of ${maxRating}`\n```\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `undefined` \\| `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### hover\n\n> **hover**: `EventEmitter`\\\u003C`number`\\>\n\nAn event emitted when the user is hovering over a given rating.\n\nEvent payload is equal to the rating being hovered over.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### leave\n\n> **leave**: `EventEmitter`\\\u003C`number`\\>\n\nAn event emitted when the user stops hovering over a given rating.\n\nEvent payload is equal to the rating of the last item being hovered over.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### maxRating\n\n> **maxRating**: `undefined` \\| `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### rating\n\n> **rating**: `undefined` \\| `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### ratingChange\n\n> **ratingChange**: `EventEmitter`\\\u003C`number`\\>\n\nAn event emitted when the rating is changed.\n\nEvent payload is equal to the newly selected rating.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### readonly\n\n> **readonly**: `undefined` \\| `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `undefined` \\| `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### slotStarFromContent\n\n> **slotStarFromContent**: `undefined` \\| [`RatingStarDirective`](#ratingstardirective)\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../../../../api/angular/bootstrap/components/rating/../../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### tabindex\n\n> **tabindex**: `undefined` \\| `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\n***\n\n#### state\n\n> `get` **state**(): [`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/rating/../../types#widgetstate)\\\u003C`W`\\>\\>\n\n##### Returns\n\n[`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/rating/../../types#widgetstate)\\\u003C`W`\\>\\>\n\n***\n\n#### widget\n\n> `get` **widget**(): [`ContextWidget`](../../../../api/angular/bootstrap/components/rating/../../types#contextwidget)\\\u003C`W`\\>\n\n##### Returns\n\n[`ContextWidget`](../../../../api/angular/bootstrap/components/rating/../../types#contextwidget)\\\u003C`W`\\>\n\n### Methods\n\n#### ngAfterContentChecked\n\n> **ngAfterContentChecked**(): `void`\n\nA callback method that is invoked immediately after the\ndefault change detector has completed checking all of the directive's\ncontent.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterContentChecked.ngAfterContentChecked`\n\n***\n\n#### ngOnChanges\n\n> **ngOnChanges**(`changes`): `void`\n\n##### Parameters\n\n• **changes**: `SimpleChanges`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### ngOnInit\n\n> **ngOnInit**(): `void`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### onChange\n\n> **onChange**(`_`): `void`\n\n##### Parameters\n\n• **\\_**: `any`\n\n##### Returns\n\n`void`\n\n***\n\n#### onTouched\n\n> **onTouched**(): `void`\n\n##### Returns\n\n`void`\n\n***\n\n#### registerOnChange\n\n> **registerOnChange**(`fn`): `void`\n\n##### Parameters\n\n• **fn**\n\nThe callback function to register\n\n##### Returns\n\n`void`\n\n##### Description\n\nRegisters a callback function that is called when the control's value\nchanges in the UI.\n\nThis method is called by the forms API on initialization to update the form\nmodel when values propagate from the view to the model.\n\nWhen implementing the `registerOnChange` method in your own value accessor,\nsave the given function so your class calls it at the appropriate time.\n\n##### Usage Notes\n\n#### Store the change function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnChange(fn: (_: any) => void): void {\n  this._onChange = fn;\n}\n```\n\nWhen the value changes in the UI, call the registered\nfunction to allow the forms API to update itself:\n\n```ts\nhost: {\n   '(change)': '_onChange($event.target.value)'\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.registerOnChange`\n\n***\n\n#### registerOnTouched\n\n> **registerOnTouched**(`fn`): `void`\n\n##### Parameters\n\n• **fn**\n\nThe callback function to register\n\n##### Returns\n\n`void`\n\n##### Description\n\nRegisters a callback function that is called by the forms API on initialization\nto update the form model on blur.\n\nWhen implementing `registerOnTouched` in your own value accessor, save the given\nfunction so your class calls it when the control should be considered\nblurred or \"touched\".\n\n##### Usage Notes\n\n#### Store the callback function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnTouched(fn: any): void {\n  this._onTouched = fn;\n}\n```\n\nOn blur (or equivalent), your class should call the registered function to allow\nthe forms API to update itself:\n\n```ts\nhost: {\n   '(blur)': '_onTouched()'\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.registerOnTouched`\n\n***\n\n#### setDisabledState\n\n> **setDisabledState**(`disabled`): `void`\n\n##### Parameters\n\n• **disabled**: `boolean`\n\n##### Returns\n\n`void`\n\n##### Description\n\nFunction that is called by the forms API when the control status changes to\nor from 'DISABLED'. Depending on the status, it enables or disables the\nappropriate DOM element.\n\n##### Usage Notes\n\nThe following is an example of writing the disabled property to a native DOM element:\n\n```ts\nsetDisabledState(isDisabled: boolean): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.setDisabledState`\n\n***\n\n#### trackByIndex\n\n> **trackByIndex**(`index`): `number`\n\n##### Parameters\n\n• **index**: `number`\n\n##### Returns\n\n`number`\n\n***\n\n#### writeValue\n\n> **writeValue**(`value`): `void`\n\n##### Parameters\n\n• **value**: `any`\n\n##### Returns\n\n`void`\n\n##### Description\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n##### Usage Notes\n\n#### Write a value to the element\n\nThe following example writes a value to the native DOM element.\n\n```ts\nwriteValue(value: any): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.writeValue`\n","RatingComponent",{"source":16,"name":17},"## interface_RatingDirectives\n### Properties\n\n#### containerDirective\n\n> **containerDirective**: [`Directive`](../../../../api/angular/bootstrap/components/rating/../../types#directive)\n\nA directive to be applied to the main container\nThis will handle the keydown, mouseleave, tabindex and aria attributes\n\n***\n\n#### starDirective\n\n> **starDirective**: [`Directive`](../../../../api/angular/bootstrap/components/rating/../../types#directive)\\\u003C`object`\\>\n\nA directive to be applied on each star element\n\n##### Type declaration\n\n###### index\n\n> **index**: `number`\n","RatingDirectives",{"source":19,"name":20},"## interface_RatingProps\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: (`rating`, `maxRating`) => `string`\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Parameters\n\n• **rating**: `number`\n\nCurrent rating value.\n\n• **maxRating**: `number`\n\nmaxRating value.\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(rating: number, maxRating: number) => `${rating} out of ${maxRating}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### onHover\n\n> **onHover**: (`rating`) => `void`\n\nAn event emitted when the user is hovering over a given rating.\n\nEvent payload is equal to the rating being hovered over.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onLeave\n\n> **onLeave**: (`rating`) => `void`\n\nAn event emitted when the user stops hovering over a given rating.\n\nEvent payload is equal to the rating of the last item being hovered over.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onRatingChange\n\n> **onRatingChange**: (`rating`) => `void`\n\nAn event emitted when the rating is changed.\n\nEvent payload is equal to the newly selected rating.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### rating\n\n> **rating**: `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../../../../api/angular/bootstrap/components/rating/../../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n","RatingProps",{"source":22,"name":23},"## class_RatingStarDirective\n### Constructors\n\n#### new RatingStarDirective\n\n> **new RatingStarDirective**(): [`RatingStarDirective`](#ratingstardirective)\n\n##### Returns\n\n[`RatingStarDirective`](#ratingstardirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`_dir`, `context`): `context is StarContext`\n\n##### Parameters\n\n• **\\_dir**: [`RatingStarDirective`](#ratingstardirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is StarContext`\n","RatingStarDirective",{"source":25,"name":26},"## interface_RatingState\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `string`\n\nthe aria value of the rating\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\nis the rating interactive i.e. listening to hover, click and keyboard events\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### rating\n\n> **rating**: `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../../../../api/angular/bootstrap/components/rating/../../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### stars\n\n> **stars**: [`StarContext`](#starcontext)[]\n\nthe list of stars\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### visibleRating\n\n> **visibleRating**: `number`\n\nthe visible value of the rating (it changes when hovering over the rating even though the real value did not change)\n","RatingState",{"source":28,"name":29},"## type alias_RatingWidget\n> **RatingWidget**: [`Widget`](../../../../api/angular/bootstrap/components/rating/../../types#widget)\\\u003C[`RatingProps`](#ratingprops), [`RatingState`](#ratingstate), `object`, [`RatingActions`](#ratingactions), [`RatingDirectives`](#ratingdirectives)\\>\n","RatingWidget",{"source":31,"name":32},"## interface_StarContext\n### Properties\n\n#### fill\n\n> **fill**: `number`\n\nindicates how much the current star is filled, from 0 to 100\n\n***\n\n#### index\n\n> **index**: `number`\n\nthe position of the star in the rating\n","StarContext","Rating","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
