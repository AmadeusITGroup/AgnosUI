{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,81,117],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"title":82,"submenu":83},"Bootstrap Components",[84,87,91,94,97,100,103,106,111,114],{"label":7,"status":8,"path":85,"subpath":-1,"slug":86},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":88,"subpath":89,"slug":90},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":92,"subpath":89,"slug":93},"docs/angular/components/alert/","components/alert/",{"label":58,"status":49,"path":95,"subpath":89,"slug":96},"docs/angular/components/modal/","components/modal/",{"label":62,"status":49,"path":98,"subpath":89,"slug":99},"docs/angular/components/pagination/","components/pagination/",{"label":66,"status":49,"path":101,"subpath":89,"slug":102},"docs/angular/components/progressbar/","components/progressbar/",{"label":70,"status":49,"path":104,"subpath":89,"slug":105},"docs/angular/components/rating/","components/rating/",{"label":107,"status":108,"path":109,"subpath":89,"slug":110},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":74,"status":49,"path":112,"subpath":89,"slug":113},"docs/angular/components/slider/","components/slider/",{"label":78,"status":49,"path":115,"subpath":89,"slug":116},"docs/angular/components/toast/","components/toast/",{"title":118,"submenu":119},"Services",[120,123,127,131,135,139],{"label":7,"status":8,"path":121,"subpath":-1,"slug":122},"docs/angular/services/introduction","services/introduction",{"label":124,"status":8,"path":125,"subpath":-1,"slug":126},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":128,"status":8,"path":129,"subpath":-1,"slug":130},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Transition","docs/angular/services/transition","services/transition",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":17,"next":20},"Toast","stable","v0.2.0",[5,9,13],{"title":6,"key":7,"path":8},"Examples","examples","/components/toast/examples",{"title":10,"key":11,"path":12},"Api","api","/components/toast/api",{"title":14,"key":15,"path":16},"Playground","playground","/components/toast/playground#{\"props\":{\"children\":\"This is a toast\",\"autoHide\":false,\"className\":\"text-bg-primary\"}}",{"title":18,"slug":19,"subpath":7},"Slider","components/slider/",{"title":21,"slug":22,"subpath":-1},"Services: Introduction","services/introduction"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":45,"import":46},"toast",[3,6,9,12,15,18,21,24,27,30,33,36,39,42],{"source":4,"name":5},"## function_createToast\n> **createToast**(`props`?): [`ToastWidget`](#toastwidget)\n\nCreate an ToastWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/toast/../../types#propsconfig)\\\u003C[`ToastProps`](#toastprops)\\>\n\n### Returns\n\n[`ToastWidget`](#toastwidget)\n\nan ToastWidget\n","createToast",{"source":7,"name":8},"## function_getToastDefaultConfig\n> **getToastDefaultConfig**(): [`ToastProps`](#toastprops)\n\nRetrieve a shallow copy of the default Toast config\n\n### Returns\n\n[`ToastProps`](#toastprops)\n\nthe default Toast config\n","getToastDefaultConfig",{"source":10,"name":11},"## interface_ToastApi\n### Methods\n\n#### close\n\n> **close**(): `void`\n\nTriggers alert closing programmatically (same as clicking on the close button (×)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","ToastApi",{"source":13,"name":14},"## class_ToastBodyDirective\n### Constructors\n\n#### new ToastBodyDirective\n\n> **new ToastBodyDirective**(): [`ToastBodyDirective`](#toastbodydirective)\n\n##### Returns\n\n[`ToastBodyDirective`](#toastbodydirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`dir`, `context`): `context is ToastContext`\n\n##### Parameters\n\n• **dir**: [`ToastBodyDirective`](#toastbodydirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is ToastContext`\n","ToastBodyDirective",{"source":16,"name":17},"## class_ToastComponent\n### Implements\n\n- [`AfterContentChecked`](https://angular.dev/api/core/AfterContentChecked)\n\n### Constructors\n\n#### new ToastComponent\n\n> **new ToastComponent**(): [`ToastComponent`](#toastcomponent)\n\n##### Returns\n\n[`ToastComponent`](#toastcomponent)\n\n### Properties\n\n#### _widget\n\n> `readonly` **\\_widget**: [`AngularWidget`](../../../../api/angular/bootstrap/components/toast/../../types#angularwidget)\\\u003C[`ToastWidget`](#toastwidget)\\>\n\n***\n\n#### animated\n\n> **animated**: `undefined` \\| `boolean`\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `undefined` \\| `boolean`\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `undefined` \\| `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `undefined` \\| `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### defaultSlots\n\n> `readonly` **defaultSlots**: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`ToastProps`](#toastprops)\\>, [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`ToastProps`](#toastprops)\\>\\>\n\n***\n\n#### delay\n\n> **delay**: `undefined` \\| `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `undefined` \\| `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nHeader template for the toast component\n\n***\n\n#### hidden\n\n> **hidden**: `EventEmitter`\\\u003C`void`\\>\n\nCallback called when the alert is hidden.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### shown\n\n> **shown**: `EventEmitter`\\\u003C`void`\\>\n\nCallback called when the alert is shown.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### slotDefaultFromContent\n\n> **slotDefaultFromContent**: `undefined` \\| [`ToastBodyDirective`](#toastbodydirective)\n\n***\n\n#### slotHeaderFromContent\n\n> **slotHeaderFromContent**: `undefined` \\| [`ToastHeaderDirective`](#toastheaderdirective)\n\n***\n\n#### slotStructureFromContent\n\n> **slotStructureFromContent**: `undefined` \\| [`ToastStructureDirective`](#toaststructuredirective)\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nGlobal template for the toast component\n\n***\n\n#### transition\n\n> **transition**: `undefined` \\| [`TransitionFn`](../../../../api/angular/bootstrap/components/toast/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### visible\n\n> **visible**: `undefined` \\| `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n\n***\n\n#### visibleChange\n\n> **visibleChange**: `EventEmitter`\\\u003C`boolean`\\>\n\nCallback called when the alert visibility changed.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\n***\n\n#### state\n\n> `get` **state**(): [`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/toast/../../types#widgetstate)\\\u003C`W`\\>\\>\n\n##### Returns\n\n[`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/toast/../../types#widgetstate)\\\u003C`W`\\>\\>\n\n***\n\n#### widget\n\n> `get` **widget**(): [`ContextWidget`](../../../../api/angular/bootstrap/components/toast/../../types#contextwidget)\\\u003C`W`\\>\n\n##### Returns\n\n[`ContextWidget`](../../../../api/angular/bootstrap/components/toast/../../types#contextwidget)\\\u003C`W`\\>\n\n### Methods\n\n#### ngAfterContentChecked\n\n> **ngAfterContentChecked**(): `void`\n\nA callback method that is invoked immediately after the\ndefault change detector has completed checking all of the directive's\ncontent.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterContentChecked.ngAfterContentChecked`\n\n***\n\n#### ngOnChanges\n\n> **ngOnChanges**(`changes`): `void`\n\n##### Parameters\n\n• **changes**: `SimpleChanges`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### ngOnInit\n\n> **ngOnInit**(): `void`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n","ToastComponent",{"source":19,"name":20},"## type alias_ToastContext\n> **ToastContext**: [`WidgetSlotContext`](../../../../api/angular/bootstrap/components/toast/../../types#widgetslotcontext)\\\u003C[`ToastWidget`](#toastwidget)\\>\n","ToastContext",{"source":22,"name":23},"## class_ToastDefaultSlotsComponent\n### Constructors\n\n#### new ToastDefaultSlotsComponent\n\n> **new ToastDefaultSlotsComponent**(): [`ToastDefaultSlotsComponent`](#toastdefaultslotscomponent)\n\n##### Returns\n\n[`ToastDefaultSlotsComponent`](#toastdefaultslotscomponent)\n\n### Properties\n\n#### structure\n\n> **structure**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C[`ToastContext`](#toastcontext)\\>\n","ToastDefaultSlotsComponent",{"source":25,"name":26},"## constant_toastDefaultSlotStructure\n> `const` **toastDefaultSlotStructure**: [`ComponentTemplate`](../../../../api/angular/bootstrap/components/toast/../../types#componenttemplate)\\\u003C`unknown`, `\"structure\"`, [`ToastDefaultSlotsComponent`](#toastdefaultslotscomponent)\\>\n","toastDefaultSlotStructure",{"source":28,"name":29},"## interface_ToastDirectives\n### Properties\n\n#### autoHideDirective\n\n> **autoHideDirective**: [`Directive`](../../../../api/angular/bootstrap/components/toast/../../types#directive)\n\nDirective that handles the autohide of the toast component\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../../../../api/angular/bootstrap/components/toast/../../types#directive)\n\nDirective that adds all the necessary attributes to the body\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: [`Directive`](../../../../api/angular/bootstrap/components/toast/../../types#directive)\n\nDirective that adds all the necessary attributes to the close button depending on the presence of the header\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../../../../api/angular/bootstrap/components/toast/../../types#directive)\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","ToastDirectives",{"source":31,"name":32},"## class_ToastHeaderDirective\n### Constructors\n\n#### new ToastHeaderDirective\n\n> **new ToastHeaderDirective**(): [`ToastHeaderDirective`](#toastheaderdirective)\n\n##### Returns\n\n[`ToastHeaderDirective`](#toastheaderdirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`dir`, `context`): `context is ToastContext`\n\n##### Parameters\n\n• **dir**: [`ToastHeaderDirective`](#toastheaderdirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is ToastContext`\n","ToastHeaderDirective",{"source":34,"name":35},"## interface_ToastProps\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nHeader template for the toast component\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nGlobal template for the toast component\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../../../../api/angular/bootstrap/components/toast/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastProps",{"source":37,"name":38},"## interface_ToastState\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nHeader template for the toast component\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nGlobal template for the toast component\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastState",{"source":40,"name":41},"## class_ToastStructureDirective\n### Constructors\n\n#### new ToastStructureDirective\n\n> **new ToastStructureDirective**(): [`ToastStructureDirective`](#toaststructuredirective)\n\n##### Returns\n\n[`ToastStructureDirective`](#toaststructuredirective)\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**(`dir`, `context`): `context is ToastContext`\n\n##### Parameters\n\n• **dir**: [`ToastStructureDirective`](#toaststructuredirective)\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is ToastContext`\n","ToastStructureDirective",{"source":43,"name":44},"## type alias_ToastWidget\n> **ToastWidget**: [`Widget`](../../../../api/angular/bootstrap/components/toast/../../types#widget)\\\u003C[`ToastProps`](#toastprops), [`ToastState`](#toaststate), [`ToastApi`](#toastapi), `object`, [`ToastDirectives`](#toastdirectives)\\>\n","ToastWidget","Toast","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
