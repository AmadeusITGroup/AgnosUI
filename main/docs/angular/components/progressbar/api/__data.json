{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,95,139],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,67,71,75,79,83,87,91],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Carousel","inprogress","docs/angular/daisyUI/carousel/","daisyUI/carousel/",{"label":63,"status":64,"path":65,"subpath":51,"slug":66},"Collapse","beta","docs/angular/daisyUI/collapse/","daisyUI/collapse/",{"label":68,"status":49,"path":69,"subpath":51,"slug":70},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":72,"status":49,"path":73,"subpath":51,"slug":74},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":76,"status":49,"path":77,"subpath":51,"slug":78},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":80,"status":49,"path":81,"subpath":51,"slug":82},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":84,"status":49,"path":85,"subpath":51,"slug":86},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":88,"status":49,"path":89,"subpath":51,"slug":90},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"label":92,"status":64,"path":93,"subpath":51,"slug":94},"Tree","docs/angular/daisyUI/tree/","daisyUI/tree/",{"title":96,"submenu":97},"Bootstrap Components",[98,101,105,108,111,114,117,120,123,126,130,133,136],{"label":7,"status":8,"path":99,"subpath":-1,"slug":100},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":102,"subpath":103,"slug":104},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":106,"subpath":103,"slug":107},"docs/angular/components/alert/","components/alert/",{"label":58,"status":59,"path":109,"subpath":103,"slug":110},"docs/angular/components/carousel/","components/carousel/",{"label":63,"status":64,"path":112,"subpath":103,"slug":113},"docs/angular/components/collapse/","components/collapse/",{"label":68,"status":49,"path":115,"subpath":103,"slug":116},"docs/angular/components/modal/","components/modal/",{"label":72,"status":49,"path":118,"subpath":103,"slug":119},"docs/angular/components/pagination/","components/pagination/",{"label":76,"status":49,"path":121,"subpath":103,"slug":122},"docs/angular/components/progressbar/","components/progressbar/",{"label":80,"status":49,"path":124,"subpath":103,"slug":125},"docs/angular/components/rating/","components/rating/",{"label":127,"status":59,"path":128,"subpath":103,"slug":129},"Select","docs/angular/components/select/","components/select/",{"label":84,"status":49,"path":131,"subpath":103,"slug":132},"docs/angular/components/slider/","components/slider/",{"label":88,"status":49,"path":134,"subpath":103,"slug":135},"docs/angular/components/toast/","components/toast/",{"label":92,"status":64,"path":137,"subpath":103,"slug":138},"docs/angular/components/tree/","components/tree/",{"title":140,"submenu":141},"Services",[142,145,149,153,157,161,165],{"label":7,"status":8,"path":143,"subpath":-1,"slug":144},"docs/angular/services/introduction","services/introduction",{"label":146,"status":8,"path":147,"subpath":-1,"slug":148},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Match Media","docs/angular/services/match-media","services/match-media",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Navigation Manager","docs/angular/services/navigation-manager","services/navigation-manager",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Transition","docs/angular/services/transition","services/transition"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":14,"next":17},"Progressbar","stable","v0.1.1","bootstrap",[6,10],{"title":7,"key":8,"path":9},"Examples","examples","/components/progressbar/examples",{"title":11,"key":12,"path":13},"Api","api","/components/progressbar/api",{"title":15,"slug":16,"subpath":8},"Pagination","components/pagination/",{"title":18,"slug":19,"subpath":8},"Rating","components/rating/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":36,"import":37},"progressbar",[3,6,9,12,15,18,21,24,27,30,33],{"source":4,"name":5},"## function_createProgressbar\n> **createProgressbar**(`props`?): [`ProgressbarWidget`](#progressbarwidget)\n\n\nCreate a Progressbar with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../../../../api/angular/bootstrap/components/progressbar/../../types#propsconfig)\\\u003C[`ProgressbarProps`](#progressbarprops)\\>\n\n### Returns\n\n[`ProgressbarWidget`](#progressbarwidget)\n\na ProgressbarWidget\n","createProgressbar",{"source":7,"name":8},"## function_getProgressbarDefaultConfig\n> **getProgressbarDefaultConfig**(): [`ProgressbarProps`](#progressbarprops)\n\n\nRetrieve a shallow copy of the default Progressbar config\n\n### Returns\n\n[`ProgressbarProps`](#progressbarprops)\n\nthe default Progressbar config\n","getProgressbarDefaultConfig",{"source":10,"name":11},"## class_ProgressbarBodyDirective\n\nDirective that provides a template reference for the progress bar context.\nThis directive provides a template reference for the [ProgressbarContext](#progressbarcontext).\n","ProgressbarBodyDirective",{"source":13,"name":14},"## class_ProgressbarComponent\n\nProgressbarComponent is a UI component that extends the BaseWidgetDirective\nto create a customizable progress bar widget. It provides various inputs\nto configure the appearance and behavior of the progress bar.\n\n### Properties\n\n#### animated\n\n> `readonly` **animated**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaLabel\n\n> `readonly` **ariaLabel**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nThe aria label.\n\n##### Default Value\n\n`'Progressbar'`\n\n***\n\n#### ariaValueTextFn\n\n> `readonly` **ariaValueTextFn**: `InputSignal`\\\u003C`undefined` \\| (`value`, `minimum`, `maximum`) => `undefined` \\| `string`\\>\n\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Param\n\ncurrent value\n\n##### Param\n\nminimum value\n\n##### Param\n\nmaximum value\n\n##### Default Value\n\n```ts\n() => undefined\n```\n\n***\n\n#### children\n\n> `readonly` **children**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\\>\n\n\nLabel of the progress.\n\n***\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### height\n\n> `readonly` **height**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nHeight of the progressbar, can be any valid css height value.\n\n##### Default Value\n\n`''`\n\n***\n\n#### max\n\n> `readonly` **max**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nThe maximum value.\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> `readonly` **min**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nThe minimum value.\n\n##### Default Value\n\n`0`\n\n***\n\n#### striped\n\n> `readonly` **striped**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true`, shows a striped progressbar.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> `readonly` **structure**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\\>\n\n\nGlobal template for the Progressbar.\n\n***\n\n#### type\n\n> `readonly` **type**: `InputSignal`\\\u003C`undefined` \\| [`BSContextualClass`](../../../../api/angular/bootstrap/components/progressbar/../../types#bscontextualclass)\\>\n\n\nType of the progressbar, following bootstrap types.\n\n***\n\n#### value\n\n> `readonly` **value**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nThe current value.\n\n##### Default Value\n\n`0`\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../../../../api/angular/bootstrap/components/progressbar/../../types#angularstate)\\\u003C`W`\\>\n\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../../../../api/angular/bootstrap/components/progressbar/../../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","ProgressbarComponent",{"source":16,"name":17},"## interface_ProgressbarContext\n\nRepresents the context for a Progressbar widget.\nThis interface is used to define the context object that is passed to the Progressbar widget.\n\n### Properties\n\n#### api\n\n> **api**: `object`\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`ProgressbarDirectives`](#progressbardirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/progressbar/../../types#angularstate)\\\u003C[`ProgressbarWidget`](#progressbarwidget)\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","ProgressbarContext",{"source":19,"name":20},"## constant_progressbarDefaultSlotStructure\n> `const` **progressbarDefaultSlotStructure**: [`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\n\nRepresents the default slot structure for the progress bar component.\n","progressbarDefaultSlotStructure",{"source":22,"name":23},"## interface_ProgressbarDirectives\n\nInterface representing directives for a progress bar component.\n\n### Properties\n\n#### ariaDirective\n\n> **ariaDirective**: [`Directive`](../../../../api/angular/bootstrap/components/progressbar/../../types#directive)\n\n\nA directive to be applied to the main container that handles aria attributes.\n","ProgressbarDirectives",{"source":25,"name":26},"## interface_ProgressbarProps\n\nInterface representing the properties for the Progressbar component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nThe aria label.\n\n##### Default Value\n\n`'Progressbar'`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: (`value`, `minimum`, `maximum`) => `undefined` \\| `string`\n\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Parameters\n\n###### value\n\n`number`\n\ncurrent value\n\n###### minimum\n\n`number`\n\nminimum value\n\n###### maximum\n\n`number`\n\nmaximum value\n\n##### Returns\n\n`undefined` \\| `string`\n\n##### Default Value\n\n```ts\n() => undefined\n```\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\n\nLabel of the progress.\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### height\n\n> **height**: `string`\n\n\nHeight of the progressbar, can be any valid css height value.\n\n##### Default Value\n\n`''`\n\n***\n\n#### max\n\n> **max**: `number`\n\n\nThe maximum value.\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> **min**: `number`\n\n\nThe minimum value.\n\n##### Default Value\n\n`0`\n\n***\n\n#### striped\n\n> **striped**: `boolean`\n\n\nIf `true`, shows a striped progressbar.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\n\nGlobal template for the Progressbar.\n\n***\n\n#### type\n\n> **type**: `undefined` \\| [`BSContextualClass`](../../../../api/angular/bootstrap/components/progressbar/../../types#bscontextualclass)\n\n\nType of the progressbar, following bootstrap types.\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nThe current value.\n\n##### Default Value\n\n`0`\n","ProgressbarProps",{"source":28,"name":29},"## interface_ProgressbarState\n\nRepresents the state of a Progressbar component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, animates a striped progressbar.\nTakes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nThe aria label.\n\n##### Default Value\n\n`'Progressbar'`\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `undefined` \\| `string`\n\n\nThe aria value text.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\n\nLabel of the progress.\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### finished\n\n> **finished**: `boolean`\n\n\n`true` if the value has reached its maximum value.\n\n***\n\n#### height\n\n> **height**: `string`\n\n\nHeight of the progressbar, can be any valid css height value.\n\n##### Default Value\n\n`''`\n\n***\n\n#### max\n\n> **max**: `number`\n\n\nThe maximum value.\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> **min**: `number`\n\n\nThe minimum value.\n\n##### Default Value\n\n`0`\n\n***\n\n#### percentage\n\n> **percentage**: `number`\n\n\nPercentage of completion.\n\n***\n\n#### started\n\n> **started**: `boolean`\n\n\n`true` if the value is above its minimum value.\n\n***\n\n#### striped\n\n> **striped**: `boolean`\n\n\nIf `true`, shows a striped progressbar.\n\n##### Default Value\n\n`false`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/progressbar/../../types#slotcontent)\\\u003C[`ProgressbarContext`](#progressbarcontext)\\>\n\n\nGlobal template for the Progressbar.\n\n***\n\n#### type\n\n> **type**: `undefined` \\| [`BSContextualClass`](../../../../api/angular/bootstrap/components/progressbar/../../types#bscontextualclass)\n\n\nType of the progressbar, following bootstrap types.\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nThe current value.\n\n##### Default Value\n\n`0`\n","ProgressbarState",{"source":31,"name":32},"## class_ProgressbarStructureDirective\n\nDirective to define the structure of a progress bar.\n\nThis directive provides a template reference for the [ProgressbarContext](#progressbarcontext).\n","ProgressbarStructureDirective",{"source":34,"name":35},"## type alias_ProgressbarWidget\n> **ProgressbarWidget**: [`Widget`](../../../../api/angular/bootstrap/components/progressbar/../../types#widget)\\\u003C[`ProgressbarProps`](#progressbarprops), [`ProgressbarState`](#progressbarstate), `object`, [`ProgressbarDirectives`](#progressbardirectives)\\>\n\n\nRepresents a Progressbar widget.\n\nThis type defines the structure of a Progressbar widget, including its properties, state, and directives.\n","ProgressbarWidget","Progressbar","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
