{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,81,117],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"title":82,"submenu":83},"Bootstrap Components",[84,87,91,94,97,100,103,106,111,114],{"label":7,"status":8,"path":85,"subpath":-1,"slug":86},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":88,"subpath":89,"slug":90},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":92,"subpath":89,"slug":93},"docs/angular/components/alert/","components/alert/",{"label":58,"status":49,"path":95,"subpath":89,"slug":96},"docs/angular/components/modal/","components/modal/",{"label":62,"status":49,"path":98,"subpath":89,"slug":99},"docs/angular/components/pagination/","components/pagination/",{"label":66,"status":49,"path":101,"subpath":89,"slug":102},"docs/angular/components/progressbar/","components/progressbar/",{"label":70,"status":49,"path":104,"subpath":89,"slug":105},"docs/angular/components/rating/","components/rating/",{"label":107,"status":108,"path":109,"subpath":89,"slug":110},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":74,"status":49,"path":112,"subpath":89,"slug":113},"docs/angular/components/slider/","components/slider/",{"label":78,"status":49,"path":115,"subpath":89,"slug":116},"docs/angular/components/toast/","components/toast/",{"title":118,"submenu":119},"Services",[120,123,127,131,135,139],{"label":7,"status":8,"path":121,"subpath":-1,"slug":122},"docs/angular/services/introduction","services/introduction",{"label":124,"status":8,"path":125,"subpath":-1,"slug":126},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":128,"status":8,"path":129,"subpath":-1,"slug":130},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Transition","docs/angular/services/transition","services/transition",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":18,"next":21},"Select","inprogress","v0.1.1","standalone",[6,10,14],{"title":7,"key":8,"path":9},"Examples","examples","/components/select/examples",{"title":11,"key":12,"path":13},"Api","api","/components/select/api",{"title":15,"key":16,"path":17},"Playground","playground","/components/select/playground#",{"title":19,"slug":20,"subpath":8},"Rating","components/rating/",{"title":22,"slug":23,"subpath":8},"Slider","components/slider/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":45,"import":46},"select",[3,6,9,12,15,18,21,24,27,30,33,36,39,42],{"source":4,"name":5},"## function_createSelect\n> **createSelect**\\\u003C`Item`\\>(`config`?): [`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\n### Type Parameters\n\n• **Item**\n\n### Parameters\n\n• **config?**: [`PropsConfig`](../../../../api/angular/bootstrap/components/select/../../types#propsconfig)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>\\>\n\nconfig of the modal, either as a store or as an object containing values or stores.\n\n### Returns\n\n[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\na new select widget instance\n","createSelect",{"source":7,"name":8},"## function_getSelectDefaultConfig\n> **getSelectDefaultConfig**(): [`SelectProps`](#selectprops)\\\u003C`any`\\>\n\n### Returns\n\n[`SelectProps`](#selectprops)\\\u003C`any`\\>\n\nthe default Select config\n","getSelectDefaultConfig",{"source":10,"name":11},"## interface_ItemContext\n### Type Parameters\n\n• **T**\n\n### Properties\n\n#### id\n\n> **id**: `string`\n\nUnique id to identify the item\n\n***\n\n#### item\n\n> **item**: `T`\n\nOriginal item given in the parameters\n\n***\n\n#### selected\n\n> **selected**: `boolean`\n\nSpecify if the item is checked\n","ItemContext",{"source":13,"name":14},"## interface_SelectActions\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### onBadgeKeydown\n\n> **onBadgeKeydown**: (`event`, `item`) => `void`\n\nMethod to be plugged to on an keydown event of a badge container, in order to manage main actions on badges.\n\n##### Parameters\n\n• **event**: [`KeyboardEvent`](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)\n\nkeyboard event\n\n• **item**: `Item`\n\ncorresponding item\n\n##### Returns\n\n`void`\n\n***\n\n#### onInput\n\n> **onInput**: (`e`) => `void`\n\nMethod to be plugged to on the 'input' event. The input text will be used as the filter text.\n\n##### Parameters\n\n• **e**\n\n• **e.target**: `any`\n\n##### Returns\n\n`void`\n\n***\n\n#### onInputKeydown\n\n> **onInputKeydown**: (`event`) => `void`\n\nMethod to be plugged to on an keydown event of the main input, in order to control the keyboard interactions with the highlighted item.\nIt manages arrow keys to move the highlighted item, or enter to toggle the item.\n\n##### Parameters\n\n• **event**: [`KeyboardEvent`](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)\n\n##### Returns\n\n`void`\n\n***\n\n#### onRemoveBadgeClick\n\n> **onRemoveBadgeClick**: (`event`, `item`) => `void`\n\nMethod to be attached to the node element to close a badge on click.\n\n##### Parameters\n\n• **event**: [`MouseEvent`](https://developer.mozilla.org/docs/Web/API/MouseEvent)\n\n• **item**: `Item`\n\n##### Returns\n\n`void`\n","SelectActions",{"source":16,"name":17},"## interface_SelectApi\n### Type Parameters\n\n• **Item**\n\n### Methods\n\n#### clear\n\n> **clear**(): `void`\n\nClear all the selected items\n\n##### Returns\n\n`void`\n\n***\n\n#### clearText\n\n> **clearText**(): `void`\n\nClear the filter text\n\n##### Returns\n\n`void`\n\n***\n\n#### close\n\n> **close**(): `void`\n\nclose the select\n\n##### Returns\n\n`void`\n\n***\n\n#### highlight\n\n> **highlight**(`item`): `void`\n\nHighlight the given item, if there is a corresponding match among the visible list\n\n##### Parameters\n\n• **item**: `Item`\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightFirst\n\n> **highlightFirst**(): `void`\n\nHighlight the first item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightLast\n\n> **highlightLast**(): `void`\n\nHighlight the last item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightNext\n\n> **highlightNext**(): `void`\n\nHighlight the next item among the visible list.\nLoop to the first item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightPrevious\n\n> **highlightPrevious**(): `void`\n\nHighlight the previous item among the visible list\nLoop to the last item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nopen the select\n\n##### Returns\n\n`void`\n\n***\n\n#### select\n\n> **select**(`item`): `void`\n\nSelect the provided item.\nThe selected list is used to\n\n##### Parameters\n\n• **item**: `Item`\n\nthe item to select\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(`isOpen`?): `void`\n\nToggle the dropdown menu\n\n##### Parameters\n\n• **isOpen?**: `boolean`\n\nIf specified, set the menu in the defined state.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggleItem\n\n> **toggleItem**(`item`, `selected`?): `void`\n\nToggle the selection of an item\n\n##### Parameters\n\n• **item**: `Item`\n\nthe item to toggle\n\n• **selected?**: `boolean`\n\nan optional boolean to enforce the selected/unselected state instead of toggling\n\n##### Returns\n\n`void`\n\n***\n\n#### unselect\n\n> **unselect**(`item`): `void`\n\nUnselect the provided item.\n\n##### Parameters\n\n• **item**: `Item`\n\nthe item to unselect\n\n##### Returns\n\n`void`\n","SelectApi",{"source":19,"name":20},"## class_SelectBadgeLabelDirective\n### Type Parameters\n\n• **Item**\n\n### Constructors\n\n#### new SelectBadgeLabelDirective\n\n> **new SelectBadgeLabelDirective**\\\u003C`Item`\\>(): [`SelectBadgeLabelDirective`](#selectbadgelabeldirective)\\\u003C`Item`\\>\n\n##### Returns\n\n[`SelectBadgeLabelDirective`](#selectbadgelabeldirective)\\\u003C`Item`\\>\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**\\\u003C`Item`\\>(`_dir`, `context`): `context is SelectItemContext\u003CItem>`\n\n##### Type Parameters\n\n• **Item**\n\n##### Parameters\n\n• **\\_dir**: [`SelectBadgeLabelDirective`](#selectbadgelabeldirective)\\\u003C`Item`\\>\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is SelectItemContext\u003CItem>`\n","SelectBadgeLabelDirective",{"source":22,"name":23},"## class_SelectComponent\n### Type Parameters\n\n• **Item**\n\n### Implements\n\n- [`AfterContentChecked`](https://angular.dev/api/core/AfterContentChecked)\n\n### Constructors\n\n#### new SelectComponent\n\n> **new SelectComponent**\\\u003C`Item`\\>(): [`SelectComponent`](#selectcomponent)\\\u003C`Item`\\>\n\n##### Returns\n\n[`SelectComponent`](#selectcomponent)\\\u003C`Item`\\>\n\n### Properties\n\n#### _widget\n\n> `readonly` **\\_widget**: [`AngularWidget`](../../../../api/angular/bootstrap/components/select/../../types#angularwidget)\\\u003C[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\\>\n\n***\n\n#### allowedPlacements\n\n> **allowedPlacements**: `undefined` \\| `Placement`[]\n\nList of allowed placements for the dropdown.\nThis refers to the [allowedPlacements from floating UI](https://floating-ui.com/docs/autoPlacement#allowedplacements), given the different [Placement possibilities](https://floating-ui.com/docs/computePosition#placement).\n\n##### Default Value\n\n```ts\n['bottom-start', 'top-start', 'bottom-end', 'top-end']\n```\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `undefined` \\| `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `undefined` \\| `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `undefined` \\| `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `undefined` \\| `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### filterTextChange\n\n> **filterTextChange**: `EventEmitter`\\\u003C`string`\\>\n\nCallback called when the text filter change\n\n##### Param\n\nFiltered text\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemIdFn\n\n> **itemIdFn**: `undefined` \\| (`item`) => `string`\n\nCustom function to get the id of an item\nBy default, the item is returned\n\n##### Default Value\n\n```ts\n(item: any) => '' + item\n```\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### items\n\n> **items**: `undefined` \\| `Item`[]\n\nList of available items for the dropdown\n\n##### Default Value\n\n`[]`\n\n***\n\n#### loading\n\n> **loading**: `undefined` \\| `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `undefined` \\| `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `undefined` \\| `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### navSelector\n\n> **navSelector**: `undefined` \\| (`node`) => `NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\nRetrieves navigable elements within an HTML element containing badges and the input.\n\n##### Param\n\nHTMLElement that contains the badges and the input\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('.au-select-badge,input')\n```\n\n***\n\n#### open\n\n> **open**: `undefined` \\| `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### openChange\n\n> **openChange**: `EventEmitter`\\\u003C`boolean`\\>\n\nCallback called dropdown open state change\n\n##### Param\n\nupdated open state\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### selected\n\n> **selected**: `undefined` \\| `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n***\n\n#### selectedChange\n\n> **selectedChange**: `EventEmitter`\\\u003C`Item`[]\\>\n\nCallback called when the selection change\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### slotSelectBadgeLabelFromContent\n\n> **slotSelectBadgeLabelFromContent**: `undefined` \\| [`SelectBadgeLabelDirective`](#selectbadgelabeldirective)\\\u003C`Item`\\>\n\n***\n\n#### slotSelectItemLabelFromContent\n\n> **slotSelectItemLabelFromContent**: `undefined` \\| [`SelectItemLabelDirective`](#selectitemlabeldirective)\\\u003C`Item`\\>\n\n### Accessors\n\n#### api\n\n> `get` **api**(): `W`\\[`\"api\"`\\]\n\n##### Returns\n\n`W`\\[`\"api\"`\\]\n\n***\n\n#### state\n\n> `get` **state**(): [`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/select/../../types#widgetstate)\\\u003C`W`\\>\\>\n\n##### Returns\n\n[`Signal`](https://angular.dev/api/core/Signal)\\\u003C[`WidgetState`](../../../../api/angular/bootstrap/components/select/../../types#widgetstate)\\\u003C`W`\\>\\>\n\n***\n\n#### widget\n\n> `get` **widget**(): [`ContextWidget`](../../../../api/angular/bootstrap/components/select/../../types#contextwidget)\\\u003C`W`\\>\n\n##### Returns\n\n[`ContextWidget`](../../../../api/angular/bootstrap/components/select/../../types#contextwidget)\\\u003C`W`\\>\n\n### Methods\n\n#### itemCtxTrackBy\n\n> **itemCtxTrackBy**(`_`, `itemContext`): `string`\n\n##### Parameters\n\n• **\\_**: `number`\n\n• **itemContext**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\n##### Returns\n\n`string`\n\n***\n\n#### ngAfterContentChecked\n\n> **ngAfterContentChecked**(): `void`\n\nA callback method that is invoked immediately after the\ndefault change detector has completed checking all of the directive's\ncontent.\n\n##### Returns\n\n`void`\n\n##### Implementation of\n\n`AfterContentChecked.ngAfterContentChecked`\n\n***\n\n#### ngOnChanges\n\n> **ngOnChanges**(`changes`): `void`\n\n##### Parameters\n\n• **changes**: `SimpleChanges`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n\n***\n\n#### ngOnInit\n\n> **ngOnInit**(): `void`\n\n##### Returns\n\n`void`\n\n##### Inherit Doc\n","SelectComponent",{"source":25,"name":26},"## type alias_SelectContext\n> **SelectContext**\\\u003C`Item`\\>: [`WidgetSlotContext`](../../../../api/angular/bootstrap/components/select/../../types#widgetslotcontext)\\\u003C[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\\>\n\nA type for the slot context of the pagination widget\n\n### Type Parameters\n\n• **Item**\n","SelectContext",{"source":28,"name":29},"## interface_SelectDirectives\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### badgeAttributesDirective\n\n> **badgeAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive that applies all the necessary attributes to the container badges\n\n***\n\n#### floatingDirective\n\n> **floatingDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../../../../api/angular/bootstrap/components/select/../../types#ssrhtmlelement)\\>\n\nDirective that enables dynamic positioning of menu element\n\n***\n\n#### hasFocusDirective\n\n> **hasFocusDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nDirective to be used in the input group and the menu containers\n\n***\n\n#### inputContainerDirective\n\n> **inputContainerDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nA directive to be applied to the element that contains the badges and the input\n\n***\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive that applies all the necessary attributes to the dropdown item\n\n***\n\n#### menuAttributesDirective\n\n> **menuAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nA directive that applies all the necessary attributes to the dropdown menu\n\n***\n\n#### referenceDirective\n\n> **referenceDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../../../../api/angular/bootstrap/components/select/../../types#ssrhtmlelement)\\>\n\nA directive to be applied to the input group element serves as the base for menu positioning\n","SelectDirectives",{"source":31,"name":32},"## type alias_SelectItemContext\n> **SelectItemContext**\\\u003C`Item`\\>: [`SelectContext`](#selectcontext)\\\u003C`Item`\\> & `object`\n\n### Type declaration\n\n#### itemContext\n\n> **itemContext**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\nContextual data related to an item\n\n### Type Parameters\n\n• **Item**\n","SelectItemContext",{"source":34,"name":35},"## class_SelectItemLabelDirective\n### Type Parameters\n\n• **Item**\n\n### Constructors\n\n#### new SelectItemLabelDirective\n\n> **new SelectItemLabelDirective**\\\u003C`Item`\\>(): [`SelectItemLabelDirective`](#selectitemlabeldirective)\\\u003C`Item`\\>\n\n##### Returns\n\n[`SelectItemLabelDirective`](#selectitemlabeldirective)\\\u003C`Item`\\>\n\n### Properties\n\n#### templateRef\n\n> **templateRef**: [`TemplateRef`](https://angular.dev/api/core/TemplateRef)\\\u003C`any`\\>\n\n### Methods\n\n#### ngTemplateContextGuard\n\n> `static` **ngTemplateContextGuard**\\\u003C`Item`\\>(`_dir`, `context`): `context is SelectItemContext\u003CItem>`\n\n##### Type Parameters\n\n• **Item**\n\n##### Parameters\n\n• **\\_dir**: [`SelectItemLabelDirective`](#selectitemlabeldirective)\\\u003C`Item`\\>\n\n• **context**: `unknown`\n\n##### Returns\n\n`context is SelectItemContext\u003CItem>`\n","SelectItemLabelDirective",{"source":37,"name":38},"## interface_SelectProps\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### allowedPlacements\n\n> **allowedPlacements**: `Placement`[]\n\nList of allowed placements for the dropdown.\nThis refers to the [allowedPlacements from floating UI](https://floating-ui.com/docs/autoPlacement#allowedplacements), given the different [Placement possibilities](https://floating-ui.com/docs/computePosition#placement).\n\n##### Default Value\n\n```ts\n['bottom-start', 'top-start', 'bottom-end', 'top-end']\n```\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### items\n\n> **items**: `Item`[]\n\nList of available items for the dropdown\n\n##### Default Value\n\n`[]`\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n### Methods\n\n#### itemIdFn\n\n> **itemIdFn**(`item`): `string`\n\nCustom function to get the id of an item\nBy default, the item is returned\n\n##### Parameters\n\n• **item**: `Item`\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(item: any) => '' + item\n```\n\n***\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\nRetrieves navigable elements within an HTML element containing badges and the input.\n\n##### Parameters\n\n• **node**: [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTMLElement that contains the badges and the input\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('.au-select-badge,input')\n```\n\n***\n\n#### onFilterTextChange\n\n> **onFilterTextChange**(`text`): `void`\n\nCallback called when the text filter change\n\n##### Parameters\n\n• **text**: `string`\n\nFiltered text\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onOpenChange\n\n> **onOpenChange**(`isOpen`): `void`\n\nCallback called dropdown open state change\n\n##### Parameters\n\n• **isOpen**: `boolean`\n\nupdated open state\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onSelectedChange\n\n> **onSelectedChange**(`selected`): `void`\n\nCallback called when the selection change\n\n##### Parameters\n\n• **selected**: `Item`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","SelectProps",{"source":40,"name":41},"## interface_SelectState\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### highlighted\n\n> **highlighted**: `undefined` \\| [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\nHighlighted item context.\nIt is designed to define the highlighted item in the dropdown menu\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### placement\n\n> **placement**: `undefined` \\| `Placement`\n\nCurrent placement of the dropdown\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n***\n\n#### selectedContexts\n\n> **selectedContexts**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\nList of selected items to be display\n\n***\n\n#### visibleItems\n\n> **visibleItems**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\nList of item contexts, to be displayed in the menu\n","SelectState",{"source":43,"name":44},"## type alias_SelectWidget\n> **SelectWidget**\\\u003C`Item`\\>: [`Widget`](../../../../api/angular/bootstrap/components/select/../../types#widget)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>, [`SelectState`](#selectstate)\\\u003C`Item`\\>, [`SelectApi`](#selectapi)\\\u003C`Item`\\>, [`SelectActions`](#selectactions)\\\u003C`Item`\\>, [`SelectDirectives`](#selectdirectives)\\\u003C`Item`\\>\\>\n\n### Type Parameters\n\n• **Item**\n","SelectWidget","Select","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
