{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,90,132],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82,86],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Collapse","beta","docs/angular/daisyUI/collapse/","daisyUI/collapse/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"label":87,"status":59,"path":88,"subpath":51,"slug":89},"Tree","docs/angular/daisyUI/tree/","daisyUI/tree/",{"title":91,"submenu":92},"Bootstrap Components",[93,96,100,103,106,109,112,115,118,123,126,129],{"label":7,"status":8,"path":94,"subpath":-1,"slug":95},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":97,"subpath":98,"slug":99},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":101,"subpath":98,"slug":102},"docs/angular/components/alert/","components/alert/",{"label":58,"status":59,"path":104,"subpath":98,"slug":105},"docs/angular/components/collapse/","components/collapse/",{"label":63,"status":49,"path":107,"subpath":98,"slug":108},"docs/angular/components/modal/","components/modal/",{"label":67,"status":49,"path":110,"subpath":98,"slug":111},"docs/angular/components/pagination/","components/pagination/",{"label":71,"status":49,"path":113,"subpath":98,"slug":114},"docs/angular/components/progressbar/","components/progressbar/",{"label":75,"status":49,"path":116,"subpath":98,"slug":117},"docs/angular/components/rating/","components/rating/",{"label":119,"status":120,"path":121,"subpath":98,"slug":122},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":79,"status":49,"path":124,"subpath":98,"slug":125},"docs/angular/components/slider/","components/slider/",{"label":83,"status":49,"path":127,"subpath":98,"slug":128},"docs/angular/components/toast/","components/toast/",{"label":87,"status":59,"path":130,"subpath":98,"slug":131},"docs/angular/components/tree/","components/tree/",{"title":133,"submenu":134},"Services",[135,138,142,146,150,154],{"label":7,"status":8,"path":136,"subpath":-1,"slug":137},"docs/angular/services/introduction","services/introduction",{"label":139,"status":8,"path":140,"subpath":-1,"slug":141},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":143,"status":8,"path":144,"subpath":-1,"slug":145},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":147,"status":8,"path":148,"subpath":-1,"slug":149},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":151,"status":8,"path":152,"subpath":-1,"slug":153},"Transition","docs/angular/services/transition","services/transition",{"label":155,"status":8,"path":156,"subpath":-1,"slug":157},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":14,"next":17},"Select","inprogress","v0.1.1","standalone",[6,10],{"title":7,"key":8,"path":9},"Examples","examples","/components/select/examples",{"title":11,"key":12,"path":13},"Api","api","/components/select/api",{"title":15,"slug":16,"subpath":8},"Rating","components/rating/",{"title":18,"slug":19,"subpath":8},"Slider","components/slider/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":42,"import":43},"select",[3,6,9,12,15,18,21,24,27,30,33,36,39],{"source":4,"name":5},"## function_createSelect\n> **createSelect**\\\u003C`Item`\\>(`config`?): [`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\nCreates a new select widget instance.\n\n### Type Parameters\n\n• **Item**\n\n### Parameters\n\n#### config?\n\n[`PropsConfig`](../../../../api/angular/bootstrap/components/select/../../types#propsconfig)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>\\>\n\nconfig of the modal, either as a store or as an object containing values or stores.\n\n### Returns\n\n[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\na new select widget instance\n","createSelect",{"source":7,"name":8},"## function_getSelectDefaultConfig\n> **getSelectDefaultConfig**(): [`SelectProps`](#selectprops)\\\u003C`any`\\>\n\nRetrieve a shallow copy of the default Select config\n\n### Returns\n\n[`SelectProps`](#selectprops)\\\u003C`any`\\>\n\nthe default Select config\n","getSelectDefaultConfig",{"source":10,"name":11},"## interface_ItemContext\nItem representation built from the items provided in parameters\n\n### Type Parameters\n\n• **T**\n\nThe type of the Select Items\n\n### Properties\n\n#### id\n\n> **id**: `string`\n\nUnique id to identify the item\n\n***\n\n#### item\n\n> **item**: `T`\n\nOriginal item given in the parameters\n\n***\n\n#### selected\n\n> **selected**: `boolean`\n\nSpecify if the item is checked\n","ItemContext",{"source":13,"name":14},"## interface_SelectApi\nInterface representing the API for a Select component.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the Select Items\n\n### Methods\n\n#### clear\n\n> **clear**(): `void`\n\nClear all the selected items\n\n##### Returns\n\n`void`\n\n***\n\n#### clearText\n\n> **clearText**(): `void`\n\nClear the filter text\n\n##### Returns\n\n`void`\n\n***\n\n#### close\n\n> **close**(): `void`\n\nclose the select\n\n##### Returns\n\n`void`\n\n***\n\n#### highlight\n\n> **highlight**(`item`): `void`\n\nHighlight the given item, if there is a corresponding match among the visible list\n\n##### Parameters\n\n###### item\n\n`Item`\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightFirst\n\n> **highlightFirst**(): `void`\n\nHighlight the first item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightLast\n\n> **highlightLast**(): `void`\n\nHighlight the last item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightNext\n\n> **highlightNext**(): `void`\n\nHighlight the next item among the visible list.\nLoop to the first item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightPrevious\n\n> **highlightPrevious**(): `void`\n\nHighlight the previous item among the visible list\nLoop to the last item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nopen the select\n\n##### Returns\n\n`void`\n\n***\n\n#### select\n\n> **select**(`item`): `void`\n\nSelect the provided item.\nThe selected list is used to\n\n##### Parameters\n\n###### item\n\n`Item`\n\nthe item to select\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(`isOpen`?): `void`\n\nToggle the dropdown menu\n\n##### Parameters\n\n###### isOpen?\n\n`boolean`\n\nIf specified, set the menu in the defined state.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggleItem\n\n> **toggleItem**(`item`, `selected`?): `void`\n\nToggle the selection of an item\n\n##### Parameters\n\n###### item\n\n`Item`\n\nthe item to toggle\n\n###### selected?\n\n`boolean`\n\nan optional boolean to enforce the selected/unselected state instead of toggling\n\n##### Returns\n\n`void`\n\n***\n\n#### unselect\n\n> **unselect**(`item`): `void`\n\nUnselect the provided item.\n\n##### Parameters\n\n###### item\n\n`Item`\n\nthe item to unselect\n\n##### Returns\n\n`void`\n","SelectApi",{"source":16,"name":17},"## class_SelectBadgeLabelDirective\nDirective to provide a custom template for the badge label in a select component.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the item in the select component.\n\nThis directive uses a template reference to render the [\\\u003CItem\\>](#selectitemcontext).\n","SelectBadgeLabelDirective",{"source":19,"name":20},"## class_SelectComponent\nA component that represents a customizable select dropdown widget.\n\n### Type Parameters\n\n• **Item**\n\nThe type of items in the select dropdown.\n\n### Properties\n\n#### allowedPlacements\n\n> `readonly` **allowedPlacements**: `InputSignal`\\\u003C`undefined` \\| `Placement`[]\\>\n\nList of allowed placements for the dropdown.\nThis refers to the [allowedPlacements from floating UI](https://floating-ui.com/docs/autoPlacement#allowedplacements), given the different [Placement possibilities](https://floating-ui.com/docs/computePosition#placement).\n\n##### Default Value\n\n```ts\n['bottom-start', 'top-start', 'bottom-end', 'top-end']\n```\n\n***\n\n#### ariaLabel\n\n> `readonly` **ariaLabel**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> `readonly` **badgeClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> `readonly` **badgeLabel**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> `readonly` **disabled**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> `readonly` **filterText**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### filterTextChange\n\n> `readonly` **filterTextChange**: `OutputEmitterRef`\\\u003C`string`\\>\n\nCallback called when the text filter change\n\n##### Param\n\nFiltered text\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### id\n\n> `readonly` **id**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nid used for the input inside the select\n\n***\n\n#### itemIdFn\n\n> `readonly` **itemIdFn**: `InputSignal`\\\u003C`undefined` \\| (`item`) => `string`\\>\n\nCustom function to get the id of an item\nBy default, the item is returned\n\n##### Default Value\n\n```ts\n(item: any) => '' + item\n```\n\n***\n\n#### itemLabel\n\n> `readonly` **itemLabel**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### items\n\n> `readonly` **items**: `InputSignal`\\\u003C`undefined` \\| `Item`[]\\>\n\nList of available items for the dropdown\n\n##### Default Value\n\n`[]`\n\n***\n\n#### loading\n\n> `readonly` **loading**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> `readonly` **menuClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> `readonly` **menuItemClassName**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### navSelector\n\n> `readonly` **navSelector**: `InputSignal`\\\u003C`undefined` \\| (`node`) => `NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\\>\n\nRetrieves navigable elements within an HTML element containing badges and the input.\n\n##### Param\n\nHTMLElement that contains the badges and the input\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('.au-select-badge,input')\n```\n\n***\n\n#### open\n\n> `readonly` **open**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### openChange\n\n> `readonly` **openChange**: `OutputEmitterRef`\\\u003C`boolean`\\>\n\nCallback called dropdown open state change\n\n##### Param\n\nupdated open state\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### selected\n\n> `readonly` **selected**: `InputSignal`\\\u003C`undefined` \\| `Item`[]\\>\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n***\n\n#### selectedChange\n\n> `readonly` **selectedChange**: `OutputEmitterRef`\\\u003C`Item`[]\\>\n\nCallback called when the selection change\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../../../../api/angular/bootstrap/components/select/../../types#angularstate)\\\u003C`W`\\>\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../../../../api/angular/bootstrap/components/select/../../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n","SelectComponent",{"source":22,"name":23},"## interface_SelectContext\nInterface for the slot context of the pagination widget\n\n### Extended by\n\n- [`SelectItemContext`](#selectitemcontext)\n\n### Type Parameters\n\n• **Item**\n\nThe type of the items in the Select component.\n\n### Properties\n\n#### api\n\n> **api**: [`SelectApi`](#selectapi)\\\u003C`Item`\\>\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SelectDirectives`](#selectdirectives)\\\u003C`Item`\\>\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/select/../../types#angularstate)\\\u003C[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\\>\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","SelectContext",{"source":25,"name":26},"## interface_SelectDirectives\nInterface representing the directives used in the Select component.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the Select Items\n\n### Properties\n\n#### badgeAttributesDirective\n\n> **badgeAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive that applies all the necessary attributes to the container badges\n\n***\n\n#### badgeCloseButtonDirective\n\n> **badgeCloseButtonDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive to be applied to a button that closes a badge\n\n***\n\n#### floatingDirective\n\n> **floatingDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../../../../api/angular/bootstrap/components/select/../../types#ssrhtmlelement)\\>\n\nDirective that enables dynamic positioning of menu element\n\n***\n\n#### hasFocusDirective\n\n> **hasFocusDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nDirective to be used in the input group and the menu containers\n\n***\n\n#### inputContainerDirective\n\n> **inputContainerDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nA directive to be applied to the element that contains the badges and the input\n\n***\n\n#### inputDirective\n\n> **inputDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nA directive to be applied to the input\n\n***\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive that applies all the necessary attributes to the dropdown item\n\n***\n\n#### menuAttributesDirective\n\n> **menuAttributesDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\n\nA directive that applies all the necessary attributes to the dropdown menu\n\n***\n\n#### referenceDirective\n\n> **referenceDirective**: [`Directive`](../../../../api/angular/bootstrap/components/select/../../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../../../../api/angular/bootstrap/components/select/../../types#ssrhtmlelement)\\>\n\nA directive to be applied to the input group element serves as the base for menu positioning\n","SelectDirectives",{"source":28,"name":29},"## interface_SelectItemContext\nRepresents the context for a select item, extending the base `SelectContext` with additional\ncontextual data specific to an item.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the item within the select context.\n\n### Properties\n\n#### api\n\n> **api**: [`SelectApi`](#selectapi)\\\u003C`Item`\\>\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SelectDirectives`](#selectdirectives)\\\u003C`Item`\\>\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### itemContext\n\n> **itemContext**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\nContextual data related to an item\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/select/../../types#angularstate)\\\u003C[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\\>\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","SelectItemContext",{"source":31,"name":32},"## class_SelectItemLabelDirective\nDirective to provide a custom label template for select items.\n\nThis directive allows you to define a custom template for the labels of items\nin a select component. The template can be specified using an Angular `TemplateRef`.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the items in the select component.\n\nThis directive uses a template reference to render the [\\\u003CItem\\>](#selectitemcontext).\n","SelectItemLabelDirective",{"source":34,"name":35},"## interface_SelectProps\nRepresents the properties for the Select component.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the items in the select component.\n\n### Properties\n\n#### allowedPlacements\n\n> **allowedPlacements**: `Placement`[]\n\nList of allowed placements for the dropdown.\nThis refers to the [allowedPlacements from floating UI](https://floating-ui.com/docs/autoPlacement#allowedplacements), given the different [Placement possibilities](https://floating-ui.com/docs/computePosition#placement).\n\n##### Default Value\n\n```ts\n['bottom-start', 'top-start', 'bottom-end', 'top-end']\n```\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### items\n\n> **items**: `Item`[]\n\nList of available items for the dropdown\n\n##### Default Value\n\n`[]`\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n### Methods\n\n#### itemIdFn\n\n> **itemIdFn**(`item`): `string`\n\nCustom function to get the id of an item\nBy default, the item is returned\n\n##### Parameters\n\n###### item\n\n`Item`\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(item: any) => '' + item\n```\n\n***\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\nRetrieves navigable elements within an HTML element containing badges and the input.\n\n##### Parameters\n\n###### node\n\n[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTMLElement that contains the badges and the input\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('.au-select-badge,input')\n```\n\n***\n\n#### onFilterTextChange\n\n> **onFilterTextChange**(`text`): `void`\n\nCallback called when the text filter change\n\n##### Parameters\n\n###### text\n\n`string`\n\nFiltered text\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onOpenChange\n\n> **onOpenChange**(`isOpen`): `void`\n\nCallback called dropdown open state change\n\n##### Parameters\n\n###### isOpen\n\n`boolean`\n\nupdated open state\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onSelectedChange\n\n> **onSelectedChange**(`selected`): `void`\n\nCallback called when the selection change\n\n##### Parameters\n\n###### selected\n\n`Item`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","SelectProps",{"source":37,"name":38},"## interface_SelectState\nRepresents the state of a Select component.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the items in the select component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### highlighted\n\n> **highlighted**: `undefined` \\| [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\nHighlighted item context.\nIt is designed to define the highlighted item in the dropdown menu\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/angular/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### placement\n\n> **placement**: `undefined` \\| `Placement`\n\nCurrent placement of the dropdown\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n***\n\n#### selectedContexts\n\n> **selectedContexts**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\nList of selected items to be display\n\n***\n\n#### visibleItems\n\n> **visibleItems**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\nList of item contexts, to be displayed in the menu\n","SelectState",{"source":40,"name":41},"## type alias_SelectWidget\n> **SelectWidget**\\\u003C`Item`\\>: [`Widget`](../../../../api/angular/bootstrap/components/select/../../types#widget)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>, [`SelectState`](#selectstate)\\\u003C`Item`\\>, [`SelectApi`](#selectapi)\\\u003C`Item`\\>, [`SelectDirectives`](#selectdirectives)\\\u003C`Item`\\>\\>\n\nRepresents a Select widget component.\n\n### Type Parameters\n\n• **Item**\n\nThe type of the items that the select widget will handle.\n","SelectWidget","Select","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
