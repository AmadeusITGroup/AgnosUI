{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,94,139],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82,86,90],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Carousel","beta","docs/angular/daisyUI/carousel/","daisyUI/carousel/",{"label":63,"status":59,"path":64,"subpath":51,"slug":65},"Collapse","docs/angular/daisyUI/collapse/","daisyUI/collapse/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":87,"status":49,"path":88,"subpath":51,"slug":89},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"label":91,"status":59,"path":92,"subpath":51,"slug":93},"Tree","docs/angular/daisyUI/tree/","daisyUI/tree/",{"title":95,"submenu":96},"Bootstrap Components",[97,100,104,107,110,113,116,119,122,125,130,133,136],{"label":7,"status":8,"path":98,"subpath":-1,"slug":99},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":101,"subpath":102,"slug":103},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":105,"subpath":102,"slug":106},"docs/angular/components/alert/","components/alert/",{"label":58,"status":59,"path":108,"subpath":102,"slug":109},"docs/angular/components/carousel/","components/carousel/",{"label":63,"status":59,"path":111,"subpath":102,"slug":112},"docs/angular/components/collapse/","components/collapse/",{"label":67,"status":49,"path":114,"subpath":102,"slug":115},"docs/angular/components/modal/","components/modal/",{"label":71,"status":49,"path":117,"subpath":102,"slug":118},"docs/angular/components/pagination/","components/pagination/",{"label":75,"status":49,"path":120,"subpath":102,"slug":121},"docs/angular/components/progressbar/","components/progressbar/",{"label":79,"status":49,"path":123,"subpath":102,"slug":124},"docs/angular/components/rating/","components/rating/",{"label":126,"status":127,"path":128,"subpath":102,"slug":129},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":83,"status":49,"path":131,"subpath":102,"slug":132},"docs/angular/components/slider/","components/slider/",{"label":87,"status":49,"path":134,"subpath":102,"slug":135},"docs/angular/components/toast/","components/toast/",{"label":91,"status":59,"path":137,"subpath":102,"slug":138},"docs/angular/components/tree/","components/tree/",{"title":140,"submenu":141},"Services",[142,145,149,153,157,161,165],{"label":7,"status":8,"path":143,"subpath":-1,"slug":144},"docs/angular/services/introduction","services/introduction",{"label":146,"status":8,"path":147,"subpath":-1,"slug":148},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Match Media","docs/angular/services/match-media","services/match-media",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Navigation Manager","docs/angular/services/navigation-manager","services/navigation-manager",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Transition","docs/angular/services/transition","services/transition"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":18,"next":21},"Slider","stable","v0.1.1","standalone",[6,10,14],{"title":7,"key":8,"path":9},"Examples","examples","/components/slider/examples",{"title":11,"key":12,"path":13},"Api","api","/components/slider/api",{"title":15,"key":16,"path":17},"Styling","style","/components/slider/style",{"title":19,"slug":20,"subpath":8},"Select","components/select/",{"title":22,"slug":23,"subpath":8},"Toast","components/toast/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":69,"import":70},"slider",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66],{"source":4,"name":5},"## constant_createSlider\n> `const` **createSlider**: [`WidgetFactory`](../../../../api/angular/bootstrap/components/slider/../../types#widgetfactory)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n\n\nCreate a Slider with given config props\n\n### Param\n\nan optional slider config\n\n### Returns\n\na SliderWidget\n","createSlider",{"source":7,"name":8},"## constant_getSliderDefaultConfig\n> `const` **getSliderDefaultConfig**: () => [`SliderProps`](#sliderprops)\n\n\nRetrieve a shallow copy of the default Slider config\n\n### Returns\n\n[`SliderProps`](#sliderprops)\n\nthe default Slider config\n","getSliderDefaultConfig",{"source":10,"name":11},"## interface_HandleDisplayOptions\n\nOptions for displaying a handle in a slider component.\n\n### Properties\n\n#### left\n\n> **left**: `null` \\| `number`\n\n\nLeft offset of the handle in %\n\n***\n\n#### top\n\n> **top**: `null` \\| `number`\n\n\nTop offset of the handle in %\n","HandleDisplayOptions",{"source":13,"name":14},"## interface_ProgressDisplayOptions\n\nOptions for displaying progress in a slider component.\n\n### Properties\n\n#### bottom\n\n> **bottom**: `null` \\| `number`\n\n\nBottom offset of the progress in %\n\n***\n\n#### height\n\n> **height**: `number`\n\n\nHeight of the progress in %\n\n***\n\n#### id\n\n> **id**: `number`\n\n\nId of the progress\n\n***\n\n#### left\n\n> **left**: `null` \\| `number`\n\n\nRight offset of the progress in %\n\n***\n\n#### right\n\n> **right**: `null` \\| `number`\n\n\nLeft offset of the progress in %\n\n***\n\n#### top\n\n> **top**: `null` \\| `number`\n\n\nTop offset of the progress in %\n\n***\n\n#### width\n\n> **width**: `number`\n\n\nWidth of the progress in %\n","ProgressDisplayOptions",{"source":16,"name":17},"## class_SliderComponent\n\nSliderComponent is an Angular component that extends the BaseWidgetDirective\nto provide a customizable slider widget. This component allows for various\nconfigurations and customizations through its inputs and outputs.\n\n### Implements\n\n- [`ControlValueAccessor`](https://angular.dev/api/forms/ControlValueAccessor)\n\n### Properties\n\n#### ariaLabel\n\n> `readonly` **ariaLabel**: `InputSignal`\\\u003C`undefined` \\| (`sortedIndex`) => `string`\\>\n\n\nReturn the value for the 'aria-label' attribute for the handle\n\n##### Param\n\nindex of the handle in the sorted list\n\n##### Default Value\n\n```ts\n() => 'Value'\n```\n\n***\n\n#### ariaLabelledBy\n\n> `readonly` **ariaLabelledBy**: `InputSignal`\\\u003C`undefined` \\| (`sortedIndex`) => `string`\\>\n\n\nReturn the value for the 'aria-labelledBy' attribute for the handle\n\n##### Param\n\nindex of the handle in the sorted list\n\n##### Default Value\n\n```ts\n() => ''\n```\n\n***\n\n#### ariaValueText\n\n> `readonly` **ariaValueText**: `InputSignal`\\\u003C`undefined` \\| (`value`, `sortedIndex`) => `string`\\>\n\n\nReturn the value for the 'aria-valuetext' attribute for the handle\n\n##### Param\n\nvalue of the handle\n\n##### Param\n\nindex of the handle in the sorted list\n\n##### Default Value\n\n```ts\n(value: number) => ''\n```\n\n***\n\n#### className\n\n> `readonly` **className**: `InputSignal`\\\u003C`undefined` \\| `string`\\>\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> `readonly` **disabled**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### handle\n\n> `readonly` **handle**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotHandleContext`](#sliderslothandlecontext)\\>\\>\n\n\nSlot to change the handlers\n\n***\n\n#### label\n\n> `readonly` **label**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotLabelContext`](#sliderslotlabelcontext)\\>\\>\n\n\nSlot to change the default labels of the slider\n\n##### Default Value\n\n```ts\n({value}: SliderSlotLabelContext) => '' + value\n```\n\n***\n\n#### max\n\n> `readonly` **max**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> `readonly` **min**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> `readonly` **readonly**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> `readonly` **rtl**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> `readonly` **showMinMaxLabels**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showTicks\n\n> `readonly` **showTicks**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` the ticks are displayed on the slider\n\n##### Default Value\n\n`false`\n\n***\n\n#### showTickValues\n\n> `readonly` **showTickValues**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` the tick values are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showValueLabels\n\n> `readonly` **showValueLabels**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### stepSize\n\n> `readonly` **stepSize**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### structure\n\n> `readonly` **structure**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderContext`](#slidercontext)\\>\\>\n\n\nSlot to change the default display of the slider\n\n***\n\n#### tick\n\n> `readonly` **tick**: `InputSignal`\\\u003C[`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotTickContext`](#sliderslottickcontext)\\>\\>\n\n\nSlot to change the ticks\n\n***\n\n#### tickInterval\n\n> `readonly` **tickInterval**: `InputSignalWithTransform`\\\u003C`undefined` \\| `number`, `unknown`\\>\n\n\nUnit value between the ticks\nIf value is set to `0` the [stepSize](#stepsize) is used to space the ticks\n\n##### Default Value\n\n`0`\n\n***\n\n#### values\n\n> `readonly` **values**: `InputSignal`\\\u003C`undefined` \\| `number`[]\\>\n\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### valuesChange\n\n> `readonly` **valuesChange**: `OutputEmitterRef`\\\u003C`number`[]\\>\n\n\nAn event emitted when slider values are changed\n\nEvent payload equals to the updated slider values\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### vertical\n\n> `readonly` **vertical**: `InputSignalWithTransform`\\\u003C`undefined` \\| `boolean`, `unknown`\\>\n\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n\n### Accessors\n\n#### api\n\n##### Get Signature\n\n> **get** **api**(): `W`\\[`\"api\"`\\]\n\n\nRetrieves the widget api\n\n###### Returns\n\n`W`\\[`\"api\"`\\]\n\nthe widget api\n\n***\n\n#### directives\n\n##### Get Signature\n\n> **get** **directives**(): `W`\\[`\"directives\"`\\]\n\n\nRetrieves the widget directives\n\n###### Returns\n\n`W`\\[`\"directives\"`\\]\n\nthe widget directives\n\n***\n\n#### state\n\n##### Get Signature\n\n> **get** **state**(): [`AngularState`](../../../../api/angular/bootstrap/components/slider/../../types#angularstate)\\\u003C`W`\\>\n\n\nRetrieves the widget state. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n###### Returns\n\n[`AngularState`](../../../../api/angular/bootstrap/components/slider/../../types#angularstate)\\\u003C`W`\\>\n\nthe widget state\n\n### Methods\n\n#### onChange\n\n> **onChange**(`_`): `void`\n\n\nControl value accessor methods\n\n##### Parameters\n\n###### _\n\n`any`\n\n##### Returns\n\n`void`\n\n***\n\n#### registerOnChange\n\n> **registerOnChange**(`fn`): `void`\n\n\n##### Parameters\n\n###### fn\n\n(`value`) => `any`\n\nThe callback function to register\n\n##### Returns\n\n`void`\n\n##### Description\n\nRegisters a callback function that is called when the control's value\nchanges in the UI.\n\nThis method is called by the forms API on initialization to update the form\nmodel when values propagate from the view to the model.\n\nWhen implementing the `registerOnChange` method in your own value accessor,\nsave the given function so your class calls it at the appropriate time.\n\n##### Usage Notes\n\n#### Store the change function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnChange(fn: (_: any) => void): void {\n  this._onChange = fn;\n}\n```\n\nWhen the value changes in the UI, call the registered\nfunction to allow the forms API to update itself:\n\n```ts\nhost: {\n   '(change)': '_onChange($event.target.value)'\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.registerOnChange`\n\n***\n\n#### registerOnTouched\n\n> **registerOnTouched**(`fn`): `void`\n\n\n##### Parameters\n\n###### fn\n\n() => `any`\n\nThe callback function to register\n\n##### Returns\n\n`void`\n\n##### Description\n\nRegisters a callback function that is called by the forms API on initialization\nto update the form model on blur.\n\nWhen implementing `registerOnTouched` in your own value accessor, save the given\nfunction so your class calls it when the control should be considered\nblurred or \"touched\".\n\n##### Usage Notes\n\n#### Store the callback function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnTouched(fn: any): void {\n  this._onTouched = fn;\n}\n```\n\nOn blur (or equivalent), your class should call the registered function to allow\nthe forms API to update itself:\n\n```ts\nhost: {\n   '(blur)': '_onTouched()'\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.registerOnTouched`\n\n***\n\n#### setDisabledState\n\n> **setDisabledState**(`isDisabled`): `void`\n\n\n##### Parameters\n\n###### isDisabled\n\n`boolean`\n\nThe disabled status to set on the element\n\n##### Returns\n\n`void`\n\n##### Description\n\nFunction that is called by the forms API when the control status changes to\nor from 'DISABLED'. Depending on the status, it enables or disables the\nappropriate DOM element.\n\n##### Usage Notes\n\nThe following is an example of writing the disabled property to a native DOM element:\n\n```ts\nsetDisabledState(isDisabled: boolean): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.setDisabledState`\n\n***\n\n#### writeValue\n\n> **writeValue**(`value`): `void`\n\n\n##### Parameters\n\n###### value\n\n`any`\n\n##### Returns\n\n`void`\n\n##### Description\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n##### Usage Notes\n\n#### Write a value to the element\n\nThe following example writes a value to the native DOM element.\n\n```ts\nwriteValue(value: any): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n}\n```\n\n##### Implementation of\n\n`ControlValueAccessor.writeValue`\n","SliderComponent",{"source":19,"name":20},"## interface_SliderContext\n\nRepresents the context for a Slider component.\nThis type is an alias for `WidgetSlotContext\u003CSliderWidget>`.\n\n### Extended by\n\n- [`SliderSlotTickContext`](#sliderslottickcontext)\n- [`SliderSlotHandleContext`](#sliderslothandlecontext)\n- [`SliderSlotLabelContext`](#sliderslotlabelcontext)\n\n### Properties\n\n#### api\n\n> **api**: `object`\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SliderDirectives`](#sliderdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/slider/../../types#angularstate)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","SliderContext",{"source":22,"name":23},"## constant_sliderDefaultSlotHandle\n> `const` **sliderDefaultSlotHandle**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotHandleContext`](#sliderslothandlecontext)\\>\n\n\nA constant representing the default slot handle for the slider component.\n","sliderDefaultSlotHandle",{"source":25,"name":26},"## constant_sliderDefaultSlotStructure\n> `const` **sliderDefaultSlotStructure**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderContext`](#slidercontext)\\>\n\n\nRepresents the default slot structure for the slider component.\n","sliderDefaultSlotStructure",{"source":28,"name":29},"## constant_sliderDefaultSlotTick\n> `const` **sliderDefaultSlotTick**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotTickContext`](#sliderslottickcontext)\\>\n\n\nA constant representing the default slot tick for the slider component.\n","sliderDefaultSlotTick",{"source":31,"name":32},"## interface_SliderDirectives\n\nInterface representing various directives used in the slider component.\n\n### Properties\n\n#### clickableAreaDirective\n\n> **clickableAreaDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\n\n\nDirective to apply to the slider clickable area, to directly move the handle to a given specific position\n\n***\n\n#### combinedHandleLabelDisplayDirective\n\n> **combinedHandleLabelDisplayDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\n\n\nDirective to apply to the handle when combined label display is active\n\n***\n\n#### handleDirective\n\n> **handleDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\\\u003C\\{ `item`: [`SliderHandle`](#sliderhandle); \\}\\>\n\n\nDirective to apply to the slider handle if any\n\n***\n\n#### handleEventsDirective\n\n> **handleEventsDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\\\u003C\\{ `item`: \\{ `id`: `number`; \\}; \\}\\>\n\n\nDirective to apply handle events handlers\n\n***\n\n#### handleLabelDisplayDirective\n\n> **handleLabelDisplayDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\\\u003C\\{ `index`: `number`; \\}\\>\n\n\nDirective to apply to the handle when combined label display is not active\n\n***\n\n#### maxLabelDirective\n\n> **maxLabelDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\n\n\nDirective to get the maxLabel elementRef\n\n***\n\n#### minLabelDirective\n\n> **minLabelDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\n\n\nDirective to get the minLabel elementRef\n\n***\n\n#### progressDisplayDirective\n\n> **progressDisplayDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\\\u003C\\{ `option`: [`ProgressDisplayOptions`](#progressdisplayoptions); \\}\\>\n\n\nDirective used to style the progress display for each handle\n\n***\n\n#### sliderDirective\n\n> **sliderDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\n\n\nDirective to get the slider component elementRef\n\n***\n\n#### tickDirective\n\n> **tickDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\\\u003C\\{ `tick`: [`SliderTick`](#slidertick); \\}\\>\n\n\nDirective to apply to the slider tick\n\n***\n\n#### tickLabelDirective\n\n> **tickLabelDirective**: [`Directive`](../../../../api/angular/bootstrap/components/slider/../../types#directive)\\\u003C\\{ `tick`: [`SliderTick`](#slidertick); \\}\\>\n\n\nDirective to apply to the slider tick label\n","SliderDirectives",{"source":34,"name":35},"## interface_SliderHandle\n\nRepresents a handle in a slider component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\n\nariaLabel of the handle\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `undefined` \\| `string`\n\n\naria-labelledBy of the handle\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `undefined` \\| `string`\n\n\nariaValueText of the handle\n\n***\n\n#### id\n\n> **id**: `number`\n\n\nHandle id\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nValue of the handle\n","SliderHandle",{"source":37,"name":38},"## class_SliderHandleDirective\n\nDirective representing a handle for a slider component.\n\nThis directive uses a template reference to render the [SliderSlotHandleContext](#sliderslothandlecontext).\n","SliderHandleDirective",{"source":40,"name":41},"## class_SliderLabelDirective\n\nDirective to provide a template reference for slider labels.\n\nThis directive uses a template reference to render the [SliderSlotLabelContext](#sliderslotlabelcontext).\n","SliderLabelDirective",{"source":43,"name":44},"## interface_SliderProps\n\nRepresents the properties for the Slider component.\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: (`sortedIndex`) => `string`\n\n\nReturn the value for the 'aria-label' attribute for the handle\n\n##### Parameters\n\n###### sortedIndex\n\n`number`\n\nindex of the handle in the sorted list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n() => 'Value'\n```\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: (`sortedIndex`) => `string`\n\n\nReturn the value for the 'aria-labelledBy' attribute for the handle\n\n##### Parameters\n\n###### sortedIndex\n\n`number`\n\nindex of the handle in the sorted list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n() => ''\n```\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: (`value`, `sortedIndex`) => `string`\n\n\nReturn the value for the 'aria-valuetext' attribute for the handle\n\n##### Parameters\n\n###### value\n\n`number`\n\nvalue of the handle\n\n###### sortedIndex\n\n`number`\n\nindex of the handle in the sorted list\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(value: number) => ''\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### handle\n\n> **handle**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotHandleContext`](#sliderslothandlecontext)\\>\n\n\nSlot to change the handlers\n\n***\n\n#### label\n\n> **label**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotLabelContext`](#sliderslotlabelcontext)\\>\n\n\nSlot to change the default labels of the slider\n\n##### Default Value\n\n```ts\n({value}: SliderSlotLabelContext) => '' + value\n```\n\n***\n\n#### max\n\n> **max**: `number`\n\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### min\n\n> **min**: `number`\n\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### onValuesChange\n\n> **onValuesChange**: (`values`) => `void`\n\n\nAn event emitted when slider values are changed\n\nEvent payload equals to the updated slider values\n\n##### Parameters\n\n###### values\n\n`number`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> **rtl**: `boolean`\n\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> **showMinMaxLabels**: `boolean`\n\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showTicks\n\n> **showTicks**: `boolean`\n\n\nIf `true` the ticks are displayed on the slider\n\n##### Default Value\n\n`false`\n\n***\n\n#### showTickValues\n\n> **showTickValues**: `boolean`\n\n\nIf `true` the tick values are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showValueLabels\n\n> **showValueLabels**: `boolean`\n\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### stepSize\n\n> **stepSize**: `number`\n\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderContext`](#slidercontext)\\>\n\n\nSlot to change the default display of the slider\n\n***\n\n#### tick\n\n> **tick**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotTickContext`](#sliderslottickcontext)\\>\n\n\nSlot to change the ticks\n\n***\n\n#### tickInterval\n\n> **tickInterval**: `number`\n\n\nUnit value between the ticks\nIf value is set to `0` the [stepSize](#stepsize) is used to space the ticks\n\n##### Default Value\n\n`0`\n\n***\n\n#### values\n\n> **values**: `number`[]\n\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### vertical\n\n> **vertical**: `boolean`\n\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n","SliderProps",{"source":46,"name":47},"## interface_SliderSlotHandleContext\n\nRepresents the context for a slider slot handle.\nThis type extends the `SliderContext` and includes an additional `item` property of type `SliderHandle`.\n\n### Properties\n\n#### api\n\n> **api**: `object`\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SliderDirectives`](#sliderdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### item\n\n> **item**: [`SliderHandle`](#sliderhandle)\n\n\nthe handle context\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/slider/../../types#angularstate)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n","SliderSlotHandleContext",{"source":49,"name":50},"## interface_SliderSlotLabelContext\n\nRepresents the context for a slider slot label, extending the base `SliderContext`\nwith an additional `value` property.\n\n### Properties\n\n#### api\n\n> **api**: `object`\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SliderDirectives`](#sliderdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/slider/../../types#angularstate)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nthe value of the handle the label is attached to\n","SliderSlotLabelContext",{"source":52,"name":53},"## interface_SliderSlotTickContext\n\nRepresents the context for a slider tick slot\n\n### Properties\n\n#### api\n\n> **api**: `object`\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`SliderDirectives`](#sliderdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AngularState`](../../../../api/angular/bootstrap/components/slider/../../types#angularstate)\\\u003C[`SliderWidget`](#sliderwidget)\\>\n\n\nThe state of the widget. Each property of the state is exposed through an Angular [Signal](https://angular.dev/api/core/Signal)\n\n***\n\n#### tick\n\n> **tick**: [`SliderTick`](#slidertick)\n\n\ntick context\n","SliderSlotTickContext",{"source":55,"name":56},"## interface_SliderState\n\nRepresents the state of a slider component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### combinedLabelDisplay\n\n> **combinedLabelDisplay**: `boolean`\n\n\nIf true, the label when the handles are close is visible\n\n***\n\n#### combinedLabelPositionLeft\n\n> **combinedLabelPositionLeft**: `number`\n\n\nCombined label left offset in %\n\n***\n\n#### combinedLabelPositionTop\n\n> **combinedLabelPositionTop**: `number`\n\n\nCombined label top offset in %\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true` slider value cannot be changed and the slider cannot be focused\n\n##### Default Value\n\n`false`\n\n***\n\n#### handle\n\n> **handle**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotHandleContext`](#sliderslothandlecontext)\\>\n\n\nSlot to change the handlers\n\n***\n\n#### handleDisplayOptions\n\n> **handleDisplayOptions**: [`HandleDisplayOptions`](#handledisplayoptions)[]\n\n\nArray of objects representing handle display options\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\n\nCheck if the slider is interactive, meaning it is not disabled or readonly\n\n***\n\n#### label\n\n> **label**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotLabelContext`](#sliderslotlabelcontext)\\>\n\n\nSlot to change the default labels of the slider\n\n##### Default Value\n\n```ts\n({value}: SliderSlotLabelContext) => '' + value\n```\n\n***\n\n#### max\n\n> **max**: `number`\n\n\nMaximum value that can be assigned to the slider\n\n##### Default Value\n\n`100`\n\n***\n\n#### maxValueLabelDisplay\n\n> **maxValueLabelDisplay**: `boolean`\n\n\nIf true, the maximum label will be visible\n\n***\n\n#### min\n\n> **min**: `number`\n\n\nMinimum value that can be assigned to the slider\n\n##### Default Value\n\n`0`\n\n***\n\n#### minValueLabelDisplay\n\n> **minValueLabelDisplay**: `boolean`\n\n\nIf true, the minimum label will be visible\n\n***\n\n#### progressDisplayOptions\n\n> **progressDisplayOptions**: [`ProgressDisplayOptions`](#progressdisplayoptions)[]\n\n\nArray of objects representing progress display options\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\n\nIf `true` slider value cannot be changed but the slider is still focusable\n\n##### Default Value\n\n`false`\n\n***\n\n#### rtl\n\n> **rtl**: `boolean`\n\n\nIt `true` slider display is inversed\n\n##### Default Value\n\n`false`\n\n***\n\n#### showMinMaxLabels\n\n> **showMinMaxLabels**: `boolean`\n\n\nIf `true` the min and max labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### showTicks\n\n> **showTicks**: `boolean`\n\n\nIf `true` the ticks are displayed on the slider\n\n##### Default Value\n\n`false`\n\n***\n\n#### showValueLabels\n\n> **showValueLabels**: `boolean`\n\n\nIf `true` the value labels are displayed on the slider\n\n##### Default Value\n\n`true`\n\n***\n\n#### sortedHandles\n\n> **sortedHandles**: [`SliderHandle`](#sliderhandle)[]\n\n\nArray of the sorted handles to display\n\n***\n\n#### sortedValues\n\n> **sortedValues**: `number`[]\n\n\nSorted slider values\n\n***\n\n#### stepSize\n\n> **stepSize**: `number`\n\n\nUnit value between slider steps\n\n##### Default Value\n\n`1`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderContext`](#slidercontext)\\>\n\n\nSlot to change the default display of the slider\n\n***\n\n#### tick\n\n> **tick**: [`SlotContent`](../../../../api/angular/bootstrap/components/slider/../../types#slotcontent)\\\u003C[`SliderSlotTickContext`](#sliderslottickcontext)\\>\n\n\nSlot to change the ticks\n\n***\n\n#### ticks\n\n> **ticks**: [`SliderTick`](#slidertick)[]\n\n\nArray of ticks to display on the slider component\n\n***\n\n#### values\n\n> **values**: `number`[]\n\n\nCurrent slider values\n\n##### Default Value\n\n`[0]`\n\n***\n\n#### vertical\n\n> **vertical**: `boolean`\n\n\nIf `true` is vertically positioned otherwise it is horizontal\n\n##### Default Value\n\n`false`\n","SliderState",{"source":58,"name":59},"## class_SliderStructureDirective\n\nDirective that provides structure for the slider component.\n\nThis directive uses a `TemplateRef` to handle the context of the slider slot.\n","SliderStructureDirective",{"source":61,"name":62},"## interface_SliderTick\n\nRepresents a tick in a slider component.\n\n### Properties\n\n#### className?\n\n> `optional` **className**: `null` \\| `string`\n\n\nCSS classes to be applied on the tick\n\n***\n\n#### displayLabel\n\n> **displayLabel**: `boolean`\n\n\nIf `true` the tick label is displayed\n\n***\n\n#### legend?\n\n> `optional` **legend**: `null` \\| `string`\n\n\nVisualized optional explanation of the label\n\n***\n\n#### position\n\n> **position**: `number`\n\n\nPosition of the tick in percent\n\n***\n\n#### selected\n\n> **selected**: `boolean`\n\n\nIf `true` the tick has selected style\n\n***\n\n#### value\n\n> **value**: `number`\n\n\nValue of the tick\n","SliderTick",{"source":64,"name":65},"## class_SliderTickDirective\n\nDirective representing a tick for a slider component.\n\nThis directive uses a template reference to render the [SliderSlotTickContext](#sliderslottickcontext).\n","SliderTickDirective",{"source":67,"name":68},"## type alias_SliderWidget\n> **SliderWidget** = [`Widget`](../../../../api/angular/bootstrap/components/slider/../../types#widget)\\\u003C[`SliderProps`](#sliderprops), [`SliderState`](#sliderstate), `object`, [`SliderDirectives`](#sliderdirectives)\\>\n\n\nRepresents a slider widget component.\n","SliderWidget","Slider","@agnos-ui/angular-bootstrap"],"uses":{"params":["framework","component"]}}]}
