{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,16,33,61,88],{"title":4,"submenu":5},"Getting started",[6,10,13],{"label":7,"status":8,"path":9,"subpath":8},"Introduction","","docs/angular/getting-started/introduction",{"label":11,"status":8,"path":12,"subpath":8},"Features","docs/angular/getting-started/features",{"label":14,"status":8,"path":15,"subpath":8},"Installation","docs/angular/getting-started/installation",{"title":17,"submenu":18},"Headless",[19,21,24,27,30],{"label":7,"status":8,"path":20,"subpath":8},"docs/angular/headless/introduction",{"label":22,"status":8,"path":23,"subpath":8},"Configuration","docs/angular/headless/configuration",{"label":25,"status":8,"path":26,"subpath":8},"Slots","docs/angular/headless/slots",{"label":28,"status":8,"path":29,"subpath":8},"Directives","docs/angular/headless/directives",{"label":31,"status":8,"path":32,"subpath":8},"Implementation","docs/angular/headless/implementation",{"title":34,"submenu":35},"Headless Components",[36,38,43,46,49,52,55,58],{"label":7,"status":8,"path":37,"subpath":8},"docs/angular/headless-components/introduction",{"label":39,"status":40,"path":41,"subpath":42},"Alert","stable","docs/angular/daisyUI/alert/","headless",{"label":44,"status":40,"path":45,"subpath":42},"Modal","docs/angular/daisyUI/modal/",{"label":47,"status":40,"path":48,"subpath":42},"Pagination","docs/angular/daisyUI/pagination/",{"label":50,"status":40,"path":51,"subpath":42},"Progressbar","docs/angular/daisyUI/progressbar/",{"label":53,"status":40,"path":54,"subpath":42},"Rating","docs/angular/daisyUI/rating/",{"label":56,"status":40,"path":57,"subpath":42},"Slider","docs/angular/daisyUI/slider/",{"label":59,"status":40,"path":60,"subpath":42},"Toast","docs/angular/daisyUI/toast/",{"title":62,"submenu":63},"Bootstrap Components",[64,66,70,72,74,76,78,80,84,86],{"label":7,"status":8,"path":65,"subpath":8},"docs/angular/bootstrap-components/introduction",{"label":67,"status":40,"path":68,"subpath":69},"Accordion","docs/angular/components/accordion/","examples",{"label":39,"status":40,"path":71,"subpath":69},"docs/angular/components/alert/",{"label":44,"status":40,"path":73,"subpath":69},"docs/angular/components/modal/",{"label":47,"status":40,"path":75,"subpath":69},"docs/angular/components/pagination/",{"label":50,"status":40,"path":77,"subpath":69},"docs/angular/components/progressbar/",{"label":53,"status":40,"path":79,"subpath":69},"docs/angular/components/rating/",{"label":81,"status":82,"path":83,"subpath":69},"Select","inprogress","docs/angular/components/select/",{"label":56,"status":40,"path":85,"subpath":69},"docs/angular/components/slider/",{"label":59,"status":40,"path":87,"subpath":69},"docs/angular/components/toast/",{"title":89,"submenu":90},"Services",[91,93,96,99,102,105],{"label":7,"status":8,"path":92,"subpath":8},"docs/angular/services/introduction",{"label":94,"status":8,"path":95,"subpath":8},"Focustrack","docs/angular/services/focustrack",{"label":97,"status":8,"path":98,"subpath":8},"Floating UI","docs/angular/services/floating-ui",{"label":100,"status":8,"path":101,"subpath":8},"Resize Observer","docs/angular/services/resize-observer",{"label":103,"status":8,"path":104,"subpath":8},"Transition","docs/angular/services/transition",{"label":106,"status":8,"path":107,"subpath":8},"Match Media","docs/angular/services/match-media"],"uses":{"params":["framework"]}},{"type":"data","data":[{"slug":1,"prev":2,"next":9,"content":15,"since":8},"services/transition",{"slug":3,"content":4,"title":5,"subpath":6,"status":6,"attributes":7},"services/resize-observer","# Resize Observer\n\n## Service Overview\n\nThis service exports functionality related to observing resized elements within a web application. It exposes a factory function, `createResizeObserver()` that creates an object containing one readable signal with the real time **dimensions** of the observed element and a **directive** which will be applied on the HTML element to observe.\n\n### `createResizeObserver` Factory\n\n`createResizeObserver` is a factory function that creates an object providing:\n\n- `dimensions$` Readable Signal providing the real time **dimensions** of the observed element. The type of the object is _ResizeObserverEntry_. See the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n\n- `directive` - a directive to be applied on the html element to observe. The element to observe can be passed as argument to the directive function in case it cannot be applied directly on the html element.\n\n## Usage\n\nWhenever you want to listen to dimensions changes of an element of the DOM, you can simply:\n\n- use the factory function to create the object containing the **signal** and the **directive**.\n- use the directive to set the element to be observed for resizing\n- use `dimensions$` signal and `subscribe` to it.\n\n### In action\n\n```sample\n{ResizeObserver:resizeObserver/resizeObserver:500}\n```\n\n### Example Usage - using directive as method\n\nUse the directive as method to set the element to listen.\n\n```typescript\nimport {createResizeObserver} from '@agnos-ui/core';\nconst {directive, dimensions$} = createResizeObserver();\nconst resizableElement = document.querySelector('div.main:nth-child(2)');\nconst directiveApplied = directive(resizableElement);\nconst unsubscribe = dimensions$.subscribe((dimensions) => {\n\tconsole.log(`Resizable element width: ${dimensions.contentRect?.width}`);\n});\n// Cleanup\nunsubscribe();\ndirectiveApplied.destroy?.();\n```\n","Resize Observer","",{"since":8},"0.2.0",{"slug":10,"content":11,"title":12,"subpath":6,"status":6,"attributes":13},"services/match-media","# Match Media\n\n## Service Overview\n\n\u003Cp>\nThe match media service is a simple factory that wraps the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\" target=\"_blank\">Window: matchMedia()\u003C/a> method into a Tansu readable store.\n\u003C/p>\n\n```typescript\ntype createMatchMedia = (query: string) => Readable\u003Cboolean>;\n```\n\n## In action\n\n```sample\n{MatchMedia:matchMedia/matchMedia:138}\n```\n","Match Media",{"since":14},"0.3.0","# Transition\n\n## Service Overview\n\nThe Transition service allows to display or hide content smoothly through an animation. At its heart, a transition is a [Directive](../01-Headless/03-Directives.md) managing the visibility of inner content by attaching / detaching classes.\n\n## In action\n\nCreating and attaching a transition is straighforward! Simply create a transition service using the factory `createTransition` and attach the provided directive to a dom element.  \nLet's see this in action by implementing a **Collapse** component:\n\n```sample\n{Collapse example:transition/collapse:129}\n```\n\nAgnosUI provides several transition functions to use (collapse vertical or horizontal, fade in/out) but you may create your own using the `createSimpleClassTransition` utility and a bit of css. Here is another example with a flip animation:\n\n```sample\n{Flip in example:transition/flip:93}\n```\n\n\u003Cp>\n    When creating your own, remember to respect the user preferences and the media query \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">prefers-reduced-motion\u003C/a>.\n\u003C/p>\n\n## Properties and stores\n\nYou can configure a transition using the following properties:\n\n- **transition** `TransitionFn` : the transition function that will be run\n- **visible** `boolean` : whether the element should be visible when the transition is completed\n- **animation** `boolean` : whether the transition should be animated\n- **animationOnInit** `boolean` : if the element is initially visible, whether the element should be animated when first displayed\n- **onShown** `() => void` : function to be called when the transition is completed and the element is visible\n- **onHidden** `() => void` : function to be called when the transition is completed and the element is not visible\n- **onVisibleChange** `(visible: boolean) => void` : function to be called when the visible property changes\n\nThe state of the transition will include the stores:\n\n- **visible** `boolean` : whether the element is visible or will be visible when the transition is completed\n- **elementPresent** `boolean` : whether the element to be animated is present in the DOM\n- **element** `HTMLElement | null` : reference to the DOM element\n- **transitioning** `boolean` : whether a transition is currently running\n- **shown** `boolean` : whether the element is visible and not transitioning\n- **hidden** `boolean` : whether the element is not visible and not transitioning\n\nYou may play around the properties and see the stores updated with the following example:\n\n```sample\n{Transition properties and stores:transition/transition:585:noCode:noResize}\n```\n"],"uses":{"params":["slug","framework"]}}]}
