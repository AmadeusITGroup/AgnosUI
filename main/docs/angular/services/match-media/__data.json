{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,16,33,56,82],{"title":4,"submenu":5},"Getting started",[6,10,13],{"label":7,"status":8,"path":9,"subpath":8},"Introduction","","docs/angular/getting-started/introduction",{"label":11,"status":8,"path":12,"subpath":8},"Features","docs/angular/getting-started/features",{"label":14,"status":8,"path":15,"subpath":8},"Installation","docs/angular/getting-started/installation",{"title":17,"submenu":18},"Headless",[19,21,24,27,30],{"label":7,"status":8,"path":20,"subpath":8},"docs/angular/headless/introduction",{"label":22,"status":8,"path":23,"subpath":8},"Configuration","docs/angular/headless/configuration",{"label":25,"status":8,"path":26,"subpath":8},"Slots","docs/angular/headless/slots",{"label":28,"status":8,"path":29,"subpath":8},"Directives","docs/angular/headless/directives",{"label":31,"status":8,"path":32,"subpath":8},"Implementation","docs/angular/headless/implementation",{"title":34,"submenu":35},"DaisyUI",[36,41,44,47,50,53],{"label":37,"status":38,"path":39,"subpath":40},"Alert","stable","docs/angular/daisyUI/alert/","headless",{"label":42,"status":38,"path":43,"subpath":40},"Pagination","docs/angular/daisyUI/pagination/",{"label":45,"status":38,"path":46,"subpath":40},"Progressbar","docs/angular/daisyUI/progressbar/",{"label":48,"status":38,"path":49,"subpath":40},"Rating","docs/angular/daisyUI/rating/",{"label":51,"status":38,"path":52,"subpath":40},"Slider","docs/angular/daisyUI/slider/",{"label":54,"status":38,"path":55,"subpath":40},"Toast","docs/angular/daisyUI/toast/",{"title":57,"submenu":58},"Components",[59,63,65,68,70,72,74,78,80],{"label":60,"status":38,"path":61,"subpath":62},"Accordion","docs/angular/components/accordion/","examples",{"label":37,"status":38,"path":64,"subpath":62},"docs/angular/components/alert/",{"label":66,"status":38,"path":67,"subpath":62},"Modal","docs/angular/components/modal/",{"label":42,"status":38,"path":69,"subpath":62},"docs/angular/components/pagination/",{"label":45,"status":38,"path":71,"subpath":62},"docs/angular/components/progressbar/",{"label":48,"status":38,"path":73,"subpath":62},"docs/angular/components/rating/",{"label":75,"status":76,"path":77,"subpath":62},"Select","inprogress","docs/angular/components/select/",{"label":51,"status":38,"path":79,"subpath":62},"docs/angular/components/slider/",{"label":54,"status":38,"path":81,"subpath":62},"docs/angular/components/toast/",{"title":83,"submenu":84},"Services",[85,87,90,93,96,99],{"label":7,"status":8,"path":86,"subpath":8},"docs/angular/services/introduction",{"label":88,"status":8,"path":89,"subpath":8},"Focustrack","docs/angular/services/focustrack",{"label":91,"status":8,"path":92,"subpath":8},"Floating UI","docs/angular/services/floating-ui",{"label":94,"status":8,"path":95,"subpath":8},"Resize Observer","docs/angular/services/resize-observer",{"label":97,"status":8,"path":98,"subpath":8},"Transition","docs/angular/services/transition",{"label":100,"status":8,"path":101,"subpath":8},"Match Media","docs/angular/services/match-media"],"uses":{"params":["framework"]}},{"type":"data","data":[{"slug":1,"prev":2,"next":-1,"content":9,"since":10},"services/match-media",{"slug":3,"content":4,"title":5,"subpath":6,"status":6,"attributes":7},"services/transition","# Transition\n\n## Service Overview\n\nThe Transition service allows to display or hide content smoothly through an animation. At its heart, a transition is a [Directive](../01-Headless/03-Directives.md) managing the visibility of inner content by attaching / detaching classes.\n\n## In action\n\nCreating and attaching a transition is straighforward! Simply create a transition service using the factory `createTransition` and attach the provided directive to a dom element.  \nLet's see this in action by implementing a **Collapse** component:\n\n```sample\n{Collapse example:transition/collapse:129}\n```\n\nAgnosUI provides several transition functions to use (collapse vertical or horizontal, fade in/out) but you may create your own using the `createSimpleClassTransition` utility and a bit of css. Here is another example with a flip animation:\n\n```sample\n{Flip in example:transition/flip:93}\n```\n\n\u003Cp>\n    When creating your own, remember to respect the user preferences and the media query \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">prefers-reduced-motion\u003C/a>.\n\u003C/p>\n\n## Properties and stores\n\nYou can configure a transition using the following properties:\n\n- **transition** `TransitionFn` : the transition function that will be run\n- **visible** `boolean` : whether the element should be visible when the transition is completed\n- **animation** `boolean` : whether the transition should be animated\n- **animationOnInit** `boolean` : if the element is initially visible, whether the element should be animated when first displayed\n- **onShown** `() => void` : function to be called when the transition is completed and the element is visible\n- **onHidden** `() => void` : function to be called when the transition is completed and the element is not visible\n- **onVisibleChange** `(visible: boolean) => void` : function to be called when the visible property changes\n\nThe state of the transition will include the stores:\n\n- **visible** `boolean` : whether the element is visible or will be visible when the transition is completed\n- **elementPresent** `boolean` : whether the element to be animated is present in the DOM\n- **element** `HTMLElement | null` : reference to the DOM element\n- **transitioning** `boolean` : whether a transition is currently running\n- **shown** `boolean` : whether the element is visible and not transitioning\n- **hidden** `boolean` : whether the element is not visible and not transitioning\n\nYou may play around the properties and see the stores updated with the following example:\n\n```sample\n{Transition properties and stores:transition/transition:585:noCode:noResize}\n```\n","Transition","",{"since":8},"0.2.0","# Match Media\n\n## Service Overview\n\n\u003Cp>\nThe match media service is a simple factory that wraps the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\" target=\"_blank\">Window: matchMedia()\u003C/a> method into a Tansu readable store.\n\u003C/p>\n\n```typescript\ntype createMatchMedia = (query: string) => Readable\u003Cboolean>;\n```\n\n## In action\n\n```sample\n{MatchMedia:matchMedia/matchMedia:138}\n```\n","0.3.0"],"uses":{"params":["slug","framework"]}}]}
