{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,94,139],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82,86,90],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Carousel","beta","docs/angular/daisyUI/carousel/","daisyUI/carousel/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Collapse","docs/angular/daisyUI/collapse/","daisyUI/collapse/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":87,"status":49,"path":88,"subpath":51,"slug":89},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"label":91,"status":59,"path":92,"subpath":51,"slug":93},"Tree","docs/angular/daisyUI/tree/","daisyUI/tree/",{"title":95,"submenu":96},"Bootstrap Components",[97,100,104,107,110,113,116,119,122,125,130,133,136],{"label":7,"status":8,"path":98,"subpath":-1,"slug":99},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":101,"subpath":102,"slug":103},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":105,"subpath":102,"slug":106},"docs/angular/components/alert/","components/alert/",{"label":58,"status":59,"path":108,"subpath":102,"slug":109},"docs/angular/components/carousel/","components/carousel/",{"label":63,"status":49,"path":111,"subpath":102,"slug":112},"docs/angular/components/collapse/","components/collapse/",{"label":67,"status":49,"path":114,"subpath":102,"slug":115},"docs/angular/components/modal/","components/modal/",{"label":71,"status":49,"path":117,"subpath":102,"slug":118},"docs/angular/components/pagination/","components/pagination/",{"label":75,"status":49,"path":120,"subpath":102,"slug":121},"docs/angular/components/progressbar/","components/progressbar/",{"label":79,"status":49,"path":123,"subpath":102,"slug":124},"docs/angular/components/rating/","components/rating/",{"label":126,"status":127,"path":128,"subpath":102,"slug":129},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":83,"status":49,"path":131,"subpath":102,"slug":132},"docs/angular/components/slider/","components/slider/",{"label":87,"status":49,"path":134,"subpath":102,"slug":135},"docs/angular/components/toast/","components/toast/",{"label":91,"status":59,"path":137,"subpath":102,"slug":138},"docs/angular/components/tree/","components/tree/",{"title":140,"submenu":141},"Services",[142,145,149,153,157,161,165],{"label":7,"status":8,"path":143,"subpath":-1,"slug":144},"docs/angular/services/introduction","services/introduction",{"label":146,"status":8,"path":147,"subpath":-1,"slug":148},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Match Media","docs/angular/services/match-media","services/match-media",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Navigation Manager","docs/angular/services/navigation-manager","services/navigation-manager",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Transition","docs/angular/services/transition","services/transition"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":13,"next":16},"Modal","stable","v0.4.0",[5,9],{"title":6,"key":7,"path":8},"Examples","headless","/daisyUI/modal/headless",{"title":10,"key":11,"path":12},"Api","api","/daisyUI/modal/api",{"title":14,"slug":15,"subpath":7},"Collapse","daisyUI/collapse/",{"title":17,"slug":18,"subpath":7},"Pagination","daisyUI/pagination/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":33,"import":34},"modal",[3,6,9,12,15,18,21,24,27,30],{"source":4,"name":5},"## constant_createModal\n> `const` **createModal**: [`WidgetFactory`](../../../../api/angular/headless/components/modal/../../types#widgetfactory)\\\u003C[`ModalWidget`](#modalwidget)\\>\n\n\nCreates a new modal widget instance.\n\n### Param\n\nconfig of the modal, either as a store or as an object containing values or stores.\n\n### Returns\n\na new modal widget instance\n","createModal",{"source":7,"name":8},"## function_getModalDefaultConfig\n> **getModalDefaultConfig**(): [`ModalProps`](#modalprops)\n\n\nReturns a copy of the default modal config.\n\n### Returns\n\n[`ModalProps`](#modalprops)\n\na copy of the default modal config\n","getModalDefaultConfig",{"source":10,"name":11},"## interface_ModalApi\n\nAPI of the modal widget.\n\n### Properties\n\n#### patch\n\n> **patch**: (`parameters`) => `void`\n\n\nMethod to change some modal properties.\n\nModify the parameter values, and recalculate the stores accordingly\n\n##### Parameters\n\n###### parameters\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`ModalProps`](#modalprops)\\>\n\n##### Returns\n\n`void`\n\n### Methods\n\n#### close\n\n> **close**(`result`?): `void`\n\n\nCloses the modal with the given result.\n\n##### Parameters\n\n###### result?\n\n`any`\n\nresult of the modal, as passed in the [result](#modalbeforecloseevent-result) property of the event passed to the\n[onBeforeClose](#modalprops-onbeforeclose) event handler (and possibly changed by it) and resolved by the promise returned by the [open](#open) method.\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\\u003C`any`\\>\n\n\nOpens the modal and returns a promise that is resolved when the modal is closed.\nThe resolved value is the result passed to the [close](#close) method and possibly changed by the\n[onBeforeClose](#modalprops-onbeforeclose) event handler\n\n##### Returns\n\n[`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\\u003C`any`\\>\n","ModalApi",{"source":13,"name":14},"## interface_ModalBeforeCloseEvent\n\nType of the parameter of [onBeforeClose](#modalprops-onbeforeclose).\n\n### Properties\n\n#### cancel\n\n> **cancel**: `boolean`\n\n\nWhether to cancel the close of the modal.\nIt can be changed from the [onBeforeClose](#modalprops-onbeforeclose) event handler.\n\n***\n\n#### result\n\n> **result**: `any`\n\n\nResult of the modal, which is the value passed to the [close](#modalapi-close) method\nand later resolved by the promise returned by the [open](#modalapi-open) method.\nIf needed, it can be changed from the [onBeforeClose](#modalprops-onbeforeclose) event handler.\n","ModalBeforeCloseEvent",{"source":16,"name":17},"## constant_modalCloseButtonClick\n> `const` **modalCloseButtonClick**: unique `symbol`\n\n\nValue present in the [result](#modalbeforecloseevent-result) property of the [onBeforeClose](#modalprops-onbeforeclose) event\nand returned by the [open](#modalapi-open) method, when the modal is closed by a click on the close button.\n","modalCloseButtonClick",{"source":19,"name":20},"## interface_ModalDirectives\n\nDirectives of the modal widget.\n\n### Properties\n\n#### backdropDirective\n\n> **backdropDirective**: [`Directive`](../../../../api/angular/headless/components/modal/../../types#directive)\n\n\nDirective to put on the backdrop DOM element.\n\n***\n\n#### backdropPortalDirective\n\n> **backdropPortalDirective**: [`Directive`](../../../../api/angular/headless/components/modal/../../types#directive)\n\n\nPortal directive to put on the backdrop DOM element.\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: [`Directive`](../../../../api/angular/headless/components/modal/../../types#directive)\n\n\nDirective that adds all the necessary attributes to the close button\n\n***\n\n#### dialogDirective\n\n> **dialogDirective**: [`Directive`](../../../../api/angular/headless/components/modal/../../types#directive)\n\n\nDirective to apply to the dialog element when using the native [HTMLDialogElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement)\n\n***\n\n#### modalDirective\n\n> **modalDirective**: [`Directive`](../../../../api/angular/headless/components/modal/../../types#directive)\n\n\nDirective to put on the modal DOM element.\n\n***\n\n#### modalPortalDirective\n\n> **modalPortalDirective**: [`Directive`](../../../../api/angular/headless/components/modal/../../types#directive)\n\n\nPortal directive to put on the modal DOM element.\n","ModalDirectives",{"source":22,"name":23},"## constant_modalOutsideClick\n> `const` **modalOutsideClick**: unique `symbol`\n\n\nValue present in the [result](#modalbeforecloseevent-result) property of the [onBeforeClose](#modalprops-onbeforeclose) event\nand returned by the [open](#modalapi-open) method, when the modal is closed by a click inside the viewport but outside the modal.\n","modalOutsideClick",{"source":25,"name":26},"## interface_ModalProps\n\nProperties of the modal widget.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nWhether the modal and its backdrop (if present) should be animated when shown or hidden.\n\n##### Default Value\n\n`true`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nValue of the aria-label attribute to put on the close button.\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### backdrop\n\n> **backdrop**: `boolean`\n\n\nWhether a backdrop should be created behind the modal.\n\n##### Default Value\n\n`true`\n\n***\n\n#### backdropClass\n\n> **backdropClass**: `string`\n\n\nClasses to add on the backdrop DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### backdropTransition\n\n> **backdropTransition**: [`TransitionFn`](../../../../api/angular/headless/components/modal/../../services/transitions/baseTransitions#transitionfn)\n\n\nThe transition to use for the backdrop behind the modal (if present).\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeButton\n\n> **closeButton**: `boolean`\n\n\nWhether to display the close button.\n\n##### Default Value\n\n`true`\n\n***\n\n#### closeOnOutsideClick\n\n> **closeOnOutsideClick**: `boolean`\n\n\nWhether the modal should be closed when clicking on the viewport outside the modal.\n\n##### Default Value\n\n`true`\n\n***\n\n#### container\n\n> **container**: `null` \\| [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\n\nWhich element should contain the modal and backdrop DOM elements.\nIf it is not null, the modal and backdrop DOM elements are moved to the specified container.\nOtherwise, they stay where the widget is located.\n\n##### Default Value\n\n```ts\ntypeof window !== 'undefined' ? document.body : null\n```\n\n***\n\n#### modalTransition\n\n> **modalTransition**: [`TransitionFn`](../../../../api/angular/headless/components/modal/../../services/transitions/baseTransitions#transitionfn)\n\n\nThe transition to use for the modal.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onBeforeClose\n\n> **onBeforeClose**: (`event`) => `void`\n\n\nEvent to be triggered when the modal is about to be closed (i.e. the [close](#modalapi-close) method was called).\n\n##### Parameters\n\n###### event\n\n[`ModalBeforeCloseEvent`](#modalbeforecloseevent)\n\nevent giving access to the argument given to the [close](#modalapi-close) method and allowing\nto cancel the close process.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nEvent to be triggered when the transition is completed and the modal is not visible.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nEvent to be triggered when the transition is completed and the modal is visible.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nEvent to be triggered when the visible property changes.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\nnew value of the visible propery\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nWhether the modal should be visible when the transition is completed.\n\n##### Default Value\n\n`false`\n","ModalProps",{"source":28,"name":29},"## interface_ModalState\n\nState of the modal widget.\n\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nValue of the aria-label attribute to put on the close button.\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### backdropClass\n\n> **backdropClass**: `string`\n\n\nClasses to add on the backdrop DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### backdropHidden\n\n> **backdropHidden**: `boolean`\n\n\nWhether the backdrop is fully hidden. This can be true either because [backdrop](#modalprops-backdrop) is false or\nbecause [visible](#modalprops-visible) is false and there is no current transition.\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeButton\n\n> **closeButton**: `boolean`\n\n\nWhether to display the close button.\n\n##### Default Value\n\n`true`\n\n***\n\n#### container\n\n> **container**: `null` \\| [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\n\nWhich element should contain the modal and backdrop DOM elements.\nIf it is not null, the modal and backdrop DOM elements are moved to the specified container.\nOtherwise, they stay where the widget is located.\n\n##### Default Value\n\n```ts\ntypeof window !== 'undefined' ? document.body : null\n```\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\n\nWhether the modal is fully hidden.\n\n***\n\n#### modalElement\n\n> **modalElement**: `null` \\| [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\n\nDOM element of the modal.\n\n***\n\n#### transitioning\n\n> **transitioning**: `boolean`\n\n\nWhether there is an active transition to either display or hide the modal.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nWhether the modal should be visible when the transition is completed.\n\n##### Default Value\n\n`false`\n","ModalState",{"source":31,"name":32},"## type alias_ModalWidget\n> **ModalWidget** = [`Widget`](../../../../api/angular/headless/components/modal/../../types#widget)\\\u003C[`ModalProps`](#modalprops), [`ModalState`](#modalstate), [`ModalApi`](#modalapi), [`ModalDirectives`](#modaldirectives)\\>\n\n\nModal widget.\n","ModalWidget","Modal","@agnos-ui/angular-headless"],"uses":{"params":["framework","component"]}}]}
