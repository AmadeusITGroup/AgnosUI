{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,94,143],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77,81,85,89],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Carousel","docs/angular/daisyUI/carousel/","daisyUI/carousel/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Collapse","docs/angular/daisyUI/collapse/","daisyUI/collapse/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":82,"status":49,"path":83,"subpath":51,"slug":84},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":86,"status":49,"path":87,"subpath":51,"slug":88},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"label":90,"status":91,"path":92,"subpath":51,"slug":93},"Tree","beta","docs/angular/daisyUI/tree/","daisyUI/tree/",{"title":95,"submenu":96},"Bootstrap Components",[97,100,104,107,110,113,117,120,123,126,129,134,137,140],{"label":7,"status":8,"path":98,"subpath":-1,"slug":99},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":101,"subpath":102,"slug":103},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":105,"subpath":102,"slug":106},"docs/angular/components/alert/","components/alert/",{"label":58,"status":49,"path":108,"subpath":102,"slug":109},"docs/angular/components/carousel/","components/carousel/",{"label":62,"status":49,"path":111,"subpath":102,"slug":112},"docs/angular/components/collapse/","components/collapse/",{"label":114,"status":91,"path":115,"subpath":102,"slug":116},"Drawer","docs/angular/components/drawer/","components/drawer/",{"label":66,"status":49,"path":118,"subpath":102,"slug":119},"docs/angular/components/modal/","components/modal/",{"label":70,"status":49,"path":121,"subpath":102,"slug":122},"docs/angular/components/pagination/","components/pagination/",{"label":74,"status":49,"path":124,"subpath":102,"slug":125},"docs/angular/components/progressbar/","components/progressbar/",{"label":78,"status":49,"path":127,"subpath":102,"slug":128},"docs/angular/components/rating/","components/rating/",{"label":130,"status":131,"path":132,"subpath":102,"slug":133},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":82,"status":49,"path":135,"subpath":102,"slug":136},"docs/angular/components/slider/","components/slider/",{"label":86,"status":49,"path":138,"subpath":102,"slug":139},"docs/angular/components/toast/","components/toast/",{"label":90,"status":91,"path":141,"subpath":102,"slug":142},"docs/angular/components/tree/","components/tree/",{"title":144,"submenu":145},"Services",[146,149,153,157,161,165,169],{"label":7,"status":8,"path":147,"subpath":-1,"slug":148},"docs/angular/services/introduction","services/introduction",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Match Media","docs/angular/services/match-media","services/match-media",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Navigation Manager","docs/angular/services/navigation-manager","services/navigation-manager",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":170,"status":8,"path":171,"subpath":-1,"slug":172},"Transition","docs/angular/services/transition","services/transition"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":13,"next":16},"Accordion","stable","v0.4.0",[5,9],{"title":6,"key":7,"path":8},"Examples","headless","/daisyUI/accordion/headless",{"title":10,"key":11,"path":12},"Api","api","/daisyUI/accordion/api",{"title":14,"slug":15,"subpath":-1},"Headless Components: Introduction","headless-components/introduction",{"title":17,"slug":18,"subpath":7},"Alert","daisyUI/alert/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":45,"import":46},"accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42],{"source":4,"name":5},"## interface_AccordionApi\n\nInterface representing the API for an accordion component.\n\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig?`): [`AccordionItemWidget`](#accordionitemwidget)\n\n\nCreates a new accordionItem.\n\n##### Parameters\n\n###### itemConfig?\n\n[`PropsConfig`](../../../../api/angular/headless/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":7,"name":8},"## interface_AccordionDirectives\n\nInterface representing the directives used in the Accordion component.\n\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":10,"name":11},"## interface_AccordionItemApi\n\nInterface representing the API for an accordion item.\n\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":13,"name":14},"## interface_AccordionItemDirectives\n\nInterface representing the directives used in an accordion item.\n\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../../../../api/angular/headless/components/accordion/../../types#directive)\n\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":16,"name":17},"## interface_AccordionItemProps\n\nProperties for an AccordionItem component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../../../../api/angular/headless/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":19,"name":20},"## interface_AccordionItemState\n\nRepresents the state of an accordion item.\n\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":22,"name":23},"## type alias_AccordionItemWidget\n> **AccordionItemWidget** = [`Widget`](../../../../api/angular/headless/components/accordion/../../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n\n\nRepresents a widget for an accordion item.\n","AccordionItemWidget",{"source":25,"name":26},"## interface_AccordionProps\n\nProperties for the Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../../../../api/angular/headless/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":28,"name":29},"## interface_AccordionState\n\nRepresents the state of an Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":31,"name":32},"## type alias_AccordionWidget\n> **AccordionWidget** = [`Widget`](../../../../api/angular/headless/components/accordion/../../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), [`AccordionDirectives`](#accordiondirectives)\\>\n\n\nRepresents an Accordion widget with specific properties, state, API, and directives.\n","AccordionWidget",{"source":34,"name":35},"## constant_createAccordion\n> `const` **createAccordion**: [`WidgetFactory`](../../../../api/angular/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\n\nCreates a new Accordion widget instance.\n\n### Param\n\nconfig of the accordion, either as a store or as an object containing values or stores.\n\n### Returns\n\na new accordion widget instance\n","createAccordion",{"source":37,"name":38},"## function_createAccordionItem\n> **createAccordionItem**(`config?`): [`AccordionItemWidget`](#accordionitemwidget)\n\n\nCreates a new AccordionItem widget instance.\n\n### Parameters\n\n#### config?\n\n[`PropsConfig`](../../../../api/angular/headless/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\nconfig of the accordion item, either as a store or as an object containing values or stores.\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\na new accordion item widget instance\n","createAccordionItem",{"source":40,"name":41},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`, `accordionItemProps`, `accordionConfig`, `accordionValidator`): [`WidgetFactory`](../../../../api/angular/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n#### itemFactory\n\n[`WidgetFactory`](../../../../api/angular/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\> = `createAccordionItem`\n\nthe item factory\n\n#### accordionItemProps\n\n`string`[] = `coreAccordionItemProps`\n\nthe list of item props\n\n#### accordionConfig\n\n[`AccordionProps`](#accordionprops) = `defaultAccordionConfig`\n\nthe default accordion config\n\n#### accordionValidator\n\n[`ConfigValidator`](../../../../api/angular/headless/components/accordion/../../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\> = `configAccordionValidator`\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../../../../api/angular/headless/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":43,"name":44},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig","Accordion","@agnos-ui/angular-headless"],"uses":{"params":["framework","component"]}}]}
