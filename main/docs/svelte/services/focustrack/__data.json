{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,16,30,61],{"title":4,"submenu":5},"Getting started",[6,10,13],{"label":7,"status":8,"path":9,"subpath":8},"Introduction","","docs/svelte/getting-started/introduction",{"label":11,"status":8,"path":12,"subpath":8},"Features","docs/svelte/getting-started/features",{"label":14,"status":8,"path":15,"subpath":8},"Installation","docs/svelte/getting-started/installation",{"title":17,"submenu":18},"Headless",[19,21,24,27],{"label":7,"status":8,"path":20,"subpath":8},"docs/svelte/headless/introduction",{"label":22,"status":8,"path":23,"subpath":8},"Configuration","docs/svelte/headless/configuration",{"label":25,"status":8,"path":26,"subpath":8},"Slots","docs/svelte/headless/slots",{"label":28,"status":8,"path":29,"subpath":8},"Directives","docs/svelte/headless/directives",{"title":31,"submenu":32},"Components",[33,38,41,44,48,51,54,58],{"label":34,"status":35,"path":36,"subpath":37},"Accordion","stable","docs/svelte/components/accordion/","examples",{"label":39,"status":35,"path":40,"subpath":37},"Alert","docs/svelte/components/alert/",{"label":42,"status":35,"path":43,"subpath":37},"Modal","docs/svelte/components/modal/",{"label":45,"status":46,"path":47,"subpath":37},"Pagination","beta","docs/svelte/components/pagination/",{"label":49,"status":35,"path":50,"subpath":37},"Progressbar","docs/svelte/components/progressbar/",{"label":52,"status":35,"path":53,"subpath":37},"Rating","docs/svelte/components/rating/",{"label":55,"status":56,"path":57,"subpath":37},"Select","inprogress","docs/svelte/components/select/",{"label":59,"status":35,"path":60,"subpath":37},"Slider","docs/svelte/components/slider/",{"title":62,"submenu":63},"Services",[64,66,69],{"label":7,"status":8,"path":65,"subpath":8},"docs/svelte/services/introduction",{"label":67,"status":8,"path":68,"subpath":8},"Focustrack","docs/svelte/services/focustrack",{"label":70,"status":8,"path":71,"subpath":8},"Floating UI","docs/svelte/services/floating-ui"],"uses":{"params":["framework"]}},{"type":"data","data":[{"content":1,"prev":2,"next":7,"slug":12},"# Focus track\n\n## Motivation\n\nIn a web application, there is often a requirement to determine whether an element or any of its descendants currently has focus, typically for accessibility purposes. Developers commonly devise their own methods to track this information. In AgnosUI, we provide a utility in core services that AgnosUI components leverage for this purpose.\nUtilize the globally readable signal `activeElement$` to monitor the current focused item. If your focus is solely on your DOM element and its descendants, you have the option to generate a custom signal using the `HasFocus` factory.\n\n## Service Overview\n\nThis service exports functionality related to managing focus within a web application. It includes a readable signal, `activeElement$`, representing the currently active HTML element, and a factory function, `createHasFocus()`, that creates an object implementing the `HasFocus` interface.\n\nTo install the core part, open your project's terminal and run the following command:\n\n```bash\nnpm i @agnos-ui/core\n```\n\n### `activeElement$` Readable Signal\n\n`activeElement$` is a readable signal that provides information about the currently focused HTML element.\nWhen at least a consumer starts listening its value, it sets the active element to the current `document.activeElement`.\nThe active element is updated each time a `focusin`/ `focusout` event is triggered on the `document.documentElement`.\nThe event listeners are removed when the number of listeners fall to 0.\n\n### `createHasFocus` Factory\n\n`createHasFocus` is a factory function that creates an object conforming to the `HasFocus` interface.\nIt provides:\n\n- `directive` that can be apply to elements to track if the focus is on one of the elements or on one of their descendent.\n- `hasFocus$` signal (that internally uses the `activeElement$` signal) that say if the focus is actually among the elements (or their descendent) targeted by the directive.\n\n## Usage\n\nWhenever you want to check which element of the DOM has the focus, you can simply import the signal `activeElement$` and `subscribe` to it.\n\n### In action\n\n```sample\n{Focustrack:focustrack/focustrack:500}\n```\n\n### Example Usage `activeElement$`\n\n```typescript\nimport {activeElement$} from '@agnos-ui/core';}\n\nconst unsubscribe = activeElement$.subscribe((activeElement) => {\n\tconsole.log(`Tag name: ${activeElement?.tagName.toLowerCase()}, id: ${activeElement?.id}`);\n})\n```\n\n### Example Usage `HasFocus`\n\nIf you are only interested to your element and descendent, then you have to use the `createHasFocus` factory, apply the directive to the element, and then subscribe to the `hasFocus$` signal.\n\n```typescript\nimport {createHasFocus} from '@agnos-ui/core';\n\nconst {directive, hasFocus$} = createHasFocus();\n\n// Apply the directive to specific elements\n// (We provide utilities to apply this in the different framework context too)\nvar elementWhereToTrack = document.getElementById('id');\nconst instance = directive(elementWhereToTrack);\n\n// Subscribe to the hasFocus$ signal\nconst unsubscribe = hasFocus$.subscribe((hasFocus) => {\n\tconsole.log(`Focused: ${hasFocus}`);\n});\n\n// Cleanup\nunsubscribe();\ninstance?.destroy();\n```\n\n## Notes\n\n- The code ensures proper cleanup by removing event listeners when no longer needed.\n",{"slug":3,"mdpath":4,"title":5,"name":5,"subpath":6,"status":6},"services/introduction","../docs/04-Services/00-Introduction.md","Introduction","",{"slug":8,"mdpath":9,"title":10,"name":11,"subpath":6,"status":6},"services/floating-ui","../docs/04-Services/02-Floating-UI.md","Floating UI","Floating-UI","services/focustrack"],"uses":{"params":["slug","framework"]}}]}
