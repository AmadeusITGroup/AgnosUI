{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,94,139],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/svelte/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/svelte/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/svelte/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/svelte/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/svelte/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/svelte/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/svelte/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/svelte/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77,81,85,89],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/svelte/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/svelte/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/svelte/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Carousel","docs/svelte/daisyUI/carousel/","daisyUI/carousel/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Collapse","docs/svelte/daisyUI/collapse/","daisyUI/collapse/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Modal","docs/svelte/daisyUI/modal/","daisyUI/modal/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Pagination","docs/svelte/daisyUI/pagination/","daisyUI/pagination/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Progressbar","docs/svelte/daisyUI/progressbar/","daisyUI/progressbar/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Rating","docs/svelte/daisyUI/rating/","daisyUI/rating/",{"label":82,"status":49,"path":83,"subpath":51,"slug":84},"Slider","docs/svelte/daisyUI/slider/","daisyUI/slider/",{"label":86,"status":49,"path":87,"subpath":51,"slug":88},"Toast","docs/svelte/daisyUI/toast/","daisyUI/toast/",{"label":90,"status":91,"path":92,"subpath":51,"slug":93},"Tree","beta","docs/svelte/daisyUI/tree/","daisyUI/tree/",{"title":95,"submenu":96},"Bootstrap Components",[97,100,104,107,110,113,116,119,122,125,130,133,136],{"label":7,"status":8,"path":98,"subpath":-1,"slug":99},"docs/svelte/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":101,"subpath":102,"slug":103},"docs/svelte/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":105,"subpath":102,"slug":106},"docs/svelte/components/alert/","components/alert/",{"label":58,"status":49,"path":108,"subpath":102,"slug":109},"docs/svelte/components/carousel/","components/carousel/",{"label":62,"status":49,"path":111,"subpath":102,"slug":112},"docs/svelte/components/collapse/","components/collapse/",{"label":66,"status":49,"path":114,"subpath":102,"slug":115},"docs/svelte/components/modal/","components/modal/",{"label":70,"status":49,"path":117,"subpath":102,"slug":118},"docs/svelte/components/pagination/","components/pagination/",{"label":74,"status":49,"path":120,"subpath":102,"slug":121},"docs/svelte/components/progressbar/","components/progressbar/",{"label":78,"status":49,"path":123,"subpath":102,"slug":124},"docs/svelte/components/rating/","components/rating/",{"label":126,"status":127,"path":128,"subpath":102,"slug":129},"Select","inprogress","docs/svelte/components/select/","components/select/",{"label":82,"status":49,"path":131,"subpath":102,"slug":132},"docs/svelte/components/slider/","components/slider/",{"label":86,"status":49,"path":134,"subpath":102,"slug":135},"docs/svelte/components/toast/","components/toast/",{"label":90,"status":91,"path":137,"subpath":102,"slug":138},"docs/svelte/components/tree/","components/tree/",{"title":140,"submenu":141},"Services",[142,145,149,153,157,161,165],{"label":7,"status":8,"path":143,"subpath":-1,"slug":144},"docs/svelte/services/introduction","services/introduction",{"label":146,"status":8,"path":147,"subpath":-1,"slug":148},"Focustrack","docs/svelte/services/focustrack","services/focustrack",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Floating UI","docs/svelte/services/floating-ui","services/floating-ui",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Match Media","docs/svelte/services/match-media","services/match-media",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Navigation Manager","docs/svelte/services/navigation-manager","services/navigation-manager",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Resize Observer","docs/svelte/services/resize-observer","services/resize-observer",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Transition","docs/svelte/services/transition","services/transition"],"uses":{"params":["framework"]}},{"type":"data","data":[{"slug":1,"prev":2,"next":9,"content":15,"since":16},"services/navigation-manager",{"slug":3,"content":4,"title":5,"status":6,"attributes":7},"services/match-media","# Match Media\n\n## Service Overview\n\n\u003Cp>\nThe match media service is a simple factory that wraps the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\" target=\"_blank\">Window: matchMedia()\u003C/a> method into a Tansu readable store.\n\u003C/p>\n\n```typescript\ntype createMatchMedia = (query: string) => Readable\u003Cboolean>;\n```\n\n## In action\n\n```sample\n{MatchMedia:matchMedia/matchMedia:138}\n```\n","Match Media","",{"since":8},"0.3.0",{"slug":10,"content":11,"title":12,"status":6,"attributes":13},"services/resize-observer","# Resize Observer\n\n## Service Overview\n\nThis service exports functionality related to observing resized elements within a web application. It exposes a factory function, `createResizeObserver()` that creates an object containing one readable signal with the real time **dimensions** of the observed element and a **directive** which will be applied on the HTML element to observe.\n\n### `createResizeObserver` Factory\n\n`createResizeObserver` is a factory function that creates an object providing:\n\n- `dimensions$` Readable Signal providing the real time **dimensions** of the observed element. The type of the object is _ResizeObserverEntry_. See the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n\n- `directive` - a directive to be applied on the html element to observe. The element to observe can be passed as argument to the directive function in case it cannot be applied directly on the html element.\n\n## Usage\n\nWhenever you want to listen to dimensions changes of an element of the DOM, you can simply:\n\n- use the factory function to create the object containing the **signal** and the **directive**.\n- use the directive to set the element to be observed for resizing\n- use `dimensions$` signal and `subscribe` to it.\n\n### In action\n\n```sample\n{ResizeObserver:resizeObserver/resizeObserver:500}\n```\n\n### Example Usage - using directive as method\n\nUse the directive as method to set the element to listen.\n\n```typescript\nimport {createResizeObserver} from '@agnos-ui/core';\nconst {directive, dimensions$} = createResizeObserver();\nconst resizableElement = document.querySelector('div.main:nth-child(2)');\nconst directiveApplied = directive(resizableElement);\nconst unsubscribe = dimensions$.subscribe((dimensions) => {\n\tconsole.log(`Resizable element width: ${dimensions.contentRect?.width}`);\n});\n// Cleanup\nunsubscribe();\ndirectiveApplied.destroy?.();\n```\n","Resize Observer",{"since":14},"0.2.0","# Navigation Manager\n\n## Service Overview\n\nThis service simplifies keyboard navigation for a set of DOM elements. It exposes a factory function `createNavManager()` that creates an object containing:\n\n- `elementsInDomOrder$` - a store containing the navigable elements in DOM order\n- `directive` - a directive to use on some DOM elements, both to add the keydown event handler and to specify which elements should be managed (either by directly putting the directive on those elements, or by putting the directive on a parent element and specifying which child elements should be included through a `selector` function via `NavManagerItemConfig`)\n- Utilities to navigate the items:\n  - `refreshElements` - method to manually refresh the `elementsInDomOrder$` to capture the latest state of DOM\n  - `focusIndex` - method to focus the element at the given index within `elementsInDomOrder$`\n  - `focusFirst` - method to focus the first element in the DOM order\n  - `focusLast` - method to focus the last element in the DOM order\n  - `focusPrevious` - method to focus the previous element in the DOM order\n  - `focusNext` - method to focus the next element in the DOM order\n  - `focusFirstLeft` - method to focus the element at the left-end of the list (identical to `focusFirst` in a LTR configuration and to `focusLast` in a RTL configuration)\n  - `focusFirstRight` - method to focus the element at the right-end of the list (identical to `focusLast` in a LTR configuration and to `focusfirst` in a RTL configuration)\n  - `focusLeft` - method to focus the next focusable element to the left of the currently focused element (identical to `focusPrevious` in a LTR configuration and to `focusNext` in a RTL configuration)\n  - `focusRight` - method to focus the next focusable element to the right of the currently focused element (identical to `focusNext` in a LTR configuration and to `focusPrevious` in a RTL configuration)\n\n## Usage\n\nWhenever you want to custom keyboard navigation within a defined set of DOM elements you can simply:\n\n- use the factory function to create the NavManager object\n- use the `NavManagerItemConfig` to configure the NavManger by setting:\n  - `keys` - a map of key handlers. The key in the map should match the key event (for example, `\"ArrowLeft\"` or `\"Ctrl+PageDown\"`). The value in the map is the corresponding key handler. (for example, the `focusNext` or `focusPrevious` function returned by `createNavManager`)\n  - `selector` - a function returning DOM elements to include in the navigation manager. It receives as a parameter the DOM element on which the navigation manager directive is used. If not specified, the default selector function only returns the element on which the navigation manager directive is used\n- use the `NavManager.directive` on the DOM elements that you want to navigate over, or on the parent element that contains the children elements specified by the `selector`\n\n> **For the screen readers like NVDA make sure that the elements that you want to navigate through are _interactive_ (for example, put type=\"button\" on the button element), so that NVDA switches from the _browse_ mode to _focus_ mode. Switch manually to _focus_ mode (by default: Ins + Space) if it doesn't work, as sometimes heuristics doesn't detect the interactive element properly.**\n\n### In action\n\n```sample\n{NavManager:navManager/navManager:255}\n```\n\n### Using selector\n\n```sample\n{NavManager:navManager/navManagerWithSelector:255}\n```\n","0.7.0"],"uses":{"params":["slug","framework"]}}]}
