{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,16,30,64],{"title":4,"submenu":5},"Getting started",[6,10,13],{"label":7,"status":8,"path":9,"subpath":8},"Introduction","","docs/svelte/getting-started/introduction",{"label":11,"status":8,"path":12,"subpath":8},"Features","docs/svelte/getting-started/features",{"label":14,"status":8,"path":15,"subpath":8},"Installation","docs/svelte/getting-started/installation",{"title":17,"submenu":18},"Headless",[19,21,24,27],{"label":7,"status":8,"path":20,"subpath":8},"docs/svelte/headless/introduction",{"label":22,"status":8,"path":23,"subpath":8},"Configuration","docs/svelte/headless/configuration",{"label":25,"status":8,"path":26,"subpath":8},"Slots","docs/svelte/headless/slots",{"label":28,"status":8,"path":29,"subpath":8},"Directives","docs/svelte/headless/directives",{"title":31,"submenu":32},"Components",[33,38,41,44,48,51,54,58,61],{"label":34,"status":35,"path":36,"subpath":37},"Accordion","stable","docs/svelte/components/accordion/","examples",{"label":39,"status":35,"path":40,"subpath":37},"Alert","docs/svelte/components/alert/",{"label":42,"status":35,"path":43,"subpath":37},"Modal","docs/svelte/components/modal/",{"label":45,"status":46,"path":47,"subpath":37},"Pagination","beta","docs/svelte/components/pagination/",{"label":49,"status":35,"path":50,"subpath":37},"Progressbar","docs/svelte/components/progressbar/",{"label":52,"status":35,"path":53,"subpath":37},"Rating","docs/svelte/components/rating/",{"label":55,"status":56,"path":57,"subpath":37},"Select","inprogress","docs/svelte/components/select/",{"label":59,"status":35,"path":60,"subpath":37},"Slider","docs/svelte/components/slider/",{"label":62,"status":46,"path":63,"subpath":37},"Toast","docs/svelte/components/toast/",{"title":65,"submenu":66},"Services",[67,69,72,75],{"label":7,"status":8,"path":68,"subpath":8},"docs/svelte/services/introduction",{"label":70,"status":8,"path":71,"subpath":8},"Focustrack","docs/svelte/services/focustrack",{"label":73,"status":8,"path":74,"subpath":8},"Floating UI","docs/svelte/services/floating-ui",{"label":76,"status":8,"path":77,"subpath":8},"Transition","docs/svelte/services/transition"],"uses":{"params":["framework"]}},{"type":"data","data":[{"content":1,"prev":2,"next":-1,"slug":7},"# Transition\n\n## Service Overview\n\nThe Transition service allows to display or hide content smoothly through an animation. At its heart, a transition is a [Directive](../01-Headless/03-Directives.md) managing the visibility of inner content by attaching / detaching classes.\n\n## In action\n\nCreating and attaching a transition is straighforward! Simply create a transition service using the factory `createTransition` and attach the provided directive to a dom element.  \nLet's see this in action by implementing a **Collapse** component:\n\n```sample\n{Collapse example:transition/collapse:129}\n```\n\nAgnosUI provides several transition functions to use (collapse vertical or horizontal, fade in/out) but you may create your own using the `createSimpleClassTransition` utility and a bit of css. Here is another example with a flip animation:\n\n```sample\n{Flip in example:transition/flip:93}\n```\n\n\u003Cp>\n    When creating your own, remember to respect the user preferences and the media query \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">prefers-reduced-motion\u003C/a>.\n\u003C/p>\n\n## Properties and stores\n\nYou can configure a transition using the following properties:\n\n- **transition** `TransitionFn` : the transition function that will be run\n- **visible** `boolean` : whether the element should be visible when the transition is completed\n- **animation** `boolean` : whether the transition should be animated\n- **animationOnInit** `boolean` : if the element is initially visible, whether the element should be animated when first displayed\n- **onShown** `() => void` : function to be called when the transition is completed and the element is visible\n- **onHidden** `() => void` : function to be called when the transition is completed and the element is not visible\n- **onHidden** `(visible: boolean) => void` : function to be called when the visible property changes\n\nThe state of the transition will include the stores:\n\n- **visible** `boolean` : whether the element is visible or will be visible when the transition is completed\n- **elementPresent** `boolean` : whether the element to be animated is present in the DOM\n- **element** `HTMLElement | null` : reference to the DOM element\n- **transitioning** `boolean` : whether a transition is currently running\n- **shown** `boolean` : whether the element is visible and not transitioning\n- **hidden** `boolean` : whether the element is not visible and not transitioning\n\nYou may play around the properties and see the stores updated with the following example:\n\n```sample\n{Transition properties and stores:transition/transition:585:noCode:noResize}\n```\n",{"slug":3,"content":4,"title":5,"subpath":6,"status":6},"services/floating-ui","# Floating UI\n\n## Service Overview\n\nThe Floating UI service is designed to create a flexible and dynamic floating DOM element that can be positioned relative to a reference element. It provides a set of options for customization, including positioning configuration, auto-updating behavior, and arrow styling.\n\nThe service uses a 3rd party library called [floating UI](https://floating-ui.com/).\n\nBy leveraging the provided directives and state stores, developers can easily integrate floating UI elements into their web applications with flexibility and control.\n\n## `createFloatingUI` factory\n\nUse the `createFloatingUI` function to create an instance of the Floating UI service.\nPass an optional `propsConfig` parameter to customize the initial configuration.\n\n### Configuration Options\n\nThe `propsConfig` parameter allows you to provide initial values for the following options:\n\n- **computePositionOptions** Option for positioning the floating UI relative to the reference element. Refer to [computePosition documentation](https://floating-ui.com/docs/computeposition#options) for defaults and options.\n- **autoUpdateOptions** Option for enabling auto-updating of the floating position. Refer to [autoUpdate documentation](https://floating-ui.com/docs/autoupdate#options) for defaults and options.\n- **arrowOptions** Option to customize the arrow element associated, by giving the element itself and eventually a padding. Refer to [arrow documentation](https://floating-ui.com/docs/arrow#options) for defaults and options.\n\n## Output Directives\n\n1. **Reference Directive** Apply this directive to the reference element from which the floating UI will be positioned.\n\n2. **Floating Directive** Apply this directive to the floating UI element. This directive includes styling updates based on the floating UI position.\n3. **Arrow Directive** Apply this directive to the arrow element, if present. This directive includes styling updates based on the arrow position.\n\n## State Stores\n\nThe Floating UI service exposes several state stores that represent different aspects of the UI position:\n\n- `x$`: X-coordinate of the floating UI.\n- `y$`: Y-coordinate of the floating UI.\n- `strategy$`: Strategy used for positioning.\n- `placement$`: Placement of the floating UI.\n- `middlewareData$`: Additional data provided by middleware.\n\n## Patching States\n\nFloating UI instance includes a `patch` method that allows you to patch the configuration dynamically at runtime.\n\n## Usage\n\n### In Action\n\n```sample\n{FloatingUI:floatingUI/floatingUI:500}\n```\n","Floating UI","","services/transition"],"uses":{"params":["slug","framework"]}}]}
