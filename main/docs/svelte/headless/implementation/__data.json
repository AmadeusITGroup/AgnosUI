{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,94,139],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/svelte/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/svelte/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/svelte/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/svelte/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/svelte/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/svelte/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/svelte/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/svelte/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82,86,90],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/svelte/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/svelte/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/svelte/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Carousel","beta","docs/svelte/daisyUI/carousel/","daisyUI/carousel/",{"label":63,"status":59,"path":64,"subpath":51,"slug":65},"Collapse","docs/svelte/daisyUI/collapse/","daisyUI/collapse/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Modal","docs/svelte/daisyUI/modal/","daisyUI/modal/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Pagination","docs/svelte/daisyUI/pagination/","daisyUI/pagination/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Progressbar","docs/svelte/daisyUI/progressbar/","daisyUI/progressbar/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Rating","docs/svelte/daisyUI/rating/","daisyUI/rating/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Slider","docs/svelte/daisyUI/slider/","daisyUI/slider/",{"label":87,"status":49,"path":88,"subpath":51,"slug":89},"Toast","docs/svelte/daisyUI/toast/","daisyUI/toast/",{"label":91,"status":59,"path":92,"subpath":51,"slug":93},"Tree","docs/svelte/daisyUI/tree/","daisyUI/tree/",{"title":95,"submenu":96},"Bootstrap Components",[97,100,104,107,110,113,116,119,122,125,130,133,136],{"label":7,"status":8,"path":98,"subpath":-1,"slug":99},"docs/svelte/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":101,"subpath":102,"slug":103},"docs/svelte/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":105,"subpath":102,"slug":106},"docs/svelte/components/alert/","components/alert/",{"label":58,"status":59,"path":108,"subpath":102,"slug":109},"docs/svelte/components/carousel/","components/carousel/",{"label":63,"status":59,"path":111,"subpath":102,"slug":112},"docs/svelte/components/collapse/","components/collapse/",{"label":67,"status":49,"path":114,"subpath":102,"slug":115},"docs/svelte/components/modal/","components/modal/",{"label":71,"status":49,"path":117,"subpath":102,"slug":118},"docs/svelte/components/pagination/","components/pagination/",{"label":75,"status":49,"path":120,"subpath":102,"slug":121},"docs/svelte/components/progressbar/","components/progressbar/",{"label":79,"status":49,"path":123,"subpath":102,"slug":124},"docs/svelte/components/rating/","components/rating/",{"label":126,"status":127,"path":128,"subpath":102,"slug":129},"Select","inprogress","docs/svelte/components/select/","components/select/",{"label":83,"status":49,"path":131,"subpath":102,"slug":132},"docs/svelte/components/slider/","components/slider/",{"label":87,"status":49,"path":134,"subpath":102,"slug":135},"docs/svelte/components/toast/","components/toast/",{"label":91,"status":59,"path":137,"subpath":102,"slug":138},"docs/svelte/components/tree/","components/tree/",{"title":140,"submenu":141},"Services",[142,145,149,153,157,161,165],{"label":7,"status":8,"path":143,"subpath":-1,"slug":144},"docs/svelte/services/introduction","services/introduction",{"label":146,"status":8,"path":147,"subpath":-1,"slug":148},"Focustrack","docs/svelte/services/focustrack","services/focustrack",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Floating UI","docs/svelte/services/floating-ui","services/floating-ui",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Match Media","docs/svelte/services/match-media","services/match-media",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Navigation Manager","docs/svelte/services/navigation-manager","services/navigation-manager",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Resize Observer","docs/svelte/services/resize-observer","services/resize-observer",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Transition","docs/svelte/services/transition","services/transition"],"uses":{"params":["framework"]}},{"type":"data","data":[{"slug":1,"prev":2,"next":9,"content":15},"headless/implementation",{"slug":3,"content":4,"title":5,"status":6,"attributes":7},"headless/directives","# Directives\n\n## Overview\n\nDirectives in AgnosUI are inspired by the **actions** in Svelte. These directives are element-level lifecycle functions that are executed when the element is created. They are updated (if an update function is provided) when a parameter changes, and finally, they are executed when the element is destroyed.\nThese directives are typically used to add custom event handlers. For instance, core services like [focus track](../04-Services/01-Focustrack.md) and [floating ui](../04-Services/03-Floating-UI.md) create directives that are utilized by components such as [Select](../components/select/examples).\n\n## Usage\n\nThe usage of this function is dependent on the JavaScript framework (if any) that the application utilizes. For instance, in this guide, we are using simple TypeScript without any specific framework.\n\n### How to create a directive\n\nA directive is a function that takes as input an `HTMLElement` and an optional parameter, for example an object representing a configuration.\nThis function will execute a first time when the directive is applied to an element (usually when the DOM element is created) and either it returns `void`, or 2 optional functions:\n\n- `update` function, called when the context changed and you need either to update the directive configuration or to re-execute partially the original function or modify some internal state of the directive.\n- `destroy` function, used to remove eventual listeners, subscriptions or any reactive objects created by the directive. This function is usually called when the DOM element on which you applied the directive gets removed from the DOM.\n\n```typescript\nconst createSampleDirective: Directive\u003Cstring, HTMLElement> = (element: HTMLElement, text: string) => {\n\tconsole.log('Directive has been executed on node ', element.id);\n\tconst clickListener = (event: Event) => {\n\t\tconsole.log(text, event.target);\n\t};\n\telement.addEventListener('click', clickListener);\n\treturn {\n\t\tupdate: (newText) => (text = newText),\n\t\tdestroy: () => {\n\t\t\telement.removeEventListener('click', clickListener);\n\t\t\tconsole.log('Destroy function executed ', element.id);\n\t\t},\n\t};\n};\n```\n\nThis example shows a very simple directive that creates an event listener on `click` events that happen on the HTML element and then print the parameter `text` in the console, along with the clicked target.\n\nBoth `update` and `destroy` functions are provided by the directive, as following:\n\n- `update`: gives a way to modify the original text to something new, when the context changes (see in the next section).\n- `destroy`: remove the previously created listener, so that you don't bloat the main thread with unused listeners.\n\n### How to use a directive\n\nConsidering this HTML page, in which you have a `div` container `focus-element` that includes 2 `button`, an input text `clickText` and another `button` that removes the container.\n\n```html\n\u003Cdiv id=\"content\">\n\t\u003Cdiv id=\"focus-element\">\n\t\t\u003Cbutton>button 1\u003C/button>\n\t\t\u003Cbutton>button 2\u003C/button>\n\t\u003C/div>\n\t\u003Chr />\n\t\u003Cinput id=\"clickText\" type=\"text\" />\n\t\u003Chr />\n\t\u003Cbutton onclick=\"document.getElementById('focus-element').remove()\">remove dom element\u003C/button>\n\u003C/div>\n```\n\nTo use the directive in vanilla TS you need the following steps:\n\n1.  Create the directive on a DOM element. In this case, our elementwill be the `focus-element` container.\n\n    ```typescript\n    const trackElement = document.getElementById('focus-element');\n    const focusElementDirective = createSampleDirective(trackElement, 'focus-element click');\n    ```\n\n    When the browser loads, you will get the following log, since the directive executes a first time and it creates its event listener.\n\n    ```\n    Directive has been executed on node focus-element\n    ```\n\n    If you click on `button 1`, the listener triggers `clickListener` function and you get a log into the console:\n\n    ```\n    focus element clicked \u003Cbutton>​button 1​\u003C/button>​\n    ```\n\n    Same if you click on `button 2`, since it also belongs to the element `focus-element` on which we applied the directive.\n\n    ```\n    focus element clicked \u003Cbutton>​button 2\u003C/button>​\n    ```\n\nChanging the input does not change anything, because the `update` function has no bindings and it is never called. To solve it, we need the next step.\n\n2.  Observe context changes and call the `update` function accordingly. For example, we want to change the text to the value of the `clickText` input when it changes.\n\n    ```typescript\n    const input = document.getElementById('clickText');\n    input.addEventListener('change', (event) => {\n    \tfocusElementDirective?.update(event.target.value);\n    });\n    ```\n\n    Now we bound the directive `update` function to a change event on the input `clickText`.\n    Type `Update has been called!` in the input and then click again on `button 1`, you get:\n\n    ```\n    Update has been called! \u003Cbutton>​button 1\u003C/button>​\n    ```\n\n    The directive has been correctly updated according to the context change.\n    The last life-cycle event to implement will be the destroy.\n\n3.  Clean up when the `focus-element` gets remove from the DOM. This can be done for example using a `MutationObserver` on the parent DOM element.\n\n    ```typescript\n    const cleanup = (mutations: MutationRecord[]) => {\n    \tmutations.forEach((mutation) => {\n    \t\tfor (let entry of mutation.removedNodes.entries()) {\n    \t\t\tif (entry.includes(trackElement)) {\n    \t\t\t\tfocusElementDirective?.destroy();\n    \t\t\t}\n    \t\t}\n    \t});\n    };\n    const observer = new MutationObserver(cleanup);\n    observer.observe(document.getElementById('content'), {childList: true});\n    ```\n\n    Click on `remove dom element`, that remove completely the `focus-element` container from the DOM. Last log will be printed:\n\n    ```\n    Destroy function executed  focus-element\n    ```\n\n### Browser-only vs SSR-compatible\n\nDirectives are traditionnally run only on the browser. However, you may want to create a directive that updates attributes / class / style of an element. In those cases, being compatible with the framework server-side rendering capabilities is important to avoid any flickering.\n\nIn that context, AgnosUI provides the following utilities:\n\n- `browserDirective` wraps a browser-only directive to make sure it is not run on the server.\n- `createAttributesDirective` is a simple directive factory that allows users to update attributes / class / style and bind events. The resulting directive can be run on the server.\n\n### Frameworks usage\n\nAs seen in the previous section, a `Directive` is framework agnostic. But the way frameworks expose the DOM element and binds life-cycle events can be very different. Frameworks controls life-cycle events of the DOM elements, in particular initialization, updates and destroy.\n\nThe headless libraries of AgnosUI contain adapters to bind directives in the correct way, so that the corresponding events are called at the right moment benefiting from framework features.\n\n\u003C!-- \u003Cframework-specific src=\"Directives.md\"> -->\n\n[Directives in Angular](../../angular/docs/Directives.md),\n[Directives in React](../../react/docs/Directives.md),\n[Directives in Svelte](../../svelte/docs/Directives.md)\n\n\u003C!-- \u003C/framework-specific> -->\n\n## Advanced\n\n### Merge directives\n\nAgnos has a utility `mergeDirectives` to merge directives into one, with a limitation on the argument:\nall directives receive the same argument upon initialization and update.\nDirectives are created and updated in the same order as they appear in the arguments list,\nthey are destroyed in the reverse order.\nAll calls to the directives (to create, update and destroy them) are wrapped in a call to the batch function of tansu\n\nNote that it is not mandatory to use `mergeDirectives` to use multiple directives on the same element as frameworks support using multiple directives on the same element.\n","Directives","",{"since":8},"0.1.1",{"slug":10,"content":11,"title":12,"status":6,"attributes":13},"headless-components/introduction","# Introduction to Headless Components\n\nThe headless components are a series of examples demonstrating the usage of our headless library by implementing the logic for [DaisyUI](https://daisyui.com/) components. We illustrate how to create your own components using the DaisyUI appearance while incorporating behavior logic and adhering to accessibility principles.\n","Headless Components: Introduction",{"since":14},"0.3.0","# Introduction to Components creation\n\nWe have two types of usage of headless components in this documentation. One type is the Headless components examples (done using DaisyUI), and the other is the Bootstrap components. The Bootstrap components are ready-to-use components available in a specific library. The Headless components examples are just components to copy and paste into your code and adapt to your needs.\n"],"uses":{"params":["slug","framework"]}}]}
