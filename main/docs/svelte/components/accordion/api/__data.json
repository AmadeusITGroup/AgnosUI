{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,90,132],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/svelte/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/svelte/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/svelte/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/svelte/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/svelte/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/svelte/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/svelte/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/svelte/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82,86],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/svelte/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/svelte/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/svelte/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Collapse","beta","docs/svelte/daisyUI/collapse/","daisyUI/collapse/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Modal","docs/svelte/daisyUI/modal/","daisyUI/modal/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Pagination","docs/svelte/daisyUI/pagination/","daisyUI/pagination/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Progressbar","docs/svelte/daisyUI/progressbar/","daisyUI/progressbar/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Rating","docs/svelte/daisyUI/rating/","daisyUI/rating/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Slider","docs/svelte/daisyUI/slider/","daisyUI/slider/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Toast","docs/svelte/daisyUI/toast/","daisyUI/toast/",{"label":87,"status":59,"path":88,"subpath":51,"slug":89},"Tree","docs/svelte/daisyUI/tree/","daisyUI/tree/",{"title":91,"submenu":92},"Bootstrap Components",[93,96,100,103,106,109,112,115,118,123,126,129],{"label":7,"status":8,"path":94,"subpath":-1,"slug":95},"docs/svelte/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":97,"subpath":98,"slug":99},"docs/svelte/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":101,"subpath":98,"slug":102},"docs/svelte/components/alert/","components/alert/",{"label":58,"status":59,"path":104,"subpath":98,"slug":105},"docs/svelte/components/collapse/","components/collapse/",{"label":63,"status":49,"path":107,"subpath":98,"slug":108},"docs/svelte/components/modal/","components/modal/",{"label":67,"status":49,"path":110,"subpath":98,"slug":111},"docs/svelte/components/pagination/","components/pagination/",{"label":71,"status":49,"path":113,"subpath":98,"slug":114},"docs/svelte/components/progressbar/","components/progressbar/",{"label":75,"status":49,"path":116,"subpath":98,"slug":117},"docs/svelte/components/rating/","components/rating/",{"label":119,"status":120,"path":121,"subpath":98,"slug":122},"Select","inprogress","docs/svelte/components/select/","components/select/",{"label":79,"status":49,"path":124,"subpath":98,"slug":125},"docs/svelte/components/slider/","components/slider/",{"label":83,"status":49,"path":127,"subpath":98,"slug":128},"docs/svelte/components/toast/","components/toast/",{"label":87,"status":59,"path":130,"subpath":98,"slug":131},"docs/svelte/components/tree/","components/tree/",{"title":133,"submenu":134},"Services",[135,138,142,146,150,154,158],{"label":7,"status":8,"path":136,"subpath":-1,"slug":137},"docs/svelte/services/introduction","services/introduction",{"label":139,"status":8,"path":140,"subpath":-1,"slug":141},"Focustrack","docs/svelte/services/focustrack","services/focustrack",{"label":143,"status":8,"path":144,"subpath":-1,"slug":145},"Floating UI","docs/svelte/services/floating-ui","services/floating-ui",{"label":147,"status":8,"path":148,"subpath":-1,"slug":149},"Match Media","docs/svelte/services/match-media","services/match-media",{"label":151,"status":8,"path":152,"subpath":-1,"slug":153},"Navigation Manager","docs/svelte/services/navigation-manager","services/navigation-manager",{"label":155,"status":8,"path":156,"subpath":-1,"slug":157},"Resize Observer","docs/svelte/services/resize-observer","services/resize-observer",{"label":159,"status":8,"path":160,"subpath":-1,"slug":161},"Transition","docs/svelte/services/transition","services/transition"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"type":4,"tabs":5,"prev":14,"next":17},"Accordion","stable","v0.1.1","bootstrap",[6,10],{"title":7,"key":8,"path":9},"Examples","examples","/components/accordion/examples",{"title":11,"key":12,"path":13},"Api","api","/components/accordion/api",{"title":15,"slug":16,"subpath":-1},"Bootstrap Components: Introduction","bootstrap-components/introduction",{"title":18,"slug":19,"subpath":8},"Alert","components/alert/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":54,"import":55},"accordion",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51],{"source":4,"name":5},"## interface_AccordionApi\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:417\n\nInterface representing the API for an accordion component.\n\n### Methods\n\n#### collapse\n\n> **collapse**(`itemId`): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:431\n\nGiven the itemId, will collapse the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n***\n\n#### collapseAll\n\n> **collapseAll**(): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:450\n\nIt will collapse all the accordion-items in the accordion.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(`itemId`): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:424\n\nGiven the itemId, will expand the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n***\n\n#### expandAll\n\n> **expandAll**(): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:445\n\nIt will expand all the items in the accordion.\n\nIf `closeOthers` is `true` it will expand only the last accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### registerItem\n\n> **registerItem**(`itemConfig`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:455\n\nCreates a new accordionItem.\n\n##### Parameters\n\n###### itemConfig?\n\n[`PropsConfig`](../../../../api/svelte/bootstrap/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n##### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\n***\n\n#### toggle\n\n> **toggle**(`itemId`): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:438\n\nGiven the itemId, will toggle the corresponding accordion-item.\n\nIf the itemId is not valid, nothing will happen.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n","AccordionApi",{"source":7,"name":8},"## interface_AccordionDirectives\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:461\n\nInterface representing the directives used in the Accordion component.\n\n### Properties\n\n#### accordionDirective\n\n> **accordionDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:466\n\nDirective to put on the accordion DOM element\n","AccordionDirectives",{"source":10,"name":11},"## interface_AccordionItemApi\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:472\n\nInterface representing the API for an accordion item.\n\n### Methods\n\n#### collapse\n\n> **collapse**(): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:477\n\nIt will collapse the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### expand\n\n> **expand**(): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:483\n\nIt will expand the accordion-item.\n\n##### Returns\n\n`void`\n\n***\n\n#### initDone\n\n> **initDone**(): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:493\n\nMethod to be called after the initialization to allow animations.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(): `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:488\n\nIt will toggle the accordion-item.\n\n##### Returns\n\n`void`\n","AccordionItemApi",{"source":13,"name":14},"## interface_AccordionItemContext\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:19\n\nRepresents the context for an accordion item within the accordion component.\n\n### Properties\n\n#### api\n\n> **api**: [`AccordionItemApi`](#accordionitemapi)\n\nDefined in: [core/src/types.ts:75](https://github.com/AmadeusITGroup/AgnosUI/blob/ad84dee0db69751bb15f98666ddd98ea065c3f05/core/src/types.ts#L75)\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`AccordionItemDirectives`](#accordionitemdirectives)\n\nDefined in: [core/src/types.ts:71](https://github.com/AmadeusITGroup/AgnosUI/blob/ad84dee0db69751bb15f98666ddd98ea065c3f05/core/src/types.ts#L71)\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`AccordionItemState`](#accordionitemstate)\n\nDefined in: [core/src/types.ts:88](https://github.com/AmadeusITGroup/AgnosUI/blob/ad84dee0db69751bb15f98666ddd98ea065c3f05/core/src/types.ts#L88)\n\nthe state of the widget\n","AccordionItemContext",{"source":16,"name":17},"## interface_AccordionItemDirectives\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:499\n\nInterface representing the directives used in an accordion item.\n\n### Properties\n\n#### bodyContainerAttrsDirective\n\n> **bodyContainerAttrsDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:532\n\nDirective to apply aria attributes to the expanded body panel\n\n***\n\n#### bodyContainerDirective\n\n> **bodyContainerDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:537\n\nDirective to be put on the accordion-item body container. It will handle the animation.\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:522\n\nDirective to put on the accordion-item body.\n\n***\n\n#### buttonDirective\n\n> **buttonDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:510\n\nDirective to put on the button element that will control the collapsing of the accordion-item.\n\n***\n\n#### headerDirective\n\n> **headerDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:516\n\nDirective to put on the accordion-item header that will contain the button element.\n\n***\n\n#### itemDirective\n\n> **itemDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:542\n\nDirective to be put on the accordion-item. It will handle adding the accordion-item to the accordion.\n\n***\n\n#### toggleDirective\n\n> **toggleDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:504\n\nDirective to use in special cases, if the accordion header does not use a button element to control the collapsing.\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../../../../api/svelte/bootstrap/components/accordion/../../types#directive)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:527\n\nDirective to apply the itemTransition\n","AccordionItemDirectives",{"source":19,"name":20},"## interface_AccordionItemProps\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:265\n\nRepresents the properties for an Accordion item component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:270\n\nIf `true`, accordion-item will be animated.\n\n***\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:334\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:329\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:323\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:363\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:346\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### destroyOnHide\n\n> **destroyOnHide**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:280\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:308\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:370\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:318\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:339\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:313\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:290\n\nAn event fired when an item is hidden.\n\n##### Returns\n\n`void`\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:285\n\nAn event fired when an item is shown.\n\n##### Returns\n\n`void`\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:297\n\nAn event fired when the `visible` value changes.\n\nEvent payload is the new value of visible.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:356\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../../../../api/svelte/bootstrap/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:275\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:302\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemProps",{"source":22,"name":23},"## interface_AccordionItemState\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:180\n\nRepresents the state of an accordion item, extending the core item state and additional properties specific to the accordion item.\n\n### Properties\n\n#### bodyClassName\n\n> **bodyClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:223\n\nCSS classes to add on the accordion-item body DOM element.\n\n***\n\n#### bodyContainerClassName\n\n> **bodyContainerClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:218\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n***\n\n#### buttonClassName\n\n> **buttonClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:212\n\nCSS classes to add on the accordion-item collapse DOM element.\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:252\n\nContent present in the accordion body.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### className\n\n> **className**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:235\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:197\n\nIf `true`, the accordion-item will be disabled.\nIt will not react to user's clicks, but still will be possible to toggle programmatically.\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:259\n\nContent present in the accordion button inside the accordion header.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### headerClassName\n\n> **headerClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:207\n\nCSS classes to add on the accordion-item header DOM element.\n\n***\n\n#### headingTag\n\n> **headingTag**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:228\n\nThe html tag to use for the accordion-item-header.\n\n***\n\n#### id\n\n> **id**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:202\n\nThe id of the accordion-item. It can be used for controlling the accordion-item via the accordion api.\n\n***\n\n#### shouldBeInDOM\n\n> **shouldBeInDOM**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:186\n\nIf `true` the content of the accordion-item collapse should be in DOM. Its value depends on the\nvalue of the `visible` and `destroyOnHide`.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:245\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:191\n\nIf `true`, the accordion-item will be visible (expanded). Otherwise, it will be hidden (collapsed).\n","AccordionItemState",{"source":25,"name":26},"## type alias_AccordionItemWidget\n> **AccordionItemWidget**: [`Widget`](../../../../api/svelte/bootstrap/components/accordion/../../types#widget)\\\u003C[`AccordionItemProps`](#accordionitemprops), [`AccordionItemState`](#accordionitemstate), [`AccordionItemApi`](#accordionitemapi), [`AccordionItemDirectives`](#accordionitemdirectives)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:378\n\nRepresents a widget for an accordion item.\n","AccordionItemWidget",{"source":28,"name":29},"## interface_AccordionProps\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:52\n\nRepresents the state of an AccordionItem component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:157\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### closeOthers\n\n> **closeOthers**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:69\n\nIf `true`, only one accordion-item at the time can stay open.\n\n##### Default Value\n\n`false`\n\n***\n\n#### itemAnimated\n\n> **itemAnimated**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:107\n\nIf `true`, accordion-item will be animated.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemBodyClassName\n\n> **itemBodyClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:143\n\nCSS classes to add on the accordion-item body DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemBodyContainerClassName\n\n> **itemBodyContainerClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:136\n\nCSS classes to add on the accordion-item body container DOM element.\nThe accordion-item body container is the DOM element on what the itemTransition is applied.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemButtonClassName\n\n> **itemButtonClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:128\n\nCSS classes to add on the accordion-item toggle button DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemClassName\n\n> **itemClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:114\n\nCSS classes to add on the accordion-item DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemDestroyOnHide\n\n> **itemDestroyOnHide**: `boolean`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:100\n\nIf `true`, the accordion-item body container will be removed from the DOM when the accordion-item is collapsed. It will be just hidden otherwise.\n\n##### Default Value\n\n`true`\n\n***\n\n#### itemHeaderClassName\n\n> **itemHeaderClassName**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:121\n\nCSS classes to add on the accordion-item header DOM element.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemHeadingTag\n\n> **itemHeadingTag**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:150\n\nThe html tag to use for the accordion-item-header.\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:167\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemTransition\n\n> **itemTransition**: [`TransitionFn`](../../../../api/svelte/bootstrap/components/accordion/../../services/transitions/baseTransitions#transitionfn)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:62\n\nThe transition to use for the accordion-item body-container when the accordion-item is toggled.\n\n##### Default Value\n\n```ts\ncollapseVerticalTransition\n```\n\n***\n\n#### onItemHidden\n\n> **onItemHidden**: (`itemId`) => `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:93\n\nAn event fired when an item is hidden.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onItemShown\n\n> **onItemShown**: (`itemId`) => `void`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:81\n\nAn event fired when an item is shown.\n\nEvent payload is the id of the item.\n\n##### Parameters\n\n###### itemId\n\n`string`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","AccordionProps",{"source":31,"name":32},"## interface_AccordionState\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:24\n\nRepresents the state of an Accordion component.\n\n### Properties\n\n#### className\n\n> **className**: `string`\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:36\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### itemStructure\n\n> **itemStructure**: [`SlotContent`](../../../../api/svelte/bootstrap/components/accordion/../../types#slotcontent)\\\u003C[`AccordionItemContext`](#accordionitemcontext)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:46\n\nStructure of the accordion-item. The default item structure is: accordion-item\ncontains accordion header and accordion-item body container; the accordion header contains the accordion button\n(that contains `header`), while the accordion-item body container contains the accordion body (that contains `children`).\nThe itemTransition is applied on this element.\n\nIt is a prop of the accordion-item.\n\n***\n\n#### itemWidgets\n\n> **itemWidgets**: [`AccordionItemWidget`](#accordionitemwidget)[]\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:29\n\nArray containing all the accordion-items contained in the accordion.\n","AccordionState",{"source":34,"name":35},"## type alias_AccordionWidget\n> **AccordionWidget**: [`Widget`](../../../../api/svelte/bootstrap/components/accordion/../../types#widget)\\\u003C[`AccordionProps`](#accordionprops), [`AccordionState`](#accordionstate), [`AccordionApi`](#accordionapi), [`AccordionDirectives`](#accordiondirectives)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:175\n\nRepresents an Accordion widget type.\n","AccordionWidget",{"source":37,"name":38},"## function_createAccordion\n> **createAccordion**(`props`?): [`AccordionWidget`](#accordionwidget)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:397\n\nCreate an AccordionWidget with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../../../../api/svelte/bootstrap/components/accordion/../../types#propsconfig)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\n### Returns\n\n[`AccordionWidget`](#accordionwidget)\n\nan AccordionWidget\n","createAccordion",{"source":40,"name":41},"## function_createAccordionItem\n> **createAccordionItem**(`props`?): [`AccordionItemWidget`](#accordionitemwidget)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:387\n\nCreate an AccordionItemWidget with given config props\n\n### Parameters\n\n#### props?\n\n[`PropsConfig`](../../../../api/svelte/bootstrap/components/accordion/../../types#propsconfig)\\\u003C[`AccordionItemProps`](#accordionitemprops)\\>\n\n### Returns\n\n[`AccordionItemWidget`](#accordionitemwidget)\n\nan AccordionItemWidget\n","createAccordionItem",{"source":43,"name":44},"## function_factoryCreateAccordion\n> **factoryCreateAccordion**(`itemFactory`?, `accordionItemProps`?, `accordionConfig`?, `accordionValidator`?): [`WidgetFactory`](../../../../api/svelte/bootstrap/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:411\n\nCreate an accordion WidgetFactory based on a item factory and the list of item props that should inherit from the parent accordion\n\n### Parameters\n\n#### itemFactory?\n\n[`WidgetFactory`](../../../../api/svelte/bootstrap/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionItemWidget`](#accordionitemwidget)\\>\n\nthe item factory\n\n#### accordionItemProps?\n\n`string`[]\n\nthe list of item props\n\n#### accordionConfig?\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n\n#### accordionValidator?\n\n[`ConfigValidator`](../../../../api/svelte/bootstrap/components/accordion/../../types#configvalidator)\\\u003C[`AccordionProps`](#accordionprops)\\>\n\nthe validator of props\n\n### Returns\n\n[`WidgetFactory`](../../../../api/svelte/bootstrap/components/accordion/../../types#widgetfactory)\\\u003C[`AccordionWidget`](#accordionwidget)\\>\n\nthe accordion widget factory\n","factoryCreateAccordion",{"source":46,"name":47},"## function_getAccordionApi\n> **getAccordionApi**(): [`AccordionApi`](#accordionapi)\n\nDefined in: [svelte/bootstrap/src/components/accordion/accordion.ts:24](https://github.com/AmadeusITGroup/AgnosUI/blob/ad84dee0db69751bb15f98666ddd98ea065c3f05/svelte/bootstrap/src/components/accordion/accordion.ts#L24)\n\nRetrieves the Accordion API from the Svelte context.\n\n### Returns\n\n[`AccordionApi`](#accordionapi)\n\nThe Accordion API instance.\n","getAccordionApi",{"source":49,"name":50},"## function_getAccordionDefaultConfig\n> **getAccordionDefaultConfig**(): [`AccordionProps`](#accordionprops)\n\nDefined in: svelte/bootstrap/src/components/accordion/accordion.gen.ts:11\n\nRetrieve a shallow copy of the default accordion config\n\n### Returns\n\n[`AccordionProps`](#accordionprops)\n\nthe default accordion config\n","getAccordionDefaultConfig",{"source":52,"name":53},"## function_setAccordionApi\n> **setAccordionApi**(`accordionApi`): `void`\n\nDefined in: [svelte/bootstrap/src/components/accordion/accordion.ts:15](https://github.com/AmadeusITGroup/AgnosUI/blob/ad84dee0db69751bb15f98666ddd98ea065c3f05/svelte/bootstrap/src/components/accordion/accordion.ts#L15)\n\nSets the Accordion API in the context.\n\n### Parameters\n\n#### accordionApi\n\n[`AccordionApi`](#accordionapi)\n\nThe Accordion API to be set in the context.\n\n### Returns\n\n`void`\n","setAccordionApi","Accordion","@agnos-ui/svelte-bootstrap/components/accordion"],"uses":{"params":["framework","component"]}}]}
