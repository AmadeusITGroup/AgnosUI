{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,95,139],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/react/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/react/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/react/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/react/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/react/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/react/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/react/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/react/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,67,71,75,79,83,87,91],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/react/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/react/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/react/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Carousel","inprogress","docs/react/daisyUI/carousel/","daisyUI/carousel/",{"label":63,"status":64,"path":65,"subpath":51,"slug":66},"Collapse","beta","docs/react/daisyUI/collapse/","daisyUI/collapse/",{"label":68,"status":49,"path":69,"subpath":51,"slug":70},"Modal","docs/react/daisyUI/modal/","daisyUI/modal/",{"label":72,"status":49,"path":73,"subpath":51,"slug":74},"Pagination","docs/react/daisyUI/pagination/","daisyUI/pagination/",{"label":76,"status":49,"path":77,"subpath":51,"slug":78},"Progressbar","docs/react/daisyUI/progressbar/","daisyUI/progressbar/",{"label":80,"status":49,"path":81,"subpath":51,"slug":82},"Rating","docs/react/daisyUI/rating/","daisyUI/rating/",{"label":84,"status":49,"path":85,"subpath":51,"slug":86},"Slider","docs/react/daisyUI/slider/","daisyUI/slider/",{"label":88,"status":49,"path":89,"subpath":51,"slug":90},"Toast","docs/react/daisyUI/toast/","daisyUI/toast/",{"label":92,"status":64,"path":93,"subpath":51,"slug":94},"Tree","docs/react/daisyUI/tree/","daisyUI/tree/",{"title":96,"submenu":97},"Bootstrap Components",[98,101,105,108,111,114,117,120,123,126,130,133,136],{"label":7,"status":8,"path":99,"subpath":-1,"slug":100},"docs/react/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":102,"subpath":103,"slug":104},"docs/react/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":106,"subpath":103,"slug":107},"docs/react/components/alert/","components/alert/",{"label":58,"status":59,"path":109,"subpath":103,"slug":110},"docs/react/components/carousel/","components/carousel/",{"label":63,"status":64,"path":112,"subpath":103,"slug":113},"docs/react/components/collapse/","components/collapse/",{"label":68,"status":49,"path":115,"subpath":103,"slug":116},"docs/react/components/modal/","components/modal/",{"label":72,"status":49,"path":118,"subpath":103,"slug":119},"docs/react/components/pagination/","components/pagination/",{"label":76,"status":49,"path":121,"subpath":103,"slug":122},"docs/react/components/progressbar/","components/progressbar/",{"label":80,"status":49,"path":124,"subpath":103,"slug":125},"docs/react/components/rating/","components/rating/",{"label":127,"status":59,"path":128,"subpath":103,"slug":129},"Select","docs/react/components/select/","components/select/",{"label":84,"status":49,"path":131,"subpath":103,"slug":132},"docs/react/components/slider/","components/slider/",{"label":88,"status":49,"path":134,"subpath":103,"slug":135},"docs/react/components/toast/","components/toast/",{"label":92,"status":64,"path":137,"subpath":103,"slug":138},"docs/react/components/tree/","components/tree/",{"title":140,"submenu":141},"Services",[142,145,149,153,157,161,165],{"label":7,"status":8,"path":143,"subpath":-1,"slug":144},"docs/react/services/introduction","services/introduction",{"label":146,"status":8,"path":147,"subpath":-1,"slug":148},"Focustrack","docs/react/services/focustrack","services/focustrack",{"label":150,"status":8,"path":151,"subpath":-1,"slug":152},"Floating UI","docs/react/services/floating-ui","services/floating-ui",{"label":154,"status":8,"path":155,"subpath":-1,"slug":156},"Match Media","docs/react/services/match-media","services/match-media",{"label":158,"status":8,"path":159,"subpath":-1,"slug":160},"Navigation Manager","docs/react/services/navigation-manager","services/navigation-manager",{"label":162,"status":8,"path":163,"subpath":-1,"slug":164},"Resize Observer","docs/react/services/resize-observer","services/resize-observer",{"label":166,"status":8,"path":167,"subpath":-1,"slug":168},"Transition","docs/react/services/transition","services/transition"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":13,"next":16},"Tree","beta","v0.7.0",[5,9],{"title":6,"key":7,"path":8},"Examples","headless","/daisyUI/tree/headless",{"title":10,"key":11,"path":12},"Api","api","/daisyUI/tree/api",{"title":14,"slug":15,"subpath":7},"Toast","daisyUI/toast/",{"title":17,"slug":18,"subpath":-1},"Bootstrap Components: Introduction","bootstrap-components/introduction"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":30,"import":31},"tree",[3,6,9,12,15,18,21,24,27],{"source":4,"name":5},"## function_createTree\n> **createTree**(`config`?): [`TreeWidget`](#treewidget)\n\n\nCreate a tree widget with given config props\n\n### Parameters\n\n#### config?\n\n[`PropsConfig`](../../../../api/react/headless/components/tree/../../types#propsconfig)\\\u003C[`TreeProps`](#treeprops)\\>\n\nan optional tree config\n\n### Returns\n\n[`TreeWidget`](#treewidget)\n\na TreeWidget\n","createTree",{"source":7,"name":8},"## function_getTreeDefaultConfig\n> **getTreeDefaultConfig**(): [`TreeProps`](#treeprops)\n\n\nRetrieve a shallow copy of the default Tree config\n\n### Returns\n\n[`TreeProps`](#treeprops)\n\nthe default Tree config\n","getTreeDefaultConfig",{"source":10,"name":11},"## interface_NormalizedTreeItem\n\nNormalized TreeItem object\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\n\nAccessibility label for the node\n\n***\n\n#### children\n\n> **children**: `NormalizedTreeItem`[]\n\n\nAn array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\n\nString title of the node\n\n***\n\n#### level\n\n> **level**: `number`\n\n\nLevel in the hierarchy, starts with 0 for a root node\n","NormalizedTreeItem",{"source":13,"name":14},"## interface_TreeApi\n\nInterface representing the API for a Tree component.\n","TreeApi",{"source":16,"name":17},"## interface_TreeDirectives\n\nInterface representing various directives used in the Tree component.\n\n### Properties\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../../../../api/react/headless/components/tree/../../types#directive)\\\u003C\\{ `item`: [`NormalizedTreeItem`](#normalizedtreeitem); \\}\\>\n\n\nDirective to handle attributes for the tree item\n\n***\n\n#### itemToggleDirective\n\n> **itemToggleDirective**: [`Directive`](../../../../api/react/headless/components/tree/../../types#directive)\\\u003C\\{ `item`: [`NormalizedTreeItem`](#normalizedtreeitem); \\}\\>\n\n\nDirective to handle toggle for the tree item\n\n***\n\n#### navigationDirective\n\n> **navigationDirective**: [`Directive`](../../../../api/react/headless/components/tree/../../types#directive)\n\n\nDirective to attach navManager for the tree\n","TreeDirectives",{"source":19,"name":20},"## interface_TreeItem\n\nRepresents a tree item component.\n\n### Extended by\n\n- [`NormalizedTreeItem`](#normalizedtreeitem)\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the node\n\n***\n\n#### children?\n\n> `optional` **children**: `TreeItem`[]\n\n\nOptional array of children nodes\n\n***\n\n#### isExpanded?\n\n> `optional` **isExpanded**: `boolean`\n\n\nIf `true` the node is expanded\n\n***\n\n#### label\n\n> **label**: `string`\n\n\nString title of the node\n","TreeItem",{"source":22,"name":23},"## interface_TreeProps\n\nInterface representing the properties for the Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaLabelToggleFn\n\n> **ariaLabelToggleFn**: (`label`) => `string`\n\n\nReturn the value for the 'aria-label' attribute of the toggle\n\n##### Parameters\n\n###### label\n\n`string`\n\ntree item label\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(label: string) => `Toggle ${label}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### nodes\n\n> **nodes**: [`TreeItem`](#treeitem)[]\n\n\nArray of the tree nodes to display\n\n##### Default Value\n\n`[]`\n\n***\n\n#### onExpandToggle\n\n> **onExpandToggle**: (`node`) => `void`\n\n\nAn event emitted when the user toggles the expand of the TreeItem.\n\nEvent payload is equal to the TreeItem clicked.\n\n##### Parameters\n\n###### node\n\n[`NormalizedTreeItem`](#normalizedtreeitem)\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n### Methods\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n\nRetrieves expand items of the TreeItem\n\n##### Parameters\n\n###### node\n\n[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTML element that is representing the expand item\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('button')\n```\n","TreeProps",{"source":25,"name":26},"## interface_TreeState\n\nRepresents the state of a Tree component.\n\n### Properties\n\n#### ariaLabel?\n\n> `optional` **ariaLabel**: `string`\n\n\nOptional accessibility label for the tree if there is no explicit label\n\n##### Default Value\n\n`''`\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### expandedMap\n\n> **expandedMap**: `object`\n\n\nGetter of expanded state for each tree node\n\n##### get\n\n###### Parameters\n\n####### item\n\n[`NormalizedTreeItem`](#normalizedtreeitem)\n\n###### Returns\n\n`undefined` \\| `boolean`\n\n***\n\n#### normalizedNodes\n\n> **normalizedNodes**: [`NormalizedTreeItem`](#normalizedtreeitem)[]\n\n\nArray of normalized tree nodes\n","TreeState",{"source":28,"name":29},"## type alias_TreeWidget\n> **TreeWidget** = [`Widget`](../../../../api/react/headless/components/tree/../../types#widget)\\\u003C[`TreeProps`](#treeprops), [`TreeState`](#treestate), [`TreeApi`](#treeapi), [`TreeDirectives`](#treedirectives)\\>\n\n\nRepresents a Tree widget component.\n","TreeWidget","Tree","@agnos-ui/react-headless/components/tree"],"uses":{"params":["framework","component"]}}]}
