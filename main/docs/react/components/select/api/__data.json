{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,86,125],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/react/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/react/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/react/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/react/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/react/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/react/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/react/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/react/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/react/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/react/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/react/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Collapse","beta","docs/react/daisyUI/collapse/","daisyUI/collapse/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Modal","docs/react/daisyUI/modal/","daisyUI/modal/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Pagination","docs/react/daisyUI/pagination/","daisyUI/pagination/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Progressbar","docs/react/daisyUI/progressbar/","daisyUI/progressbar/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Rating","docs/react/daisyUI/rating/","daisyUI/rating/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Slider","docs/react/daisyUI/slider/","daisyUI/slider/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Toast","docs/react/daisyUI/toast/","daisyUI/toast/",{"title":87,"submenu":88},"Bootstrap Components",[89,92,96,99,102,105,108,111,114,119,122],{"label":7,"status":8,"path":90,"subpath":-1,"slug":91},"docs/react/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":93,"subpath":94,"slug":95},"docs/react/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":97,"subpath":94,"slug":98},"docs/react/components/alert/","components/alert/",{"label":58,"status":59,"path":100,"subpath":94,"slug":101},"docs/react/components/collapse/","components/collapse/",{"label":63,"status":49,"path":103,"subpath":94,"slug":104},"docs/react/components/modal/","components/modal/",{"label":67,"status":49,"path":106,"subpath":94,"slug":107},"docs/react/components/pagination/","components/pagination/",{"label":71,"status":49,"path":109,"subpath":94,"slug":110},"docs/react/components/progressbar/","components/progressbar/",{"label":75,"status":49,"path":112,"subpath":94,"slug":113},"docs/react/components/rating/","components/rating/",{"label":115,"status":116,"path":117,"subpath":94,"slug":118},"Select","inprogress","docs/react/components/select/","components/select/",{"label":79,"status":49,"path":120,"subpath":94,"slug":121},"docs/react/components/slider/","components/slider/",{"label":83,"status":49,"path":123,"subpath":94,"slug":124},"docs/react/components/toast/","components/toast/",{"title":126,"submenu":127},"Services",[128,131,135,139,143,147],{"label":7,"status":8,"path":129,"subpath":-1,"slug":130},"docs/react/services/introduction","services/introduction",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Focustrack","docs/react/services/focustrack","services/focustrack",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Floating UI","docs/react/services/floating-ui","services/floating-ui",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Resize Observer","docs/react/services/resize-observer","services/resize-observer",{"label":144,"status":8,"path":145,"subpath":-1,"slug":146},"Transition","docs/react/services/transition","services/transition",{"label":148,"status":8,"path":149,"subpath":-1,"slug":150},"Match Media","docs/react/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":13,"next":16},"Select","inprogress","v0.1.1",[5,9],{"title":6,"key":7,"path":8},"Examples","examples","/components/select/examples",{"title":10,"key":11,"path":12},"Api","api","/components/select/api",{"title":14,"slug":15,"subpath":7},"Rating","components/rating/",{"title":17,"slug":18,"subpath":7},"Slider","components/slider/"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":14,"import":36,"pageMeta":37},"select",[3,6,9,12,15,18,21,24,27,30,33],{"source":4,"name":5},"## function_createSelect\n> **createSelect**\\\u003C`Item`\\>(`config`?): [`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\nCreates a new select widget instance.\n\n### Type Parameters\n\n• **Item**\n\n### Parameters\n\n• **config?**: [`PropsConfig`](../../../../api/react/bootstrap/components/select/../../types#propsconfig)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>\\>\n\nconfig of the modal, either as a store or as an object containing values or stores.\n\n### Returns\n\n[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\n\na new select widget instance\n","createSelect",{"source":7,"name":8},"## function_getSelectDefaultConfig\n> **getSelectDefaultConfig**(): [`SelectProps`](#selectprops)\\\u003C`any`\\>\n\nRetrieve a shallow copy of the default Select config\n\n### Returns\n\n[`SelectProps`](#selectprops)\\\u003C`any`\\>\n\nthe default Select config\n","getSelectDefaultConfig",{"source":10,"name":11},"## interface_ItemContext\n### Type Parameters\n\n• **T**\n\n### Properties\n\n#### id\n\n> **id**: `string`\n\nUnique id to identify the item\n\n***\n\n#### item\n\n> **item**: `T`\n\nOriginal item given in the parameters\n\n***\n\n#### selected\n\n> **selected**: `boolean`\n\nSpecify if the item is checked\n","ItemContext",{"source":13,"name":14},"## function_Select\n> **Select**\\\u003C`Item`\\>(`props`): `Element`\n\n### Type Parameters\n\n• **Item**\n\n### Parameters\n\n• **props**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>\\>\n\n### Returns\n\n`Element`\n","Select",{"source":16,"name":17},"## interface_SelectApi\n### Type Parameters\n\n• **Item**\n\n### Methods\n\n#### clear\n\n> **clear**(): `void`\n\nClear all the selected items\n\n##### Returns\n\n`void`\n\n***\n\n#### clearText\n\n> **clearText**(): `void`\n\nClear the filter text\n\n##### Returns\n\n`void`\n\n***\n\n#### close\n\n> **close**(): `void`\n\nclose the select\n\n##### Returns\n\n`void`\n\n***\n\n#### highlight\n\n> **highlight**(`item`): `void`\n\nHighlight the given item, if there is a corresponding match among the visible list\n\n##### Parameters\n\n• **item**: `Item`\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightFirst\n\n> **highlightFirst**(): `void`\n\nHighlight the first item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightLast\n\n> **highlightLast**(): `void`\n\nHighlight the last item among the visible list\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightNext\n\n> **highlightNext**(): `void`\n\nHighlight the next item among the visible list.\nLoop to the first item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### highlightPrevious\n\n> **highlightPrevious**(): `void`\n\nHighlight the previous item among the visible list\nLoop to the last item if needed\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nopen the select\n\n##### Returns\n\n`void`\n\n***\n\n#### select\n\n> **select**(`item`): `void`\n\nSelect the provided item.\nThe selected list is used to\n\n##### Parameters\n\n• **item**: `Item`\n\nthe item to select\n\n##### Returns\n\n`void`\n\n***\n\n#### toggle\n\n> **toggle**(`isOpen`?): `void`\n\nToggle the dropdown menu\n\n##### Parameters\n\n• **isOpen?**: `boolean`\n\nIf specified, set the menu in the defined state.\n\n##### Returns\n\n`void`\n\n***\n\n#### toggleItem\n\n> **toggleItem**(`item`, `selected`?): `void`\n\nToggle the selection of an item\n\n##### Parameters\n\n• **item**: `Item`\n\nthe item to toggle\n\n• **selected?**: `boolean`\n\nan optional boolean to enforce the selected/unselected state instead of toggling\n\n##### Returns\n\n`void`\n\n***\n\n#### unselect\n\n> **unselect**(`item`): `void`\n\nUnselect the provided item.\n\n##### Parameters\n\n• **item**: `Item`\n\nthe item to unselect\n\n##### Returns\n\n`void`\n","SelectApi",{"source":19,"name":20},"## type alias_SelectContext\n> **SelectContext**\\\u003C`Item`\\>: [`WidgetSlotContext`](../../../../api/react/bootstrap/components/select/../../types#widgetslotcontext)\\\u003C[`SelectWidget`](#selectwidget)\\\u003C`Item`\\>\\>\n\nA type for the slot context of the pagination widget\n\n### Type Parameters\n\n• **Item**\n","SelectContext",{"source":22,"name":23},"## interface_SelectDirectives\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### badgeAttributesDirective\n\n> **badgeAttributesDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive that applies all the necessary attributes to the container badges\n\n***\n\n#### badgeCloseButtonDirective\n\n> **badgeCloseButtonDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive to be applied to a button that closes a badge\n\n***\n\n#### floatingDirective\n\n> **floatingDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../../../../api/react/bootstrap/components/select/../../types#ssrhtmlelement)\\>\n\nDirective that enables dynamic positioning of menu element\n\n***\n\n#### hasFocusDirective\n\n> **hasFocusDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\n\nDirective to be used in the input group and the menu containers\n\n***\n\n#### inputContainerDirective\n\n> **inputContainerDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\n\nA directive to be applied to the element that contains the badges and the input\n\n***\n\n#### inputDirective\n\n> **inputDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\n\nA directive to be applied to the input\n\n***\n\n#### itemAttributesDirective\n\n> **itemAttributesDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\\\u003C[`ItemContext`](#itemcontext)\\\u003C`Item`\\>\\>\n\nA directive that applies all the necessary attributes to the dropdown item\n\n***\n\n#### menuAttributesDirective\n\n> **menuAttributesDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\n\nA directive that applies all the necessary attributes to the dropdown menu\n\n***\n\n#### referenceDirective\n\n> **referenceDirective**: [`Directive`](../../../../api/react/bootstrap/components/select/../../types#directive)\\\u003C`void`, [`SSRHTMLElement`](../../../../api/react/bootstrap/components/select/../../types#ssrhtmlelement)\\>\n\nA directive to be applied to the input group element serves as the base for menu positioning\n","SelectDirectives",{"source":25,"name":26},"## type alias_SelectItemContext\n> **SelectItemContext**\\\u003C`Item`\\>: [`SelectContext`](#selectcontext)\\\u003C`Item`\\> & `object`\n\n### Type declaration\n\n#### itemContext\n\n> **itemContext**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\nContextual data related to an item\n\n### Type Parameters\n\n• **Item**\n","SelectItemContext",{"source":28,"name":29},"## interface_SelectProps\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### allowedPlacements\n\n> **allowedPlacements**: `Placement`[]\n\nList of allowed placements for the dropdown.\nThis refers to the [allowedPlacements from floating UI](https://floating-ui.com/docs/autoPlacement#allowedplacements), given the different [Placement possibilities](https://floating-ui.com/docs/computePosition#placement).\n\n##### Default Value\n\n```ts\n['bottom-start', 'top-start', 'bottom-end', 'top-end']\n```\n\n***\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/react/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/react/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### items\n\n> **items**: `Item`[]\n\nList of available items for the dropdown\n\n##### Default Value\n\n`[]`\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n### Methods\n\n#### itemIdFn\n\n> **itemIdFn**(`item`): `string`\n\nCustom function to get the id of an item\nBy default, the item is returned\n\n##### Parameters\n\n• **item**: `Item`\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(item: any) => '' + item\n```\n\n***\n\n#### navSelector\n\n> **navSelector**(`node`): `NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\nRetrieves navigable elements within an HTML element containing badges and the input.\n\n##### Parameters\n\n• **node**: [`HTMLElement`](https://developer.mozilla.org/docs/Web/API/HTMLElement)\n\nHTMLElement that contains the badges and the input\n\n##### Returns\n\n`NodeListOf`\\\u003C[`HTMLInputElement`](https://developer.mozilla.org/docs/Web/API/HTMLInputElement) \\| [`HTMLSpanElement`](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\\>\n\n##### Default Value\n\n```ts\n(node: HTMLElement) => node.querySelectorAll('.au-select-badge,input')\n```\n\n***\n\n#### onFilterTextChange\n\n> **onFilterTextChange**(`text`): `void`\n\nCallback called when the text filter change\n\n##### Parameters\n\n• **text**: `string`\n\nFiltered text\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onOpenChange\n\n> **onOpenChange**(`isOpen`): `void`\n\nCallback called dropdown open state change\n\n##### Parameters\n\n• **isOpen**: `boolean`\n\nupdated open state\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onSelectedChange\n\n> **onSelectedChange**(`selected`): `void`\n\nCallback called when the selection change\n\n##### Parameters\n\n• **selected**: `Item`[]\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n","SelectProps",{"source":31,"name":32},"## interface_SelectState\n### Type Parameters\n\n• **Item**\n\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `undefined` \\| `string`\n\naria-label used for the input inside the select\n\n##### Default Value\n\n`'Select'`\n\n***\n\n#### badgeClassName\n\n> **badgeClassName**: `string`\n\nClass to be added on selected items (displayed in the input zone)\n\n##### Default Value\n\n`''`\n\n***\n\n#### badgeLabel\n\n> **badgeLabel**: [`SlotContent`](../../../../api/react/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each badge on the left of the input is displayed.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\ntrue if the select is disabled\n\n##### Default Value\n\n`false`\n\n***\n\n#### filterText\n\n> **filterText**: `string`\n\nFiltered text to be display in the filter input\n\n##### Default Value\n\n`''`\n\n***\n\n#### highlighted\n\n> **highlighted**: `undefined` \\| [`ItemContext`](#itemcontext)\\\u003C`Item`\\>\n\nHighlighted item context.\nIt is designed to define the highlighted item in the dropdown menu\n\n***\n\n#### id\n\n> **id**: `undefined` \\| `string`\n\nid used for the input inside the select\n\n***\n\n#### itemLabel\n\n> **itemLabel**: [`SlotContent`](../../../../api/react/bootstrap/components/select/../../types#slotcontent)\\\u003C[`SelectItemContext`](#selectitemcontext)\\\u003C`Item`\\>\\>\n\nThe template to override the way each item is displayed in the list.\nThis define the content of the badge inside the badge container.\n\n##### Default Value\n\n```ts\n({itemContext}: SelectItemContext\u003Cany>) => itemContext.item\n```\n\n***\n\n#### loading\n\n> **loading**: `boolean`\n\ntrue if a loading process is being done\n\n##### Default Value\n\n`false`\n\n***\n\n#### menuClassName\n\n> **menuClassName**: `string`\n\nClass to be added on the dropdown menu container\n\n##### Default Value\n\n`''`\n\n***\n\n#### menuItemClassName\n\n> **menuItemClassName**: `string`\n\nClass to be added on menu items\n\n##### Default Value\n\n`''`\n\n***\n\n#### open\n\n> **open**: `boolean`\n\ntrue if the select is open\n\n##### Default Value\n\n`false`\n\n***\n\n#### placement\n\n> **placement**: `undefined` \\| `Placement`\n\nCurrent placement of the dropdown\n\n***\n\n#### selected\n\n> **selected**: `Item`[]\n\nList of selected item ids\n\n##### Default Value\n\n`[]`\n\n***\n\n#### selectedContexts\n\n> **selectedContexts**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\nList of selected items to be display\n\n***\n\n#### visibleItems\n\n> **visibleItems**: [`ItemContext`](#itemcontext)\\\u003C`Item`\\>[]\n\nList of item contexts, to be displayed in the menu\n","SelectState",{"source":34,"name":35},"## type alias_SelectWidget\n> **SelectWidget**\\\u003C`Item`\\>: [`Widget`](../../../../api/react/bootstrap/components/select/../../types#widget)\\\u003C[`SelectProps`](#selectprops)\\\u003C`Item`\\>, [`SelectState`](#selectstate)\\\u003C`Item`\\>, [`SelectApi`](#selectapi)\\\u003C`Item`\\>, `object`, [`SelectDirectives`](#selectdirectives)\\\u003C`Item`\\>\\>\n\n### Type Parameters\n\n• **Item**\n","SelectWidget","@agnos-ui/react-bootstrap/components/select",{"description":38},"API Documentation for select"],"uses":{"params":["framework","component"]}}]}
