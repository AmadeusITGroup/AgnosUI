{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,86,125],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/react/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/react/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/react/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/react/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/react/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/react/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/react/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/react/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,62,66,70,74,78,82],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/react/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/react/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/react/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":59,"path":60,"subpath":51,"slug":61},"Collapse","beta","docs/react/daisyUI/collapse/","daisyUI/collapse/",{"label":63,"status":49,"path":64,"subpath":51,"slug":65},"Modal","docs/react/daisyUI/modal/","daisyUI/modal/",{"label":67,"status":49,"path":68,"subpath":51,"slug":69},"Pagination","docs/react/daisyUI/pagination/","daisyUI/pagination/",{"label":71,"status":49,"path":72,"subpath":51,"slug":73},"Progressbar","docs/react/daisyUI/progressbar/","daisyUI/progressbar/",{"label":75,"status":49,"path":76,"subpath":51,"slug":77},"Rating","docs/react/daisyUI/rating/","daisyUI/rating/",{"label":79,"status":49,"path":80,"subpath":51,"slug":81},"Slider","docs/react/daisyUI/slider/","daisyUI/slider/",{"label":83,"status":49,"path":84,"subpath":51,"slug":85},"Toast","docs/react/daisyUI/toast/","daisyUI/toast/",{"title":87,"submenu":88},"Bootstrap Components",[89,92,96,99,102,105,108,111,114,119,122],{"label":7,"status":8,"path":90,"subpath":-1,"slug":91},"docs/react/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":93,"subpath":94,"slug":95},"docs/react/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":97,"subpath":94,"slug":98},"docs/react/components/alert/","components/alert/",{"label":58,"status":59,"path":100,"subpath":94,"slug":101},"docs/react/components/collapse/","components/collapse/",{"label":63,"status":49,"path":103,"subpath":94,"slug":104},"docs/react/components/modal/","components/modal/",{"label":67,"status":49,"path":106,"subpath":94,"slug":107},"docs/react/components/pagination/","components/pagination/",{"label":71,"status":49,"path":109,"subpath":94,"slug":110},"docs/react/components/progressbar/","components/progressbar/",{"label":75,"status":49,"path":112,"subpath":94,"slug":113},"docs/react/components/rating/","components/rating/",{"label":115,"status":116,"path":117,"subpath":94,"slug":118},"Select","inprogress","docs/react/components/select/","components/select/",{"label":79,"status":49,"path":120,"subpath":94,"slug":121},"docs/react/components/slider/","components/slider/",{"label":83,"status":49,"path":123,"subpath":94,"slug":124},"docs/react/components/toast/","components/toast/",{"title":126,"submenu":127},"Services",[128,131,135,139,143,147],{"label":7,"status":8,"path":129,"subpath":-1,"slug":130},"docs/react/services/introduction","services/introduction",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Focustrack","docs/react/services/focustrack","services/focustrack",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Floating UI","docs/react/services/floating-ui","services/floating-ui",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Resize Observer","docs/react/services/resize-observer","services/resize-observer",{"label":144,"status":8,"path":145,"subpath":-1,"slug":146},"Transition","docs/react/services/transition","services/transition",{"label":148,"status":8,"path":149,"subpath":-1,"slug":150},"Match Media","docs/react/services/match-media","services/match-media"],"uses":{"params":["framework"]}},null,{"type":"data","data":[{"title":1,"status":2,"since":3,"tabs":4,"prev":13,"next":16},"Toast","stable","v0.2.0",[5,9],{"title":6,"key":7,"path":8},"Examples","examples","/components/toast/examples",{"title":10,"key":11,"path":12},"Api","api","/components/toast/api",{"title":14,"slug":15,"subpath":7},"Slider","components/slider/",{"title":17,"slug":18,"subpath":-1},"Services: Introduction","services/introduction"],"uses":{"params":["component"]}},{"type":"data","data":[{"component":1,"content":2,"title":11,"import":30,"pageMeta":31},"toast",[3,6,9,12,15,18,21,24,27],{"source":4,"name":5},"## function_createToast\n> **createToast**(`props`?): [`ToastWidget`](#toastwidget)\n\nCreate an ToastWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../../../../api/react/bootstrap/components/toast/../../types#propsconfig)\\\u003C[`ToastProps`](#toastprops)\\>\n\n### Returns\n\n[`ToastWidget`](#toastwidget)\n\nan ToastWidget\n","createToast",{"source":7,"name":8},"## function_getToastDefaultConfig\n> **getToastDefaultConfig**(): [`ToastProps`](#toastprops)\n\nRetrieve a shallow copy of the default Toast config\n\n### Returns\n\n[`ToastProps`](#toastprops)\n\nthe default Toast config\n","getToastDefaultConfig",{"source":10,"name":11},"## function_Toast\n> **Toast**(`props`): `ReactNode`\n\n### Parameters\n\n• **props**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C[`ToastProps`](#toastprops)\\> & `RefAttributes`\\\u003C[`ToastApi`](#toastapi)\\>\n\n### Returns\n\n`ReactNode`\n","Toast",{"source":13,"name":14},"## interface_ToastApi\n### Methods\n\n#### close\n\n> **close**(): `void`\n\nTriggers alert closing programmatically (same as clicking on the close button (×)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","ToastApi",{"source":16,"name":17},"## type alias_ToastContext\n> **ToastContext**: [`WidgetSlotContext`](../../../../api/react/bootstrap/components/toast/../../types#widgetslotcontext)\\\u003C[`ToastWidget`](#toastwidget)\\>\n","ToastContext",{"source":19,"name":20},"## interface_ToastDirectives\n### Properties\n\n#### autoHideDirective\n\n> **autoHideDirective**: [`Directive`](../../../../api/react/bootstrap/components/toast/../../types#directive)\n\nDirective that handles the autohide of the toast component\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: [`Directive`](../../../../api/react/bootstrap/components/toast/../../types#directive)\n\nDirective that adds all the necessary attributes to the body\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: [`Directive`](../../../../api/react/bootstrap/components/toast/../../types#directive)\n\nDirective that adds all the necessary attributes to the close button depending on the presence of the header\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: [`Directive`](../../../../api/react/bootstrap/components/toast/../../types#directive)\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","ToastDirectives",{"source":22,"name":23},"## interface_ToastProps\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (×),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/react/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/react/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nHeader template for the toast component\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n• **visible**: `boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/react/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nGlobal template for the toast component\n\n***\n\n#### transition\n\n> **transition**: [`TransitionFn`](../../../../api/react/bootstrap/components/toast/../../services/transitions/baseTransitions#transitionfn)\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastProps",{"source":25,"name":26},"## interface_ToastState\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: [`SlotContent`](../../../../api/react/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\nIf `true`, alert can be dismissed by the user.\nThe close button (×) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: [`SlotContent`](../../../../api/react/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nHeader template for the toast component\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### structure\n\n> **structure**: [`SlotContent`](../../../../api/react/bootstrap/components/toast/../../types#slotcontent)\\\u003C[`ToastContext`](#toastcontext)\\>\n\nGlobal template for the toast component\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastState",{"source":28,"name":29},"## type alias_ToastWidget\n> **ToastWidget**: [`Widget`](../../../../api/react/bootstrap/components/toast/../../types#widget)\\\u003C[`ToastProps`](#toastprops), [`ToastState`](#toaststate), [`ToastApi`](#toastapi), [`ToastDirectives`](#toastdirectives)\\>\n","ToastWidget","@agnos-ui/react-bootstrap/components/toast",{"description":32},"API Documentation for toast"],"uses":{"params":["framework","component"]}}]}
