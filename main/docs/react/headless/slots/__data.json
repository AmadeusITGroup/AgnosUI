{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,16,36,46,74],{"title":4,"submenu":5},"Getting started",[6,10,13],{"label":7,"path":8,"subpath":9},"Introduction","docs/react/getting-started/introduction","",{"label":11,"path":12,"subpath":9},"Installation","docs/react/getting-started/installation",{"label":14,"path":15,"subpath":9},"Core values","docs/react/getting-started/core-values",{"title":17,"submenu":18},"Headless",[19,21,24,27,30,33],{"label":7,"path":20,"subpath":9},"docs/react/headless/introduction",{"label":22,"path":23,"subpath":9},"Configuration","docs/react/headless/configuration",{"label":25,"path":26,"subpath":9},"Slots","docs/react/headless/slots",{"label":28,"path":29,"subpath":9},"Directives","docs/react/headless/directives",{"label":31,"path":32,"subpath":9},"Transitions","docs/react/headless/transitions",{"label":34,"path":35,"subpath":9},"Extending","docs/react/headless/extending",{"title":37,"submenu":38},"Bootstrap flavor",[39,41,44],{"label":7,"path":40,"subpath":9},"docs/react/bootstrap-flavor/introduction",{"label":42,"path":43,"subpath":9},"Customization","docs/react/bootstrap-flavor/customization",{"label":34,"path":45,"subpath":9},"docs/react/bootstrap-flavor/extending",{"title":47,"submenu":48},"Components",[49,53,56,59,62,65,68,71],{"label":50,"path":51,"subpath":52},"Accordion","docs/react/components/accordion/","examples",{"label":54,"path":55,"subpath":52},"Alert","docs/react/components/alert/",{"label":57,"path":58,"subpath":52},"Modal","docs/react/components/modal/",{"label":60,"path":61,"subpath":52},"Pagination","docs/react/components/pagination/",{"label":63,"path":64,"subpath":52},"Progressbar","docs/react/components/progressbar/",{"label":66,"path":67,"subpath":52},"Rating","docs/react/components/rating/",{"label":69,"path":70,"subpath":52},"Select","docs/react/components/select/",{"label":72,"path":73,"subpath":52},"Slider","docs/react/components/slider/",{"title":75,"submenu":76},"Services",[77,79,82,85],{"label":7,"path":78,"subpath":9},"docs/react/services/introduction",{"label":80,"path":81,"subpath":9},"Focustrack","docs/react/services/focustrack",{"label":83,"path":84,"subpath":9},"Floating UI","docs/react/services/floating-ui",{"label":86,"path":87,"subpath":9},"Intersection","docs/react/services/intersection"],"uses":{"params":["framework"]}},{"type":"data","data":[{"content":1,"prev":2,"next":7,"slug":11},"# Slots\n\n## What are Slots ?\n\nSlots are essentially placeholders within a component that can be filled with custom content.\nThey provide a way to dynamically inject content into a component without affecting its original template.  \nThis makes it possible to create components that can be easily adapted to different scenarios without having to duplicate code or create a new component from scratch.\n\n## Why use them ?\n\nSlots facilitate the creation of more versatile and reusable components.\nThey allow developers to design components with predefined structures while leaving room for variation in content.  \nThis separation of structure and content enhances code reusability and promotes a cleaner, more modular codebase.\n\n## AgnosUI Slot\n\nAgnosUI core widgets include slots as **properties** prefixed by _slot_ in their states.  \nThis allows to specifiy the projected content in multiple manners, like simple `string`, context-aware functions, standard slots or even fully-fledged components.\n\nTo illustrate the basic usage, let's see in action how we can use a simple slot in the Bootstrap flavour of the **Alert** component:\n\n```sample\n{Slot Standard Usage:slots/usage:278}\n```\n\n## Context\n\nSlots have access to a context, which for most cases is the widget state.  \nIt is possible however to extend the context, which enables powerful customization. Here is an example with the Bootstrap flavour of the **Pagination** component:\n\n```sample\n{Slot Context:slots/context:220}\n```\n\n## Integration with Configuration\n\nAs explained above, AgnosUI slots are inherently properties, thus benefit from the [Configuration](01-Configuration.md).  \nFor instance, we may configure the _slotStructure_ of the **Alert** to use a custom component, allowing to fully customize the widget.\n\n```sample\n{Slot Configuration:alert/icon:402}\n```\n\n## Slots in React\n\nReact manages slots using the `children` specific property, as [documented here](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children).  \nWe support this behavior, while going further.\n\nThe AgnosUI React slots can be set using:\n\n- a simple `string`\n- a function `(props: Props) => string`\n- a React node\n- a function `(props: Props) => React.ReactNode` returning a React node\n- a React class or function component\n\n\n## Headless example\n\nYou can check out the following example, re-writing the Bootstrap flavour of the **Rating** component as readonly:\n\n```sample\n{Slot Headless:slots/headless:148}\n```\n",{"slug":3,"mdpath":4,"title":5,"name":5,"subpath":6},"headless/configuration","../docs/01-Headless/01-Configuration.md","Configuration","",{"slug":8,"mdpath":9,"title":10,"name":10,"subpath":6},"headless/directives","../docs/01-Headless/03-Directives.md","Directives","headless/slots"],"uses":{"params":["slug","framework"]}}]}
