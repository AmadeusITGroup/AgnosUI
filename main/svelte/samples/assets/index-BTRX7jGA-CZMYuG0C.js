const V=(t,e)=>Object.is(t,e)&&(!t||typeof t!="object")&&typeof t!="function",C=[];let k=!1;const T=t=>{const e=!k;k=!0;let s=!0,r,i;try{r=t()}finally{if(e){for(;C.length>0;){const n=C.shift();try{n.notify()}catch(m){s&&(s=!1,i=m)}}k=!1}}if(s)return r;throw i},w=t=>{try{if(t.skipMarkDirty=!0,t.producer.updateValue(),t.producer.flags&16)throw new Error("assert failed: store still dirty after updating it")}finally{t.skipMarkDirty=!1}},o=()=>{},v=(t,e)=>{const s=t?t[e]:null;return typeof s=="function"?s.bind(t):o},y={next:o,pause:o,resume:o},I=t=>({next:typeof t=="function"?t.bind(null):v(t,"next"),pause:v(t,"pause"),resume:v(t,"resume")});class M{constructor(e,s){this.dirtyCount=1,this.subscriber=I(s),this.link=e.registerConsumer(e.newLink(this)),this.notify(!0)}unsubscribe(){this.subscriber!==y&&(this.subscriber=y,this.link.producer.unregisterConsumer(this.link))}markDirty(){this.dirtyCount++,C.push(this),this.dirtyCount===1&&this.subscriber.pause()}notify(e=!1){if(this.dirtyCount--,this.dirtyCount===0&&this.subscriber!==y){const s=this.link,r=s.producer;if(w(s),r.isLinkUpToDate(s)&&!e)this.subscriber.resume();else{const i=r.updateLink(s);this.subscriber.next(i)}}}}let u=null;const c=t=>{const e=u;return u=t,e},x=t=>{let e;const s=c(null);try{e=t()}finally{c(s)}return e};let l=!1;const a=()=>{if(l)throw new Error("Reading or writing a signal is forbidden during the notification phase.")};let f=0;class O{constructor(e){this.value=e,this.flags=0,this.version=0,this.equalFn=V,this.equalCache=null,this.consumerLinks=[]}newLink(e){return{version:-1,value:void 0,producer:this,indexInProducer:0,consumer:e,skipMarkDirty:!1}}isLinkUpToDate(e){if(e.version===this.version)return!0;if(e.version===this.version-1||e.version<0)return!1;let s=this.equalCache;s||(s={},this.equalCache=s);let r=s[e.version];return r===void 0&&(r=this.equal(e.value,this.value),s[e.version]=r),r}updateLink(e){return e.value=this.value,e.version=this.version,this.readValue()}registerConsumer(e){const s=this.consumerLinks,r=s.length;return e.indexInProducer=r,s[r]=e,e}unregisterConsumer(e){const s=this.consumerLinks,r=e.indexInProducer;if(s[r]!==e)throw new Error("assert failed: invalid indexInProducer");const i=s.pop();e===i?r===0&&this.checkUnused():(s[r]=i,i.indexInProducer=r)}checkUnused(){}updateValue(){}equal(e,s){const r=this.equalFn;return r(e,s)}increaseEpoch(){f++,this.markConsumersDirty()}set(e){a(),this.equal(this.value,e)||T(()=>{this.value=e,this.version++,this.equalCache=null,this.increaseEpoch()})}update(e){this.set(e(this.value))}markConsumersDirty(){const e=l;l=!0;try{const s=this.consumerLinks;for(let r=0,i=s.length;r<i;r++){const n=s[r];n.skipMarkDirty||n.consumer.markDirty()}}finally{l=e}}get(){return a(),u?u.addProducer(this):this.readValue()}readValue(){return this.value}subscribe(e){a();const s=new M(this,e),r=()=>s.unsubscribe();return r.unsubscribe=r,r}}let h=null,d=!1;const _=()=>{if(d)throw new Error("assert failed: recursive flushUnused call");d=!0;try{const t=h;if(t){h=null;for(let e=0,s=t.length;e<s;e++){const r=t[e];r.flags&=-5,r.checkUnused()}}}finally{d=!1}};class P extends O{constructor(){super(...arguments),this.extraUsages=0}updateValue(){if(!(this.flags&2)){if(!this.extraUsages&&!this.consumerLinks.length)throw new Error("assert failed: untracked producer usage");this.flags|=2,x(()=>this.startUse())}}checkUnused(){const e=this.flags;e&2&&!this.extraUsages&&!this.consumerLinks.length&&(d||e&1?(this.flags&=-3,x(()=>this.endUse())):e&4||(this.flags|=4,h||(h=[],queueMicrotask(_)),h.push(this)))}get(){if(a(),u)return u.addProducer(this);this.extraUsages++;try{if(this.updateValue(),this.flags&16)throw new Error("assert failed: store still dirty after updating it");return this.readValue()}finally{--this.extraUsages===0&&this.checkUnused()}}}const p=()=>{};p.unsubscribe=p;const F=t=>{if(!t)return p;if(t.unsubscribe===t)return t;const e=typeof t=="function"?()=>t():()=>t.unsubscribe();return e.unsubscribe=e,e};class A extends P{constructor(e){super(void 0),this.subscribable=e,this.subscriber=this.createSubscriber(),this.unsubscribe=null,this.flags=1}createSubscriber(){const e=s=>this.set(s);return e.next=e,e.pause=()=>{this.markConsumersDirty()},e}startUse(){this.unsubscribe=F(this.subscribable.subscribe(this.subscriber))}endUse(){const e=this.unsubscribe;e&&(this.unsubscribe=null,e())}}const R=typeof Symbol=="function"&&Symbol.observable||"@@observable",N=function(){return this},q=Symbol(),E=new WeakMap,Q=t=>{const e=t[q];if(e)return e;let s=E.get(t);if(!s){let r=t;"subscribe"in r||(r=r[R]()),s=new A(r),E.set(t,s)}return s},L=(t,e)=>{const s=t.get.bind(t);return e&&Object.assign(s,e),s.get=s,s.subscribe=t.subscribe.bind(t),s[R]=N,s[q]=t,s},S=1e3,g=Symbol("UNSET"),b=Symbol("ERRORED"),D=t=>t===g||t===b;class W extends P{constructor(){super(...arguments),this.flags=16}equal(e,s){return D(e)||D(s)?!1:super.equal(e,s)}markDirty(){this.flags&16||(this.flags|=16,this.markConsumersDirty())}readValue(){const e=this.value;if(e===b)throw this.error;if(e===g)throw new Error("assert failed: computed value is not set");return e}updateValue(){if(this.flags&8)throw new Error("recursive computed");if(super.updateValue(),!(this.flags&16))return;this.flags|=8;const e=c(null);try{let s=0;do{do if(s++,this.flags&=-17,this.areProducersUpToDate())return;while(this.flags&16&&s<S);this.recompute()}while(this.flags&16&&s<S);this.flags&16&&(this.flags&=-17,this.error=new Error("reached maximum number of store changes in one shot"),this.set(b))}finally{c(e),this.flags&=-9}}}class j extends W{constructor(e){super(g),this.computeFn=e,this.producerIndex=0,this.producerLinks=[],this.epoch=-1}increaseEpoch(){}updateValue(){this.flags&2&&this.epoch===f||(super.updateValue(),this.epoch=f)}get(){return!u&&!l&&this.epoch===f&&(!(this.flags&1)||this.flags&2)?this.readValue():super.get()}addProducer(e){const s=this.producerLinks,r=this.producerIndex;let i=s[r];return(i==null?void 0:i.producer)!==e&&(i&&s.push(i),i=e.registerConsumer(e.newLink(this))),s[r]=i,this.producerIndex=r+1,w(i),e.flags&1&&(this.flags|=1),e.updateLink(i)}startUse(){const e=this.producerLinks;for(let s=0,r=e.length;s<r;s++){const i=e[s];i.producer.registerConsumer(i)}this.flags|=16}endUse(){const e=this.producerLinks;for(let s=0,r=e.length;s<r;s++){const i=e[s];i.producer.unregisterConsumer(i)}}areProducersUpToDate(){if(this.value===g)return!1;const e=this.producerLinks;for(let s=0,r=e.length;s<r;s++){const i=e[s],n=i.producer;if(w(i),!n.isLinkUpToDate(i))return!1}return!0}recompute(){let e;const s=c(this);try{this.producerIndex=0,this.flags&=-2;const n=this.computeFn;e=n(),this.error=null}catch(n){e=b,this.error=n}finally{c(s)}const r=this.producerLinks,i=this.producerIndex;if(i<r.length)for(let n=0,m=r.length-i;n<m;n++){const U=r.pop();U.producer.unregisterConsumer(U)}this.set(e)}}class z{constructor(e){this.value=e,this.flags=0}newLink(e){return{producer:this}}registerConsumer(e){return e}unregisterConsumer(e){}updateValue(){}isLinkUpToDate(e){return!0}updateLink(e){return this.value}get(){return a(),this.value}subscribe(e){var s;return a(),typeof e=="function"?e(this.value):(s=e==null?void 0:e.next)==null||s.call(e,this.value),p}}function G(t,e){return L(Q(t),e)}function X(t,e){return G(t,{...e,set:o,update:o})}const H=(t,e)=>t;function B(t,e){return L(new z(t))}function J(t,e){return L(H(new j(t)))}export{X as a,J as c,B as r};
