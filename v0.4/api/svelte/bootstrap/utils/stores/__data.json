{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":133},true,[3,6,9,48,91,114],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44],{"path":13,"slug":14,"label":15},"api/svelte/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/bootstrap/components/modal","components/modal","Modal",{"path":25,"slug":26,"label":27},"api/svelte/bootstrap/components/pagination","components/pagination","Pagination",{"path":29,"slug":30,"label":31},"api/svelte/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":33,"slug":34,"label":35},"api/svelte/bootstrap/components/rating","components/rating","Rating",{"path":37,"slug":38,"label":39},"api/svelte/bootstrap/components/select","components/select","Select",{"path":41,"slug":42,"label":43},"api/svelte/bootstrap/components/slider","components/slider","Slider",{"path":45,"slug":46,"label":47},"api/svelte/bootstrap/components/toast","components/toast","Toast",{"title":49,"path":-1,"submenu":50},"Services",[51,55,59,63,67,71,75,79,83,87],{"path":52,"slug":53,"label":54},"api/svelte/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":56,"slug":57,"label":58},"api/svelte/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":60,"slug":61,"label":62},"api/svelte/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":64,"slug":65,"label":66},"api/svelte/bootstrap/services/hash","services/hash","hash",{"path":68,"slug":69,"label":70},"api/svelte/bootstrap/services/intersection","services/intersection","intersection",{"path":72,"slug":73,"label":74},"api/svelte/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":76,"slug":77,"label":78},"api/svelte/bootstrap/services/navManager","services/navManager","navManager",{"path":80,"slug":81,"label":82},"api/svelte/bootstrap/services/portal","services/portal","portal",{"path":84,"slug":85,"label":86},"api/svelte/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":88,"slug":89,"label":90},"api/svelte/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":92,"path":-1,"submenu":93},"Transitions",[94,98,102,106,110],{"path":95,"slug":96,"label":97},"api/svelte/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":99,"slug":100,"label":101},"api/svelte/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":103,"slug":104,"label":105},"api/svelte/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":107,"slug":108,"label":109},"api/svelte/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":111,"slug":112,"label":113},"api/svelte/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":115,"path":-1,"submenu":116},"Utils",[117,121,125,129],{"path":118,"slug":119,"label":120},"api/svelte/bootstrap/utils/directive","utils/directive","directive",{"path":122,"slug":123,"label":124},"api/svelte/bootstrap/utils/stores","utils/stores","stores",{"path":126,"slug":127,"label":128},"api/svelte/bootstrap/utils/widget","utils/widget","widget",{"path":130,"slug":131,"label":132},"api/svelte/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":51,"import":52},"utils/stores",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48],{"source":4,"name":5},"## function_bindableDerived\n> **bindableDerived**\\\u003C`T`, `U`\\>(`onChange$`, `stores`, `adjustValue`, `equal`): [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\n### Type Parameters\n\n• **T**\n\n• **U** *extends* [[`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>, `...StoreInput\u003Cany>[]`]\n\n### Parameters\n\n• **onChange$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C(`value`) => `void`\\>\n\nA readable signal containing a callback function to execute when the value changes.\n\n• **stores**: `U`\n\nAn array of Svelte stores, with the main store at index 0.\n\n• **adjustValue** = `...`\n\nA function to adjust the value of the main store. By default, the value of the main store is returned.\n\n• **equal** = `...`\n\nA function to determine if two values are equal. Used to compare the ajusted value with the current one.\n\n### Returns\n\n[`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\nThe derived store that reflects the combined state of the input stores.\n","bindableDerived",{"source":7,"name":8},"## function_bindableProp\n> **bindableProp**\\\u003C`T`\\>(`store$`, `onChange$`, `adjustValue`, `equal`): [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n• **store$**: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `undefined` \\| `T`\\>\n\nstore to be bound\n\n• **onChange$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C(`newValue`) => `void`\\>\n\nA readable signal containing a callback function to execute when the value changes from the set or update method of the returned writable store.\n\n• **adjustValue** = `identity`\n\nA function to adjust the value of the store, called in a reactive context each time the value changes or any called dependency changes.\nBy default, the value of store$ is returned.\n\n• **equal** = `tansuDefaultEqual`\n\nA function to determine if two values are equal.\n\n### Returns\n\n[`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\nA writable store that contains the adjusted value of the given store, with the set or update functions that trigger the onChange$ callback.\n","bindableProp",{"source":10,"name":11},"## function_createPatch\n> **createPatch**\\\u003C`T`\\>(`stores`): \\\u003C`U`\\>(`storesValues`?) => `void`\n\nUtility function designed to create a `patch` function related to the provided stores.\nAny key given to the patch function which is not in the original object will be ignored.\n\n### Type Parameters\n\n• **T** *extends* `object`\n\n### Parameters\n\n• **stores**: [`ToWritableSignal`](#towritablesignal)\\\u003C`T`\\>\n\nobject of stores\n\n### Returns\n\n`Function`\n\nthe patch function\n\n#### Type Parameters\n\n• **U** *extends* [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`T`\\>\n\n#### Parameters\n\n• **storesValues?**: `void` \\| `U`\n\n#### Returns\n\n`void`\n\n### Example\n\n```typescript\nconst storeA$ = writable(1);\nconst storeB$ = writable(1);\nconst patch = createPatch({a: storeA$, b: storeB$});\n\npatch({a: 2}) // will perform storeA$.set(2)\npatch({a: 2, b: 2}) // will perform storeA$.set(2) and storeB$.set(2) in the same batch.\npatch({a: 2, c: 2}) // will perform storeA$.set(2), c is ignored.\n\n```\n","createPatch",{"source":13,"name":14},"## function_findChangedProperties\n> **findChangedProperties**\\\u003C`T`\\>(`obj1`, `obj2`): [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`T`\\> \\| `null`\n\nThis utility function is designed to compare the first level of two objects.\n\nIt returns a new object which has all the keys for which the values in `obj1`\nand `obj2` are different, with the values from `obj2`, or null if objects\nare identical.\n\n### Type Parameters\n\n• **T** *extends* [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C`string`, `any`\\>\n\n### Parameters\n\n• **obj1**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`T`\\>\n\nFirst object\n\n• **obj2**: [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`T`\\>\n\nSecond object\n\n### Returns\n\n[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`T`\\> \\| `null`\n\nthe object with changed properties\n","findChangedProperties",{"source":16,"name":17},"## function_isStore\n> **isStore**(`x`): `x is ReadableSignal\u003Cany>`\n\n### Parameters\n\n• **x**: `any`\n\nargument that is tested\n\n### Returns\n\n`x is ReadableSignal\u003Cany>`\n\ntrue if the argument is a store (ReadableSignal)\n","isStore",{"source":19,"name":20},"## function_mergeConfigStores\n> **mergeConfigStores**\\\u003C`T`\\>(`keys`, `config1`?, `config2`?): [`ReadableSignals`](#readablesignals)\\\u003C`T`\\>\n\n### Type Parameters\n\n• **T** *extends* `object`\n\n### Parameters\n\n• **keys**: keyof `T`[]\n\nthe keys of the stores to extract and merge from the two provided configs\n\n• **config1?**: [`ReadableSignals`](#readablesignals)\\\u003C`T`\\>\n\nthe first config\n\n• **config2?**: [`ReadableSignals`](#readablesignals)\\\u003C`T`\\>\n\nthe second config\n\n### Returns\n\n[`ReadableSignals`](#readablesignals)\\\u003C`T`\\>\n\nthe merged config\n","mergeConfigStores",{"source":22,"name":23},"## function_normalizeConfigStores\n> **normalizeConfigStores**\\\u003C`T`\\>(`keys`, `config`?): [`ReadableSignals`](#readablesignals)\\\u003C`T`\\>\n\n### Type Parameters\n\n• **T** *extends* `object`\n\n### Parameters\n\n• **keys**: keyof `T`[]\n\nthe keys of the stores to extract / normalize\n\n• **config?**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`T`\\>\\> \\| [`ValuesOrReadableSignals`](../types#valuesorreadablesignals)\\\u003C`T`\\>\n\nthe config stores\n\n### Returns\n\n[`ReadableSignals`](#readablesignals)\\\u003C`T`\\>\n\nthe normalized config stores\n","normalizeConfigStores",{"source":25,"name":26},"## type alias_ReadableSignals\n> **ReadableSignals**\\\u003C`T`\\>: \\{ \\[K in keyof T\\]?: ReadableSignal\\\u003CT\\[K\\] \\| undefined\\> \\}\n\n### Type Parameters\n\n• **T** *extends* `object`\n","ReadableSignals",{"source":28,"name":29},"## function_stateStores\n> **stateStores**\\\u003C`A`\\>(`inputStores`): `object`\n\n### Type Parameters\n\n• **A** *extends* `object`\n\n### Parameters\n\n• **inputStores**: \\{ \\[K in string \\| number \\| symbol as \\`$\\{K & string\\}$\\`\\]: ReadableSignal\\\u003Cany\\> \\}\n\nthe input stores\n\n### Returns\n\n`object`\n\nthe object containing the stores as readable and the global state\n\n#### state$\n\n> **state$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`A`\\>\n\n#### stores\n\n> **stores**: \\{ \\[K in string \\| number \\| symbol as \\`$\\{K & string\\}$\\`\\]: ReadableSignal\\\u003CA\\[K\\]\\> \\}\n","stateStores",{"source":31,"name":32},"## function_toReadableStore\n> **toReadableStore**\\\u003C`T`\\>(`x`): [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`T`\\>\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n• **x**: `T` \\| [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`T`\\>\n\neither a store or a simple value\n\n### Returns\n\n[`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`T`\\>\n\neither x if x is already a store, or readable(x) otherwise\n","toReadableStore",{"source":34,"name":35},"## type alias_ToWritableSignal\n> **ToWritableSignal**\\\u003C`P`\\>: \\{ \\[K in keyof P as \\`$\\{K & string\\}$\\`\\]-?: WritableSignal\\\u003CP\\[K\\], P\\[K\\] \\| undefined\\> \\}\n\n### Type Parameters\n\n• **P**\n","ToWritableSignal",{"source":37,"name":38},"## function_toWritableStore\n> **toWritableStore**\\\u003C`T`\\>(`x`): [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n• **x**: `T` \\| [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\neither a writable store or a simple value\n\n### Returns\n\n[`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T`\\>\n\neither x if x is already a store, or writable(x) otherwise\n","toWritableStore",{"source":40,"name":41},"## type alias_WithoutDollar\n> **WithoutDollar**\\\u003C`S`\\>: `S` *extends* \\`$\\{infer U\\}$\\` ? `U` : `never`\n\n### Type Parameters\n\n• **S** *extends* \\`$\\{string\\}$\\`\n","WithoutDollar",{"source":43,"name":44},"## function_writablesForProps\n> **writablesForProps**\\\u003C`T`\\>(`defConfig`, `propsConfig`?, `options`?): [[`ToWritableSignal`](#towritablesignal)\\\u003C`T`\\>, \\\u003C`U`\\>(`storesValues`?) => `void`]\n\n### Type Parameters\n\n• **T** *extends* `object`\n\n### Parameters\n\n• **defConfig**: `T`\n\nobject containing, for each property, a default value to use in case `config` does not provide the suitable default\nvalue for that property\n\n• **propsConfig?**: [`PropsConfig`](../types#propsconfig)\\\u003C`T`\\>\n\neither a store of objects containing, for each property of `defConfig`, the default value or an object containing\nfor each property of `defConfig` either a store containing the default value or the default value itself\n\n• **options?**: \\{ \\[K in string \\| number \\| symbol\\]?: WritableWithDefaultOptions\\\u003CT\\[K\\]\\> \\}\n\nobject containing, for each property of `defConfig`, an optional object with the following optional functions: normalizeValue and equal\n\n### Returns\n\n[[`ToWritableSignal`](#towritablesignal)\\\u003C`T`\\>, \\\u003C`U`\\>(`storesValues`?) => `void`]\n\nan array with two items: the first one containing the writables (returned by [writablesWithDefault](#writableswithdefault)),\nand the second one containing the patch function (returned by [createPatch](#createpatch))\n","writablesForProps",{"source":46,"name":47},"## function_writablesWithDefault\n> **writablesWithDefault**\\\u003C`T`\\>(`defConfig`, `propsConfig`?, `options`?): [`ToWritableSignal`](#towritablesignal)\\\u003C`T`\\>\n\n### Type Parameters\n\n• **T** *extends* `object`\n\n### Parameters\n\n• **defConfig**: `T`\n\nobject containing, for each property, a default value to use in case `config$` does not provide the suitable default\nvalue for that property\n\n• **propsConfig?**: [`PropsConfig`](../types#propsconfig)\\\u003C`T`\\>\n\nobject defining the config and props\n\n• **options?**: [`ConfigValidator`](../types#configvalidator)\\\u003C`T`\\>\n\nobject containing, for each property of `defConfig`, an optional object with the following optional functions: normalizeValue and equal\n\n### Returns\n\n[`ToWritableSignal`](#towritablesignal)\\\u003C`T`\\>\n\nan object containing writables\n","writablesWithDefault",{"source":49,"name":50},"## function_writableWithDefault\n> **writableWithDefault**\\\u003C`T`\\>(`defValue`, `config$`, `options`, `own$`): [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T` \\| `undefined`\\>\n\nReturns a writable store whose value is either its own value (when it is not undefined) or a default value\nthat comes either from the `config$` store (when it is not undefined) or from `defValue`.\nIf a normalizeValue function is passed in the options, it is called to normalize non-undefined values coming\neither from the `config$` store or from the `set` or `update` functions. If a value is invalid (i.e. normalizeValue\nreturns the `invalidValue` symbol), an error is logged on the console and it is either not set (if it comes from the\n`set` or `update` functions), or the `defValue` is used instead (if the invalid value comes from the `config$` store).\n\n### Type Parameters\n\n• **T**\n\n### Parameters\n\n• **defValue**: `T`\n\nDefault value used when both the own value and the config$ value are undefined.\n\n• **config$**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C`undefined` \\| `T`\\> = `...`\n\nStore containing the default value used when the own value is undefined\n\n• **options**: [`WritableWithDefaultOptions`](../types#writablewithdefaultoptions)\\\u003C`T`\\> = `{}`\n\nObject which can contain the following optional functions: normalizeValue and equal\n\n• **own$**: [`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`undefined` \\| `T`, `undefined` \\| `T`\\> = `...`\n\nStore containing the own value\n\n### Returns\n\n[`WritableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/WritableSignal.html)\\\u003C`T`, `T` \\| `undefined`\\>\n\na writable store with the extra default value and normalization logic described above\n","writableWithDefault","API stores","@agnos-ui/svelte-bootstrap/utils/stores"],"uses":{"params":["framework","type","slug"]}}]}
