{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":133},true,[3,6,9,48,91,114],{"title":4,"path":5,"submenu":-1},"Types","api/svelte/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/svelte/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44],{"path":13,"slug":14,"label":15},"api/svelte/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/svelte/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/svelte/bootstrap/components/modal","components/modal","Modal",{"path":25,"slug":26,"label":27},"api/svelte/bootstrap/components/pagination","components/pagination","Pagination",{"path":29,"slug":30,"label":31},"api/svelte/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":33,"slug":34,"label":35},"api/svelte/bootstrap/components/rating","components/rating","Rating",{"path":37,"slug":38,"label":39},"api/svelte/bootstrap/components/select","components/select","Select",{"path":41,"slug":42,"label":43},"api/svelte/bootstrap/components/slider","components/slider","Slider",{"path":45,"slug":46,"label":47},"api/svelte/bootstrap/components/toast","components/toast","Toast",{"title":49,"path":-1,"submenu":50},"Services",[51,55,59,63,67,71,75,79,83,87],{"path":52,"slug":53,"label":54},"api/svelte/bootstrap/services/extendWidget","services/extendWidget","extendWidget",{"path":56,"slug":57,"label":58},"api/svelte/bootstrap/services/floatingUI","services/floatingUI","floatingUI",{"path":60,"slug":61,"label":62},"api/svelte/bootstrap/services/focustrack","services/focustrack","focustrack",{"path":64,"slug":65,"label":66},"api/svelte/bootstrap/services/hash","services/hash","hash",{"path":68,"slug":69,"label":70},"api/svelte/bootstrap/services/intersection","services/intersection","intersection",{"path":72,"slug":73,"label":74},"api/svelte/bootstrap/services/matchMedia","services/matchMedia","matchMedia",{"path":76,"slug":77,"label":78},"api/svelte/bootstrap/services/navManager","services/navManager","navManager",{"path":80,"slug":81,"label":82},"api/svelte/bootstrap/services/portal","services/portal","portal",{"path":84,"slug":85,"label":86},"api/svelte/bootstrap/services/resizeObserver","services/resizeObserver","resizeObserver",{"path":88,"slug":89,"label":90},"api/svelte/bootstrap/services/siblingsInert","services/siblingsInert","siblingsInert",{"title":92,"path":-1,"submenu":93},"Transitions",[94,98,102,106,110],{"path":95,"slug":96,"label":97},"api/svelte/bootstrap/services/transitions/baseTransitions","services/transitions/baseTransitions","baseTransitions",{"path":99,"slug":100,"label":101},"api/svelte/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":103,"slug":104,"label":105},"api/svelte/bootstrap/services/transitions/cssTransitions","services/transitions/cssTransitions","cssTransitions",{"path":107,"slug":108,"label":109},"api/svelte/bootstrap/services/transitions/fade","services/transitions/fade","fade",{"path":111,"slug":112,"label":113},"api/svelte/bootstrap/services/transitions/simpleClassTransition","services/transitions/simpleClassTransition","simpleClassTransition",{"title":115,"path":-1,"submenu":116},"Utils",[117,121,125,129],{"path":118,"slug":119,"label":120},"api/svelte/bootstrap/utils/directive","utils/directive","directive",{"path":122,"slug":123,"label":124},"api/svelte/bootstrap/utils/stores","utils/stores","stores",{"path":126,"slug":127,"label":128},"api/svelte/bootstrap/utils/widget","utils/widget","widget",{"path":130,"slug":131,"label":132},"api/svelte/bootstrap/utils/writables","utils/writables","writables","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":30,"import":31},"components/rating",[3,6,9,12,15,18,21,24,27],{"source":4,"name":5},"## function_createRating\n> **createRating**(`props`?): [`RatingWidget`](#ratingwidget)\n\nCreate a RatingWidget with given config props\n\n### Parameters\n\n• **props?**: [`PropsConfig`](../types#propsconfig)\\\u003C[`RatingProps`](#ratingprops)\\>\n\n### Returns\n\n[`RatingWidget`](#ratingwidget)\n\na RatingWidget\n","createRating",{"source":7,"name":8},"## function_getRatingDefaultConfig\n> **getRatingDefaultConfig**(): [`RatingProps`](#ratingprops)\n\nRetrieve a shallow copy of the default Rating config\n\n### Returns\n\n[`RatingProps`](#ratingprops)\n\nthe default Rating config\n","getRatingDefaultConfig",{"source":10,"name":11},"## interface_RatingActions\n### Methods\n\n#### click\n\n> **click**(`index`): `void`\n\nMethod to be used when a star is clicked.\n\nTo be used in the onclick event of a star\n\n##### Parameters\n\n• **index**: `number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n\n***\n\n#### handleKey\n\n> **handleKey**(`event`): `void`\n\nMethod to be used to handle the keyboard.\n\nTo be used in the onkeydown of the rating container\n\n##### Parameters\n\n• **event**: [`KeyboardEvent`](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)\n\n##### Returns\n\n`void`\n\n***\n\n#### hover\n\n> **hover**(`index`): `void`\n\nMethod to be used when the mouse enter in a star.\n\nTo be used in the onmouseenter of a star\n\n##### Parameters\n\n• **index**: `number`\n\nStar index, starting from 1\n\n##### Returns\n\n`void`\n\n***\n\n#### leave\n\n> **leave**(): `void`\n\nMethod to be used when the mouse leave the widget.\n\nTo be used in the onmouseleave of the rating container\n\n##### Returns\n\n`void`\n","RatingActions",{"source":13,"name":14},"## interface_RatingDirectives\n### Properties\n\n#### containerDirective\n\n> **containerDirective**: [`Directive`](../types#directive)\n\nA directive to be applied to the main container\nThis will handle the keydown, mouseleave, tabindex and aria attributes\n\n***\n\n#### starDirective\n\n> **starDirective**: [`Directive`](../types#directive)\\\u003C`object`\\>\n\nA directive to be applied on each star element\n\n##### Type declaration\n\n###### index\n\n> **index**: `number`\n","RatingDirectives",{"source":16,"name":17},"## interface_RatingProps\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueTextFn\n\n> **ariaValueTextFn**: (`rating`, `maxRating`) => `string`\n\nReturn the value for the 'aria-valuetext' attribute.\n\n##### Parameters\n\n• **rating**: `number`\n\nCurrent rating value.\n\n• **maxRating**: `number`\n\nmaxRating value.\n\n##### Returns\n\n`string`\n\n##### Default Value\n\n```ts\n(rating: number, maxRating: number) => `${rating} out of ${maxRating}`\n```\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### onHover\n\n> **onHover**: (`rating`) => `void`\n\nAn event emitted when the user is hovering over a given rating.\n\nEvent payload is equal to the rating being hovered over.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onLeave\n\n> **onLeave**: (`rating`) => `void`\n\nAn event emitted when the user stops hovering over a given rating.\n\nEvent payload is equal to the rating of the last item being hovered over.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onRatingChange\n\n> **onRatingChange**: (`rating`) => `void`\n\nAn event emitted when the rating is changed.\n\nEvent payload is equal to the newly selected rating.\n\n##### Parameters\n\n• **rating**: `number`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### rating\n\n> **rating**: `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n","RatingProps",{"source":19,"name":20},"## interface_RatingSlots\n### Properties\n\n#### star\n\n> **star**: [`StarContext`](#starcontext)\n","RatingSlots",{"source":22,"name":23},"## interface_RatingState\n### Properties\n\n#### ariaLabel\n\n> **ariaLabel**: `string`\n\nThe aria label\n\n##### Default Value\n\n`'Rating'`\n\n***\n\n#### ariaLabelledBy\n\n> **ariaLabelledBy**: `string`\n\nThe aria labelled by\n\n##### Default Value\n\n`''`\n\n***\n\n#### ariaValueText\n\n> **ariaValueText**: `string`\n\nthe aria value of the rating\n\n***\n\n#### className\n\n> **className**: `string`\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### disabled\n\n> **disabled**: `boolean`\n\nIf `true`, the rating is disabled.\n\n##### Default Value\n\n`false`\n\n***\n\n#### interactive\n\n> **interactive**: `boolean`\n\nis the rating interactive i.e. listening to hover, click and keyboard events\n\n***\n\n#### maxRating\n\n> **maxRating**: `number`\n\nThe maximum rating that can be given.\n\n##### Default Value\n\n`10`\n\n***\n\n#### rating\n\n> **rating**: `number`\n\nThe current rating. Could be a decimal value like `3.75`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### readonly\n\n> **readonly**: `boolean`\n\nIf `true`, the rating can't be changed.\n\n##### Default Value\n\n`false`\n\n***\n\n#### resettable\n\n> **resettable**: `boolean`\n\nDefine if the rating can be reset.\n\nIf set to true, the user can 'unset' the rating value by cliking on the current rating value.\n\n##### Default Value\n\n`true`\n\n***\n\n#### star\n\n> **star**: [`SlotContent`](../types#slotcontent)\\\u003C[`StarContext`](#starcontext)\\>\n\nThe template to override the way each star is displayed.\n\n##### Default Value\n\n```ts\n({fill}: StarContext) => String.fromCharCode(fill === 100 ? 9733 : 9734)\n```\n\n***\n\n#### stars\n\n> **stars**: [`StarContext`](#starcontext)[]\n\nthe list of stars\n\n***\n\n#### tabindex\n\n> **tabindex**: `number`\n\nAllows setting a custom rating tabindex.\nIf the component is disabled, `tabindex` will still be set to `-1`.\n\n##### Default Value\n\n`0`\n\n***\n\n#### visibleRating\n\n> **visibleRating**: `number`\n\nthe visible value of the rating (it changes when hovering over the rating even though the real value did not change)\n","RatingState",{"source":25,"name":26},"## type alias_RatingWidget\n> **RatingWidget**: [`Widget`](../types#widget)\\\u003C[`RatingProps`](#ratingprops), [`RatingState`](#ratingstate), `object`, [`RatingActions`](#ratingactions), [`RatingDirectives`](#ratingdirectives)\\>\n","RatingWidget",{"source":28,"name":29},"## interface_StarContext\n### Properties\n\n#### fill\n\n> **fill**: `number`\n\nindicates how much the current star is filled, from 0 to 100\n\n***\n\n#### index\n\n> **index**: `number`\n\nthe position of the star in the rating\n","StarContext","API rating","@agnos-ui/svelte-bootstrap/components/rating"],"uses":{"params":["framework","type","slug"]}}]}
