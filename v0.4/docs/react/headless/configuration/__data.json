{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,81,117],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/react/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/react/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/react/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/react/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/react/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/react/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/react/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/react/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/react/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/react/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/react/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Modal","docs/react/daisyUI/modal/","daisyUI/modal/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Pagination","docs/react/daisyUI/pagination/","daisyUI/pagination/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Progressbar","docs/react/daisyUI/progressbar/","daisyUI/progressbar/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Rating","docs/react/daisyUI/rating/","daisyUI/rating/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Slider","docs/react/daisyUI/slider/","daisyUI/slider/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Toast","docs/react/daisyUI/toast/","daisyUI/toast/",{"title":82,"submenu":83},"Bootstrap Components",[84,87,91,94,97,100,103,106,111,114],{"label":7,"status":8,"path":85,"subpath":-1,"slug":86},"docs/react/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":88,"subpath":89,"slug":90},"docs/react/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":92,"subpath":89,"slug":93},"docs/react/components/alert/","components/alert/",{"label":58,"status":49,"path":95,"subpath":89,"slug":96},"docs/react/components/modal/","components/modal/",{"label":62,"status":49,"path":98,"subpath":89,"slug":99},"docs/react/components/pagination/","components/pagination/",{"label":66,"status":49,"path":101,"subpath":89,"slug":102},"docs/react/components/progressbar/","components/progressbar/",{"label":70,"status":49,"path":104,"subpath":89,"slug":105},"docs/react/components/rating/","components/rating/",{"label":107,"status":108,"path":109,"subpath":89,"slug":110},"Select","inprogress","docs/react/components/select/","components/select/",{"label":74,"status":49,"path":112,"subpath":89,"slug":113},"docs/react/components/slider/","components/slider/",{"label":78,"status":49,"path":115,"subpath":89,"slug":116},"docs/react/components/toast/","components/toast/",{"title":118,"submenu":119},"Services",[120,123,127,131,135,139],{"label":7,"status":8,"path":121,"subpath":-1,"slug":122},"docs/react/services/introduction","services/introduction",{"label":124,"status":8,"path":125,"subpath":-1,"slug":126},"Focustrack","docs/react/services/focustrack","services/focustrack",{"label":128,"status":8,"path":129,"subpath":-1,"slug":130},"Floating UI","docs/react/services/floating-ui","services/floating-ui",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Resize Observer","docs/react/services/resize-observer","services/resize-observer",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Transition","docs/react/services/transition","services/transition",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Match Media","docs/react/services/match-media","services/match-media"],"uses":{"params":["framework"]}},{"type":"data","data":[{"slug":1,"prev":2,"next":9,"content":14,"since":8,"pageMeta":15},"headless/configuration",{"slug":3,"content":4,"title":5,"status":6,"attributes":7},"headless/introduction","# Introduction to Headless\n\nA headless component is a design pattern where the component applies a separation of concerns between the logic (or \"head\") and the user interface (or \"body\").\n\nThe “headless” part refers to the logic of the component, which is decoupled from its visual representation. This means that the component doesn’t have a user interface, but it does have functionality and exposes actions (APIs), states, directives but keeps internally their implementation.\n\nLeveraging its core, AgnosUI provides headless components across various frameworks. These components not only share the core API but also adhere to the best practices and implementation strategies specific to each framework. This ensures seamless integration and optimal performance.\n\n## Anatomy of a Widget Creation\n\nAgnosUI includes pre-built widgets for supported frameworks. To use these widgets directly, you may not need to dive deeply into this section, except for understanding `directives`.\n\nCreating a new widget with the core typically involves the following base code:\n\n```typescript\nconst {patch, stores, directives, actions, api} = create[WidgetName](props);\n```\n\nLet's break down the components.\n\n### props\n\n`props` contain the essential values for the widget, received through attributes.\n\nAs an example, consider a rating widget requiring the value prop:\n\n```typescript\nconst widget = createRating({value: 2});\n```\n\nWhich is used in the HTML as follows:\n\n```html\n\u003CRating value=\"{2}\" />\n```\n\n`props` may also include functions beginning with `on...`. These are specific methods called when a prop changes. For instance, in the rating widget, you can provide the `onRatingChange` method to be invoked every time the rating value changes, with the new value.\n\n> - Every `prop` comes with a default value.\n> - In all supported frameworks, these default prop values are customizable at any level within the component subtrees. The method of injecting these configurations is specific to the framework overseeing these component trees. Additional details can be found on [the dedicated page](01-Configuration.md).\n\n### patch\n\nThe `patch` function receives a partial of the props parameters, allowing modification of the initial props provided to the widget.\n\n### stores\n\nList of Tansu stores showing the widget's current state.\n\nor example, in a rating widget, you'll find stores such as `rating$` and `visibleRating$`.\n\n- `rating$`: holds the current numeric value of the rating.\n\n- `visibleRating$`: holds the value displayed in the UI. It may differ from `rating$` during interactions like hovering, showcasing real-time visual changes.\n\nEach store can be subscribed to or integrated into the UI framework system.\n\n> `state$` is a persistent store in all widgets, grouping all other store values together. Depending on the framework or use case, it might be more convenient to use individual stores or the global `state$`.\n\n### directives\n\n`directives` are specific functions used to apply behaviors to HTML elements, strictly following [actions Svelte specifications](https://svelte.dev/docs/svelte-action).\n\nThese must be applied to the appropriate elements in the UI to ensure correct behavior.\n\nRefer to the [dedicated section](03-Directives.md) for more details.\n\n### actions\n\n`actions` contain functions designed to be directly plugged into the UI, such as `click` or `hover` in the rating widget, connected to specific HTML element events.\n\n### api\n\n`api` includes functions for programmatically changing the widget's state. Unlike the previous section, these functions are not specifically designed to be plugged into the UI.\n","Introduction","",{"since":8},"0.1.1",{"slug":10,"content":11,"title":12,"status":6,"attributes":13},"headless/slots","# Slots\n\n## What are Slots ?\n\nSlots are essentially placeholders within a component that can be filled with custom content.\nThey provide a way to dynamically inject content into a component without affecting its original template.  \nThis makes it possible to create components that can be easily adapted to different scenarios without having to duplicate code or create a new component from scratch.\n\n## Why use them ?\n\nSlots facilitate the creation of more versatile and reusable components.\nThey allow developers to design components with predefined structures while leaving room for variation in content.  \nThis separation of structure and content enhances code reusability and promotes a cleaner, more modular codebase.\n\n## AgnosUI Slot\n\nAgnosUI core widgets include slots as **properties** prefixed by _slot_ in their states.  \nThis allows to specifiy the projected content in multiple manners, like simple `string`, context-aware functions, standard slots or even fully-fledged components.\n\nTo illustrate the basic usage, let's see in action how we can use a simple slot in the Bootstrap flavour of the **Alert** component:\n\n```sample\n{Slot Standard Usage:slots/usage:278}\n```\n\n## Context\n\nSlots have access to a context, which for most cases is the widget state.  \nIt is possible however to extend the context, which enables powerful customization. Here is an example with the Bootstrap flavour of the **Pagination** component:\n\n```sample\n{Slot Context:slots/context:220}\n```\n\n## Integration with Configuration\n\nAs explained above, AgnosUI slots are inherently properties, thus benefit from the [Configuration](01-Configuration.md).  \nFor instance, we may configure the _slotStructure_ of the **Alert** to use a custom component, allowing to fully customize the widget.\n\n```sample\n{Slot Configuration:alert/icon:402}\n```\n\n\u003C!-- \u003Cframework-specific src=\"Slots.md\"> -->\n\n## Headless Usage\n\nAgnosUI provides utilities to manage slots for each framework, as frameworks have differences in their implementations of slots / templates / snippets.  \nTo learn more about the specificies of each framework, go here:\n\n\u003Cp align=\"center\">\n    \u003Ca href=\"../../angular/docs/Slots.md\">Slots in Angular\u003C/a>&nbsp;&nbsp;\n    \u003Ca href=\"../../react/docs/Slots.md\">Slots in React\u003C/a>&nbsp;&nbsp;\n    \u003Ca href=\"../../svelte/docs/Slots.md\">Slots in Svelte\u003C/a>\n\u003C/p>\n\u003C!-- \u003C/framework-specific> -->\n\n## Headless example\n\nYou can check out the following example, re-writing the Bootstrap flavour of the **Rating** component as readonly:\n\n```sample\n{Slot Headless:slots/headless:148}\n```\n","Slots",{"since":8},"# Configuration\n\n## Overview\n\nWe call **Configuration** the AgnosUI system to set the default state of widgets deeply in the application tree.  \nThis is usually referred as **context injection** and is handy to configure a part of a web application, without having to pass properties down the chain.\n\nYou can check how each framework handles this need on their respective documentation:\n\n\u003Cul>\n    \u003Cli>\u003Ca href=\"https://svelte.dev/docs/svelte#setcontext\" target=\"_blank\">setContext in Svelte\u003C/a>\u003C/li>\n    \u003Cli>\u003Ca href=\"https://react.dev/learn/passing-data-deeply-with-context\" target=\"_blank\">passing data deeply in React\u003C/a>\u003C/li>\n    \u003Cli>\u003Ca href=\"https://angular.io/guide/creating-injectable-service\" target=\"_blank\">context injection in Angular\u003C/a>\u003C/li>\n\u003C/ul>\n\nThe configuration is available out of the box as soon as widgets are created using the AgnosUI headless factories.  \nThe headless packages also provide utilities for each framework to retrieve and update widget configuration.\n\n## In Action\n\nOne of the most use cases of configuration is setting a default config for multiple sibling widgets.  \nLet's see it in action, using the Bootstrap flavour of the **Alert** component:\n\n```sample\n{Configuration:configuration/basic:278}\n```\n\nThe Configuration is then used by all children with the modified state, as shown below:\n\n```sample\n{Configuration:configuration/down:278}\n```\n",{"description":16},"Documentation for headless configuration"],"uses":{"params":["slug","framework"]}}]}
