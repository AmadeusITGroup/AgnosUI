{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"menu":2},true,[3,19,41,81,117],{"title":4,"submenu":5},"Getting started",[6,11,15],{"label":7,"status":8,"path":9,"subpath":-1,"slug":10},"Introduction","","docs/angular/getting-started/introduction","getting-started/introduction",{"label":12,"status":8,"path":13,"subpath":-1,"slug":14},"Features","docs/angular/getting-started/features","getting-started/features",{"label":16,"status":8,"path":17,"subpath":-1,"slug":18},"Installation","docs/angular/getting-started/installation","getting-started/installation",{"title":20,"submenu":21},"Headless",[22,25,29,33,37],{"label":7,"status":8,"path":23,"subpath":-1,"slug":24},"docs/angular/headless/introduction","headless/introduction",{"label":26,"status":8,"path":27,"subpath":-1,"slug":28},"Configuration","docs/angular/headless/configuration","headless/configuration",{"label":30,"status":8,"path":31,"subpath":-1,"slug":32},"Slots","docs/angular/headless/slots","headless/slots",{"label":34,"status":8,"path":35,"subpath":-1,"slug":36},"Directives","docs/angular/headless/directives","headless/directives",{"label":38,"status":8,"path":39,"subpath":-1,"slug":40},"Implementation","docs/angular/headless/implementation","headless/implementation",{"title":42,"submenu":43},"Headless Components",[44,47,53,57,61,65,69,73,77],{"label":7,"status":8,"path":45,"subpath":-1,"slug":46},"docs/angular/headless-components/introduction","headless-components/introduction",{"label":48,"status":49,"path":50,"subpath":51,"slug":52},"Accordion","stable","docs/angular/daisyUI/accordion/","headless","daisyUI/accordion/",{"label":54,"status":49,"path":55,"subpath":51,"slug":56},"Alert","docs/angular/daisyUI/alert/","daisyUI/alert/",{"label":58,"status":49,"path":59,"subpath":51,"slug":60},"Modal","docs/angular/daisyUI/modal/","daisyUI/modal/",{"label":62,"status":49,"path":63,"subpath":51,"slug":64},"Pagination","docs/angular/daisyUI/pagination/","daisyUI/pagination/",{"label":66,"status":49,"path":67,"subpath":51,"slug":68},"Progressbar","docs/angular/daisyUI/progressbar/","daisyUI/progressbar/",{"label":70,"status":49,"path":71,"subpath":51,"slug":72},"Rating","docs/angular/daisyUI/rating/","daisyUI/rating/",{"label":74,"status":49,"path":75,"subpath":51,"slug":76},"Slider","docs/angular/daisyUI/slider/","daisyUI/slider/",{"label":78,"status":49,"path":79,"subpath":51,"slug":80},"Toast","docs/angular/daisyUI/toast/","daisyUI/toast/",{"title":82,"submenu":83},"Bootstrap Components",[84,87,91,94,97,100,103,106,111,114],{"label":7,"status":8,"path":85,"subpath":-1,"slug":86},"docs/angular/bootstrap-components/introduction","bootstrap-components/introduction",{"label":48,"status":49,"path":88,"subpath":89,"slug":90},"docs/angular/components/accordion/","examples","components/accordion/",{"label":54,"status":49,"path":92,"subpath":89,"slug":93},"docs/angular/components/alert/","components/alert/",{"label":58,"status":49,"path":95,"subpath":89,"slug":96},"docs/angular/components/modal/","components/modal/",{"label":62,"status":49,"path":98,"subpath":89,"slug":99},"docs/angular/components/pagination/","components/pagination/",{"label":66,"status":49,"path":101,"subpath":89,"slug":102},"docs/angular/components/progressbar/","components/progressbar/",{"label":70,"status":49,"path":104,"subpath":89,"slug":105},"docs/angular/components/rating/","components/rating/",{"label":107,"status":108,"path":109,"subpath":89,"slug":110},"Select","inprogress","docs/angular/components/select/","components/select/",{"label":74,"status":49,"path":112,"subpath":89,"slug":113},"docs/angular/components/slider/","components/slider/",{"label":78,"status":49,"path":115,"subpath":89,"slug":116},"docs/angular/components/toast/","components/toast/",{"title":118,"submenu":119},"Services",[120,123,127,131,135,139],{"label":7,"status":8,"path":121,"subpath":-1,"slug":122},"docs/angular/services/introduction","services/introduction",{"label":124,"status":8,"path":125,"subpath":-1,"slug":126},"Focustrack","docs/angular/services/focustrack","services/focustrack",{"label":128,"status":8,"path":129,"subpath":-1,"slug":130},"Floating UI","docs/angular/services/floating-ui","services/floating-ui",{"label":132,"status":8,"path":133,"subpath":-1,"slug":134},"Resize Observer","docs/angular/services/resize-observer","services/resize-observer",{"label":136,"status":8,"path":137,"subpath":-1,"slug":138},"Transition","docs/angular/services/transition","services/transition",{"label":140,"status":8,"path":141,"subpath":-1,"slug":142},"Match Media","docs/angular/services/match-media","services/match-media"],"uses":{"params":["framework"]}},{"type":"data","data":[{"slug":1,"prev":2,"next":9,"content":14,"since":8,"pageMeta":15},"getting-started/installation",{"slug":3,"content":4,"title":5,"status":6,"attributes":7},"getting-started/features","# Features\n\n## Agnostic core\n\nA framework-agnostic core of widget factories that provide reactive models and APIs to drive the data. These concepts are deeply explained in the [Introduction](00-Introduction.md) and [Headless](../01-Headless/00-Introduction.md).\n\n## Headless widgets\n\nEach widget is delivered in headless mode in Angular, React and Svelte using the same factory, but you can also use sthese factories for other JS framework of your choice, with a bit work work to create adapters.\nYou can use widgets with any front-end CSS framework.\nThis approach frees you from the complexity of widget logic, enabling you to concentrate on making your design stand out.\n\n## Accessible\n\nWidgets are designed with a strong emphasis on accessibility. We adhere to the [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag) and established design patterns, by providing keyboard navigation, aria attributes and focus handlers; features are available in headless components, and rigorously tested in the bootstrap version of each component.\n\n## Highly configurable\n\nWidgets offer a multitude of properties and access points that allow for customization of their behavior, appearance, and user experience. These attributes can be uniquely configured for each widget instance at any given time.\n\n## Consistency\n\nCore is fully tested to ensure consistent functionality across different framework implementations of the widgets. Additionally, we maintain uniformity in the markup used by each framework’s widget implementation\n\n## Extented Bootstrap CSS widgets\n\nBootstrap CSS widgets are available for Angular, React and Svelte in separated packages with additional standalone widgets like slider...Read more about this [here](../03-Bootstrap-Components/00-Introduction.md).\n","Features","",{"since":8},"0.1.1",{"slug":10,"content":11,"title":12,"status":6,"attributes":13},"headless/introduction","# Introduction to Headless\n\nA headless component is a design pattern where the component applies a separation of concerns between the logic (or \"head\") and the user interface (or \"body\").\n\nThe “headless” part refers to the logic of the component, which is decoupled from its visual representation. This means that the component doesn’t have a user interface, but it does have functionality and exposes actions (APIs), states, directives but keeps internally their implementation.\n\nLeveraging its core, AgnosUI provides headless components across various frameworks. These components not only share the core API but also adhere to the best practices and implementation strategies specific to each framework. This ensures seamless integration and optimal performance.\n\n## Anatomy of a Widget Creation\n\nAgnosUI includes pre-built widgets for supported frameworks. To use these widgets directly, you may not need to dive deeply into this section, except for understanding `directives`.\n\nCreating a new widget with the core typically involves the following base code:\n\n```typescript\nconst {patch, stores, directives, actions, api} = create[WidgetName](props);\n```\n\nLet's break down the components.\n\n### props\n\n`props` contain the essential values for the widget, received through attributes.\n\nAs an example, consider a rating widget requiring the value prop:\n\n```typescript\nconst widget = createRating({value: 2});\n```\n\nWhich is used in the HTML as follows:\n\n```html\n\u003CRating value=\"{2}\" />\n```\n\n`props` may also include functions beginning with `on...`. These are specific methods called when a prop changes. For instance, in the rating widget, you can provide the `onRatingChange` method to be invoked every time the rating value changes, with the new value.\n\n> - Every `prop` comes with a default value.\n> - In all supported frameworks, these default prop values are customizable at any level within the component subtrees. The method of injecting these configurations is specific to the framework overseeing these component trees. Additional details can be found on [the dedicated page](01-Configuration.md).\n\n### patch\n\nThe `patch` function receives a partial of the props parameters, allowing modification of the initial props provided to the widget.\n\n### stores\n\nList of Tansu stores showing the widget's current state.\n\nor example, in a rating widget, you'll find stores such as `rating$` and `visibleRating$`.\n\n- `rating$`: holds the current numeric value of the rating.\n\n- `visibleRating$`: holds the value displayed in the UI. It may differ from `rating$` during interactions like hovering, showcasing real-time visual changes.\n\nEach store can be subscribed to or integrated into the UI framework system.\n\n> `state$` is a persistent store in all widgets, grouping all other store values together. Depending on the framework or use case, it might be more convenient to use individual stores or the global `state$`.\n\n### directives\n\n`directives` are specific functions used to apply behaviors to HTML elements, strictly following [actions Svelte specifications](https://svelte.dev/docs/svelte-action).\n\nThese must be applied to the appropriate elements in the UI to ensure correct behavior.\n\nRefer to the [dedicated section](03-Directives.md) for more details.\n\n### actions\n\n`actions` contain functions designed to be directly plugged into the UI, such as `click` or `hover` in the rating widget, connected to specific HTML element events.\n\n### api\n\n`api` includes functions for programmatically changing the widget's state. Unlike the previous section, these functions are not specifically designed to be plugged into the UI.\n","Headless: Introduction",{"since":8},"# Installation\n\n## Prerequisites\n\nBefore you begin, make sure you have the following prerequisites installed on your system:\n\n\u003Cul>\n  \u003Cli>Node.js: You can download and install Node.js from the \u003Ca href=\"https://nodejs.org/\" target=\"_blank\">official website\u003C/a>\u003C/li>\n\u003C/ul>\n\n## Create a new project\n\nIf you haven't already, create a new project where you want to use AgnosUI.\n\n## Install AgnosUI\n\nAgnosUI provides two flavours of the widgets for you to choose from:\n\n- **Headless**: The headless package contains the headless functionality of the widget library. It can be used with any front-end CSS framework. It uses the core of AgnosUI which is framework agnostic.\n- **Bootstrap**: The Bootstrap package builds upon the headless package to provide additional UI widgets styled with Bootstrap.\n\nTo install the headless part, open your project's terminal and run the following command:\n\n```bash\n{install-headless}\n```\n\nTo install the bootstrap part, open your project's terminal and run the following command:\n\n```bash\n{install-bootstrap}\n```\n",{"description":16},"Documentation for getting started installation"],"uses":{"params":["slug","framework"]}}]}
