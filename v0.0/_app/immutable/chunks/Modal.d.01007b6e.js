const t='/// <reference types="react" />\nexport declare const Modal: import("react").ForwardRefExoticComponent<Partial<Omit<import("@agnos-ui/core").ModalProps, `slot${string}`> & {\n    slotDefault: import("@agnos-ui/react-headless").SlotContent<import("@agnos-ui/react-headless").WidgetSlotContext<import("@agnos-ui/react-headless").AdaptWidgetSlots<import("@agnos-ui/core").ModalWidget>> & Omit<Omit<import("@agnos-ui/core").ModalContext, keyof import("@agnos-ui/react-headless").WidgetSlotContext<any>>, `slot${string}`> & {}>;\n    slotStructure: import("@agnos-ui/react-headless").SlotContent<import("@agnos-ui/react-headless").WidgetSlotContext<import("@agnos-ui/react-headless").AdaptWidgetSlots<import("@agnos-ui/core").ModalWidget>> & Omit<Omit<import("@agnos-ui/core").ModalContext, keyof import("@agnos-ui/react-headless").WidgetSlotContext<any>>, `slot${string}`> & {}>;\n    slotFooter: import("@agnos-ui/react-headless").SlotContent<import("@agnos-ui/react-headless").WidgetSlotContext<import("@agnos-ui/react-headless").AdaptWidgetSlots<import("@agnos-ui/core").ModalWidget>> & Omit<Omit<import("@agnos-ui/core").ModalContext, keyof import("@agnos-ui/react-headless").WidgetSlotContext<any>>, `slot${string}`> & {}>;\n    slotHeader: import("@agnos-ui/react-headless").SlotContent<import("@agnos-ui/react-headless").WidgetSlotContext<import("@agnos-ui/react-headless").AdaptWidgetSlots<import("@agnos-ui/core").ModalWidget>> & Omit<Omit<import("@agnos-ui/core").ModalContext, keyof import("@agnos-ui/react-headless").WidgetSlotContext<any>>, `slot${string}`> & {}>;\n    slotTitle: import("@agnos-ui/react-headless").SlotContent<import("@agnos-ui/react-headless").WidgetSlotContext<import("@agnos-ui/react-headless").AdaptWidgetSlots<import("@agnos-ui/core").ModalWidget>> & Omit<Omit<import("@agnos-ui/core").ModalContext, keyof import("@agnos-ui/react-headless").WidgetSlotContext<any>>, `slot${string}`> & {}>;\n}> & {\n    children?: import("react").ReactNode;\n} & import("react").RefAttributes<unknown>>;\n';export{t as default};
