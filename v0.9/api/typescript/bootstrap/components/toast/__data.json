{"type":"data","nodes":[null,{"type":"data","data":[{"includesFwk":1,"includesPkg":1,"menu":2,"since":71},true,[3,6,9,60],{"title":4,"path":5,"submenu":-1},"Types","api/typescript/bootstrap/types",{"title":7,"path":8,"submenu":-1},"Config","api/typescript/bootstrap/config",{"title":10,"path":-1,"submenu":11},"Components",[12,16,20,24,28,32,36,40,44,48,52,56],{"path":13,"slug":14,"label":15},"api/typescript/bootstrap/components/accordion","components/accordion","Accordion",{"path":17,"slug":18,"label":19},"api/typescript/bootstrap/components/alert","components/alert","Alert",{"path":21,"slug":22,"label":23},"api/typescript/bootstrap/components/carousel","components/carousel","Carousel",{"path":25,"slug":26,"label":27},"api/typescript/bootstrap/components/collapse","components/collapse","Collapse",{"path":29,"slug":30,"label":31},"api/typescript/bootstrap/components/modal","components/modal","Modal",{"path":33,"slug":34,"label":35},"api/typescript/bootstrap/components/pagination","components/pagination","Pagination",{"path":37,"slug":38,"label":39},"api/typescript/bootstrap/components/progressbar","components/progressbar","Progressbar",{"path":41,"slug":42,"label":43},"api/typescript/bootstrap/components/rating","components/rating","Rating",{"path":45,"slug":46,"label":47},"api/typescript/bootstrap/components/select","components/select","Select",{"path":49,"slug":50,"label":51},"api/typescript/bootstrap/components/slider","components/slider","Slider",{"path":53,"slug":54,"label":55},"api/typescript/bootstrap/components/toast","components/toast","Toast",{"path":57,"slug":58,"label":59},"api/typescript/bootstrap/components/tree","components/tree","Tree",{"title":61,"path":-1,"submenu":62},"Transitions",[63,67],{"path":64,"slug":65,"label":66},"api/typescript/bootstrap/services/transitions/collapse","services/transitions/collapse","collapse",{"path":68,"slug":69,"label":70},"api/typescript/bootstrap/services/transitions/fade","services/transitions/fade","fade","v0.4.0"],"uses":{"params":["framework","type"]}},{"type":"data","data":[{"slug":1,"content":2,"title":51,"import":52},"components/toast",[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48],{"source":4,"name":5},"## constant_createToast\n> `const` **createToast**: `WidgetFactory`\\\u003C[`ToastWidget`](#toastwidget)\\>\n\n\nCreate an ToastWidget with given config props\n\n### Param\n\nan optional alert config\n\n### Returns\n\nan ToastWidget\n","createToast",{"source":7,"name":8},"## constant_defaultToasterProps\n> `const` **defaultToasterProps**: [`ToasterProps`](#toasterprops)\n\n","defaultToasterProps",{"source":10,"name":11},"## function_getToastDefaultConfig\n> **getToastDefaultConfig**(): [`ToastProps`](#toastprops)\n\n\nRetrieve a shallow copy of the default Toast config\n\n### Returns\n\n[`ToastProps`](#toastprops)\n\nthe default Toast config\n","getToastDefaultConfig",{"source":13,"name":14},"## interface_ToastApi\n\nRepresents the API for the toast component.\n\n### Methods\n\n#### close\n\n> **close**(): `void`\n\n\nTriggers alert closing programmatically (same as clicking on the close button (Ã—)).\n\n##### Returns\n\n`void`\n\n***\n\n#### open\n\n> **open**(): `void`\n\n\nTriggers the alert to be displayed for the user.\n\n##### Returns\n\n`void`\n","ToastApi",{"source":16,"name":17},"## interface_ToastContext\n\nRepresents the context for a Toast widget.\nThis interface is an alias for `WidgetSlotContext\u003CToastWidget>`.\n\n### Properties\n\n#### api\n\n> **api**: [`ToastApi`](#toastapi)\n\n\nall the api functions to interact with the widget\n\n***\n\n#### directives\n\n> **directives**: [`ToastDirectives`](#toastdirectives)\n\n\ndirectives to be used on html elements in the template of the widget or in the slots\n\n***\n\n#### state\n\n> **state**: [`ToastState`](#toaststate)\n\n\nthe state of the widget\n","ToastContext",{"source":19,"name":20},"## interface_ToastDirectives\n\nInterface representing the directives for a toast component.\n\n### Properties\n\n#### autoHideDirective\n\n> **autoHideDirective**: `Directive`\n\n\nDirective that handles the autohide of the toast component\n\n***\n\n#### bodyDirective\n\n> **bodyDirective**: `Directive`\n\n\nDirective that adds all the necessary attributes to the body\n\n***\n\n#### closeButtonDirective\n\n> **closeButtonDirective**: `Directive`\n\n\nDirective that adds all the necessary attributes to the close button depending on the presence of the header\n\n***\n\n#### transitionDirective\n\n> **transitionDirective**: `Directive`\n\n\nthe transition directive, piloting what is the visual effect of going from hidden to visible\n","ToastDirectives",{"source":22,"name":23},"## class_Toaster\n\nCreate a toaster provider with helpers and state.\n\n### Param\n\nOptions for the toaster.\n\n### Type Parameters\n\n#### Props\n\n`Props` *extends* [`Partial`](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)\\\u003C`ToastProps`\\> = `ToastProps`\n\nType of the toast properties.\n\n### Properties\n\n#### eventsDirective\n\n> `readonly` **eventsDirective**: `Directive`\\\u003C`number`\\>\n\n\nEvents directive is used to set events on the Toast component, to keep track for example of pointer enter/leave,\nused to pause / resume the timer in case of duration and pauseOnHover are specified.\n\n***\n\n#### toasts\n\n> `readonly` **toasts**: [`ReadableSignal`](https://amadeusitgroup.github.io/tansu/interfaces/ReadableSignal.html)\\\u003C[`ToasterToast`](#toastertoast)\\\u003C`Props`\\>[]\\>\n\n\nGet the toasts value from the store\n\n##### Returns\n\nThe array of toasts.\n\n### Accessors\n\n#### timers\n\n##### Get Signature\n\n> **get** **timers**(): `ReadonlyMap`\\\u003C`number`, [`ToasterTimer`](#toastertimer)\\>\n\n\nGet the timers value from the store\n\n###### Returns\n\n`ReadonlyMap`\\\u003C`number`, [`ToasterTimer`](#toastertimer)\\>\n\nThe map of timers.\n\n### Methods\n\n#### addTimer\n\n> `readonly` **addTimer**(`id`, `duration`): `void`\n\n\nAdd timer for a toast\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast\n\n###### duration\n\n`number` = `...`\n\nDuration of the timer, by default taken from options\n\n##### Returns\n\n`void`\n\n***\n\n#### addToast\n\n> `readonly` **addToast**(`props`): `number`\n\n\nHelper to add a toast to the viewport.\n\n##### Parameters\n\n###### props\n\n`Props`\n\nOptions for the toast.\n\n##### Returns\n\n`number`\n\nThe ID of the added toast.\n\n***\n\n#### closeAll\n\n> `readonly` **closeAll**(): `void`\n\n\nHelper to close all toasts at once\n\n##### Returns\n\n`void`\n\n***\n\n#### pauseTimer\n\n> `readonly` **pauseTimer**(`id`): `void`\n\n\nPause a timer for a toast\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast\n\n##### Returns\n\n`void`\n\n***\n\n#### removeToast\n\n> `readonly` **removeToast**(`id`): `void`\n\n\nHelper to remove a toast to the viewport.\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast to remove.\n\n##### Returns\n\n`void`\n\n***\n\n#### resumeTimer\n\n> `readonly` **resumeTimer**(`id`): `void`\n\n\nResume a timer for a toast\n\n##### Parameters\n\n###### id\n\n`number`\n\nId of the toast\n\n##### Returns\n\n`void`\n\n***\n\n#### updateToasts\n\n> `readonly` **updateToasts**(): `void`\n\n\nHelper to update toasts when options change\n\n##### Returns\n\n`void`\n","Toaster",{"source":25,"name":26},"## interface_ToasterProps\n\nProps of the toaster\n\n### Properties\n\n#### closeAll?\n\n> `optional` **closeAll**: `boolean`\n\n\nAdd a button to close all the toasts at once\n\n***\n\n#### closeAllLabel?\n\n> `optional` **closeAllLabel**: `string`\n\n\nClose all label\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nDisplay a dismiss button on each toast. When duration = 0, this is enforced to true\n\n***\n\n#### duration\n\n> **duration**: `number`\n\n\nHow much time (ms) a toast is displayed; 0 means it won't be removed until a manual action\n\n***\n\n#### limit?\n\n> `optional` **limit**: `number`\n\n\nMaximum number of toasts displayed\n\n***\n\n#### pauseOnHover?\n\n> `optional` **pauseOnHover**: `boolean`\n\n\nPause toast when hover\n\n***\n\n#### position\n\n> **position**: [`ToastPositions`](#toastpositions)\n\n\nWhere to position the toasts\n","ToasterProps",{"source":28,"name":29},"## interface_ToasterTimer\n\nRepresents a timer used by the toaster service.\n\n### Properties\n\n#### duration\n\n> **duration**: `number`\n\n\nThe duration for which the timer is set (optional). Used internally to compute the remaining time.\n\n***\n\n#### paused?\n\n> `optional` **paused**: `number`\n\n\nThe timestamp when the timer was paused (optional).\n\n***\n\n#### started\n\n> **started**: `number`\n\n\nThe timestamp when the timer was started.\n\n***\n\n#### timeout\n\n> **timeout**: `null` \\| `Timeout`\n\n\nThe timeout identifier returned by `setTimeout`.\n","ToasterTimer",{"source":31,"name":32},"## interface_ToasterToast\n\nToast object\n\n### Type Parameters\n\n#### Props\n\n`Props`\n\nType of the toast properties.\n\n### Properties\n\n#### id\n\n> **id**: `number`\n\n\nIdentifier of the toasts in the toaster\n\n***\n\n#### props\n\n> **props**: `Props`\n\n\nProperties of the toast\n","ToasterToast",{"source":34,"name":35},"## interface_ToastExtraProps\n\nInterface representing additional properties for the Toast component.\n\n### Extended by\n\n- [`ToastState`](#toaststate)\n- [`ToastProps`](#toastprops)\n\n### Properties\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nTemplate for the toast content\n\n***\n\n#### header\n\n> **header**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nHeader template for the toast component\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nGlobal template for the toast component\n","ToastExtraProps",{"source":37,"name":38},"## constant_toastPositions\n> `const` **toastPositions**: [`Record`](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\\\u003C[`ToastPositions`](#toastpositions), `string`\\>\n\n\nA mapping of toast position keys to their corresponding CSS class strings of bootstrap.\nThese classes define the positioning of toast notifications on the screen.\n\nThe keys represent various positions on the screen, such as top-left, top-center,\nmiddle-right, etc., and the values are the CSS classes of bootstrap that apply the respective\npositioning styles.\n\nExample usage:\n```typescript\nconst positionClass = toastPositions.topLeft; // \"top-0 start-0\"\n```\n","toastPositions",{"source":40,"name":41},"## type alias_ToastPositions\n> **ToastPositions** = `\"topLeft\"` \\| `\"topCenter\"` \\| `\"topRight\"` \\| `\"middleLeft\"` \\| `\"middleCenter\"` \\| `\"middleRight\"` \\| `\"bottomLeft\"` \\| `\"bottomCenter\"` \\| `\"bottomRight\"`\n\n\nRepresents the possible positions for displaying a toast notification.\n\nThe positions are defined based on a grid layout with three horizontal\nalignments (left, center, right) and three vertical alignments (top, middle, bottom).\n\nAvailable positions:\n- `topLeft`: Top-left corner of the screen.\n- `topCenter`: Top-center of the screen.\n- `topRight`: Top-right corner of the screen.\n- `middleLeft`: Middle-left side of the screen.\n- `middleCenter`: Center of the screen.\n- `middleRight`: Middle-right side of the screen.\n- `bottomLeft`: Bottom-left corner of the screen.\n- `bottomCenter`: Bottom-center of the screen.\n- `bottomRight`: Bottom-right corner of the screen.\n","ToastPositions",{"source":43,"name":44},"## interface_ToastProps\n\nInterface representing the properties for the Toast component.\n\n### Properties\n\n#### animated\n\n> **animated**: `boolean`\n\n\nIf `true`, alert closing will be animated.\n\nAnimation is triggered  when clicked on the close button (Ã—),\nvia the `.close()` function or the visible prop is changed\n\n##### Default Value\n\n`true`\n\n***\n\n#### animatedOnInit\n\n> **animatedOnInit**: `boolean`\n\n\nIf `true`, alert opening will be animated.\n\nAnimation is triggered  when the `.open()` function is called\nor the visible prop is changed\n\n##### Default Value\n\n`false`\n\n***\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (Ã—) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nHeader template for the toast component\n\n***\n\n#### onHidden\n\n> **onHidden**: () => `void`\n\n\nCallback called when the alert is hidden.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onShown\n\n> **onShown**: () => `void`\n\n\nCallback called when the alert is shown.\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### onVisibleChange\n\n> **onVisibleChange**: (`visible`) => `void`\n\n\nCallback called when the alert visibility changed.\n\n##### Parameters\n\n###### visible\n\n`boolean`\n\n##### Returns\n\n`void`\n\n##### Default Value\n\n```ts\n() => {}\n```\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nGlobal template for the toast component\n\n***\n\n#### transition\n\n> **transition**: `TransitionFn`\n\n\nThe transition function will be executed when the alert is displayed or hidden.\n\nDepending on the value of `animatedOnInit`, the animation can be optionally skipped during the showing process.\n\n##### Default Value\n\n`fadeTransition`\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastProps",{"source":46,"name":47},"## interface_ToastState\n\nRepresents the state of a Toast component.\n\n### Properties\n\n#### ariaCloseButtonLabel\n\n> **ariaCloseButtonLabel**: `string`\n\n\nAccessibility close button label\n\n##### Default Value\n\n`'Close'`\n\n***\n\n#### autoHide\n\n> **autoHide**: `boolean`\n\n\nIf `true` automatically hides the toast after the delay.\n\n##### Default Value\n\n`true`\n\n***\n\n#### children\n\n> **children**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nTemplate for the toast content\n\n***\n\n#### className\n\n> **className**: `string`\n\n\nCSS classes to be applied on the widget main container\n\n##### Default Value\n\n`''`\n\n***\n\n#### delay\n\n> **delay**: `number`\n\n\nDelay in milliseconds before hiding the toast.\n\n##### Default Value\n\n`5000`\n\n***\n\n#### dismissible\n\n> **dismissible**: `boolean`\n\n\nIf `true`, alert can be dismissed by the user.\nThe close button (Ã—) will be displayed and you can be notified of the event with the (close) output.\n\n##### Default Value\n\n`true`\n\n***\n\n#### header\n\n> **header**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nHeader template for the toast component\n\n***\n\n#### hidden\n\n> **hidden**: `boolean`\n\n\nIs `true` when the alert is hidden. Compared to `visible`, this is updated after the transition is executed.\n\n***\n\n#### structure\n\n> **structure**: `SlotContent`\\\u003C[`ToastContext`](#toastcontext)\\>\n\n\nGlobal template for the toast component\n\n***\n\n#### visible\n\n> **visible**: `boolean`\n\n\nIf `true` the alert is visible to the user\n\n##### Default Value\n\n`true`\n","ToastState",{"source":49,"name":50},"## type alias_ToastWidget\n> **ToastWidget** = `Widget`\\\u003C[`ToastProps`](#toastprops), [`ToastState`](#toaststate), [`ToastApi`](#toastapi), [`ToastDirectives`](#toastdirectives)\\>\n\n\nRepresents a Toast widget component.\n","ToastWidget","API toast","@agnos-ui/core-bootstrap/components/toast"],"uses":{"params":["framework","type","slug"]}}]}
